
can_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005440  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800554c  0800554c  0001554c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057dc  080057dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080057dc  080057dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057dc  080057dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000070  08005854  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005854  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f77  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6a  00000000  00000000  00035010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00037f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00038f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a479  00000000  00000000  00039d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011733  00000000  00000000  000541d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5c2  00000000  00000000  00065904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4ec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d0  00000000  00000000  000f4f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005534 	.word	0x08005534

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005534 	.word	0x08005534

0800014c <BqPack_StructInit>:
/* Global variables */
queue_t Fifo_Queue;
uint8_t error_flag;

void BqPack_StructInit(bq_pack *pack)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	pack -> voltage = 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
	pack -> temperature1 = 0;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	809a      	strh	r2, [r3, #4]
	pack -> temperature2 = 0;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	80da      	strh	r2, [r3, #6]
	pack -> lowest_cell_volts = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	811a      	strh	r2, [r3, #8]
	pack -> highest_cell_volts = 0;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	815a      	strh	r2, [r3, #10]
	pack -> op_mode = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	731a      	strb	r2, [r3, #12]
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr

08000182 <BqPack_StructUpdate_CurrSensor>:

void BqPack_StructUpdate_CurrSensor(bq_pack *pack, CurrentData *control)
{
 8000182:	b480      	push	{r7}
 8000184:	b083      	sub	sp, #12
 8000186:	af00      	add	r7, sp, #0
 8000188:	6078      	str	r0, [r7, #4]
 800018a:	6039      	str	r1, [r7, #0]
	pack->current = control->current;
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	69da      	ldr	r2, [r3, #28]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	615a      	str	r2, [r3, #20]
}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <BqPack_RecalculateData>:


void BqPack_RecalculateData(bq_pack *pack)
{
 800019e:	b480      	push	{r7}
 80001a0:	b083      	sub	sp, #12
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
	pack->power = pack->current * pack->voltage;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	695b      	ldr	r3, [r3, #20]
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	6812      	ldr	r2, [r2, #0]
 80001ae:	fb02 f203 	mul.w	r2, r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	619a      	str	r2, [r3, #24]
	pack->charge_level = 0;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	779a      	strb	r2, [r3, #30]
	pack->avg_temperature = (pack->temperature1 + pack->temperature2)/2;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	889b      	ldrh	r3, [r3, #4]
 80001c0:	461a      	mov	r2, r3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	88db      	ldrh	r3, [r3, #6]
 80001c6:	4413      	add	r3, r2
 80001c8:	0fda      	lsrs	r2, r3, #31
 80001ca:	4413      	add	r3, r2
 80001cc:	105b      	asrs	r3, r3, #1
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	839a      	strh	r2, [r3, #28]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
	...

080001e0 <BqPack_StructUpdate_MSP430>:


void BqPack_StructUpdate_MSP430(bq_pack *pack, char *control)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
	char *data;

	data = strtok(control, ";");
 80001ea:	4941      	ldr	r1, [pc, #260]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 80001ec:	6838      	ldr	r0, [r7, #0]
 80001ee:	f004 f9a7 	bl	8004540 <strtok>
 80001f2:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 80001f4:	69fb      	ldr	r3, [r7, #28]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d00c      	beq.n	8000214 <BqPack_StructUpdate_MSP430+0x34>
	{
		uint32_t temp = (uint32_t)strtol(data, NULL, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2100      	movs	r1, #0
 80001fe:	69f8      	ldr	r0, [r7, #28]
 8000200:	f004 fa80 	bl	8004704 <strtol>
 8000204:	4603      	mov	r3, r0
 8000206:	61bb      	str	r3, [r7, #24]
		if(temp)
 8000208:	69bb      	ldr	r3, [r7, #24]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d002      	beq.n	8000214 <BqPack_StructUpdate_MSP430+0x34>
		{
			pack -> voltage = temp;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	69ba      	ldr	r2, [r7, #24]
 8000212:	601a      	str	r2, [r3, #0]
		}
	}

	data = strtok(NULL, ";");
 8000214:	4936      	ldr	r1, [pc, #216]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 8000216:	2000      	movs	r0, #0
 8000218:	f004 f992 	bl	8004540 <strtok>
 800021c:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d00c      	beq.n	800023e <BqPack_StructUpdate_MSP430+0x5e>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2100      	movs	r1, #0
 8000228:	69f8      	ldr	r0, [r7, #28]
 800022a:	f004 fa6b 	bl	8004704 <strtol>
 800022e:	4603      	mov	r3, r0
 8000230:	82fb      	strh	r3, [r7, #22]
		if(temp)
 8000232:	8afb      	ldrh	r3, [r7, #22]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <BqPack_StructUpdate_MSP430+0x5e>
		{
			pack -> temperature1 = temp;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	8afa      	ldrh	r2, [r7, #22]
 800023c:	809a      	strh	r2, [r3, #4]
		}
	}

	data = strtok(NULL, ";");
 800023e:	492c      	ldr	r1, [pc, #176]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 8000240:	2000      	movs	r0, #0
 8000242:	f004 f97d 	bl	8004540 <strtok>
 8000246:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000248:	69fb      	ldr	r3, [r7, #28]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d00c      	beq.n	8000268 <BqPack_StructUpdate_MSP430+0x88>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	69f8      	ldr	r0, [r7, #28]
 8000254:	f004 fa56 	bl	8004704 <strtol>
 8000258:	4603      	mov	r3, r0
 800025a:	82bb      	strh	r3, [r7, #20]
		if(temp)
 800025c:	8abb      	ldrh	r3, [r7, #20]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <BqPack_StructUpdate_MSP430+0x88>
		{
			pack -> temperature2 = temp;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	8aba      	ldrh	r2, [r7, #20]
 8000266:	80da      	strh	r2, [r3, #6]
		}
	}

	data = strtok(NULL, ";");
 8000268:	4921      	ldr	r1, [pc, #132]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 800026a:	2000      	movs	r0, #0
 800026c:	f004 f968 	bl	8004540 <strtok>
 8000270:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00c      	beq.n	8000292 <BqPack_StructUpdate_MSP430+0xb2>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	2100      	movs	r1, #0
 800027c:	69f8      	ldr	r0, [r7, #28]
 800027e:	f004 fa41 	bl	8004704 <strtol>
 8000282:	4603      	mov	r3, r0
 8000284:	827b      	strh	r3, [r7, #18]
		if(temp)
 8000286:	8a7b      	ldrh	r3, [r7, #18]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <BqPack_StructUpdate_MSP430+0xb2>
		{
			pack -> lowest_cell_volts = temp;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	8a7a      	ldrh	r2, [r7, #18]
 8000290:	811a      	strh	r2, [r3, #8]
		}
	}

	data = strtok(NULL, ";");
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 8000294:	2000      	movs	r0, #0
 8000296:	f004 f953 	bl	8004540 <strtok>
 800029a:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d00c      	beq.n	80002bc <BqPack_StructUpdate_MSP430+0xdc>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2100      	movs	r1, #0
 80002a6:	69f8      	ldr	r0, [r7, #28]
 80002a8:	f004 fa2c 	bl	8004704 <strtol>
 80002ac:	4603      	mov	r3, r0
 80002ae:	823b      	strh	r3, [r7, #16]
		if(temp)
 80002b0:	8a3b      	ldrh	r3, [r7, #16]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <BqPack_StructUpdate_MSP430+0xdc>
		{
			pack -> highest_cell_volts = temp;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	8a3a      	ldrh	r2, [r7, #16]
 80002ba:	815a      	strh	r2, [r3, #10]
		}
	}

	data = strtok(NULL, ";");
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 80002be:	2000      	movs	r0, #0
 80002c0:	f004 f93e 	bl	8004540 <strtok>
 80002c4:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d00d      	beq.n	80002e8 <BqPack_StructUpdate_MSP430+0x108>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2100      	movs	r1, #0
 80002d0:	69f8      	ldr	r0, [r7, #28]
 80002d2:	f004 fa17 	bl	8004704 <strtol>
 80002d6:	4603      	mov	r3, r0
 80002d8:	81fb      	strh	r3, [r7, #14]
		if(temp)
 80002da:	89fb      	ldrh	r3, [r7, #14]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d003      	beq.n	80002e8 <BqPack_StructUpdate_MSP430+0x108>
		{
			pack -> op_mode = temp;
 80002e0:	89fb      	ldrh	r3, [r7, #14]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80002e8:	bf00      	nop
 80002ea:	3720      	adds	r7, #32
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	0800554c 	.word	0x0800554c

080002f4 <BqPack_CheckForErrors>:

uint8_t BqPack_CheckForErrors(bq_pack *pack)
{
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	b097      	sub	sp, #92	; 0x5c
 80002f8:	af12      	add	r7, sp, #72	; 0x48
 80002fa:	6078      	str	r0, [r7, #4]
	error_flag = VoltageErrorCheck(&(pack->voltage));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f8ca 	bl	8000498 <VoltageErrorCheck>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	4b5f      	ldr	r3, [pc, #380]	; (8000488 <BqPack_CheckForErrors+0x194>)
 800030a:	701a      	strb	r2, [r3, #0]
	if(error_flag != BqPack_OK)
 800030c:	4b5e      	ldr	r3, [pc, #376]	; (8000488 <BqPack_CheckForErrors+0x194>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d02d      	beq.n	8000370 <BqPack_CheckForErrors+0x7c>
	{
		CanSendPdo(hcan, 0x85, 8, &can_frame_template, error_flag, (uint8_t)((pack->voltage)/1000), 0, 0, 0, 0, 0, 0);
 8000314:	4b5c      	ldr	r3, [pc, #368]	; (8000488 <BqPack_CheckForErrors+0x194>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	6812      	ldr	r2, [r2, #0]
 800031c:	495b      	ldr	r1, [pc, #364]	; (800048c <BqPack_CheckForErrors+0x198>)
 800031e:	fba1 1202 	umull	r1, r2, r1, r2
 8000322:	0992      	lsrs	r2, r2, #6
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	4e5a      	ldr	r6, [pc, #360]	; (8000490 <BqPack_CheckForErrors+0x19c>)
 8000328:	2100      	movs	r1, #0
 800032a:	9110      	str	r1, [sp, #64]	; 0x40
 800032c:	2100      	movs	r1, #0
 800032e:	910f      	str	r1, [sp, #60]	; 0x3c
 8000330:	2100      	movs	r1, #0
 8000332:	910e      	str	r1, [sp, #56]	; 0x38
 8000334:	2100      	movs	r1, #0
 8000336:	910d      	str	r1, [sp, #52]	; 0x34
 8000338:	2100      	movs	r1, #0
 800033a:	910c      	str	r1, [sp, #48]	; 0x30
 800033c:	2100      	movs	r1, #0
 800033e:	910b      	str	r1, [sp, #44]	; 0x2c
 8000340:	920a      	str	r2, [sp, #40]	; 0x28
 8000342:	9309      	str	r3, [sp, #36]	; 0x24
 8000344:	4b53      	ldr	r3, [pc, #332]	; (8000494 <BqPack_CheckForErrors+0x1a0>)
 8000346:	9308      	str	r3, [sp, #32]
 8000348:	2308      	movs	r3, #8
 800034a:	9307      	str	r3, [sp, #28]
 800034c:	2385      	movs	r3, #133	; 0x85
 800034e:	9306      	str	r3, [sp, #24]
 8000350:	466d      	mov	r5, sp
 8000352:	f106 0410 	add.w	r4, r6, #16
 8000356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800035a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800035e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000362:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000366:	f000 faa1 	bl	80008ac <CanSendPdo>
		return error_flag;
 800036a:	4b47      	ldr	r3, [pc, #284]	; (8000488 <BqPack_CheckForErrors+0x194>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	e087      	b.n	8000480 <BqPack_CheckForErrors+0x18c>
	}

	error_flag = TemperatureErrorCheck(&pack->temperature1, &pack->temperature2);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	1d1a      	adds	r2, r3, #4
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	3306      	adds	r3, #6
 8000378:	4619      	mov	r1, r3
 800037a:	4610      	mov	r0, r2
 800037c:	f000 f8a2 	bl	80004c4 <TemperatureErrorCheck>
 8000380:	4603      	mov	r3, r0
 8000382:	461a      	mov	r2, r3
 8000384:	4b40      	ldr	r3, [pc, #256]	; (8000488 <BqPack_CheckForErrors+0x194>)
 8000386:	701a      	strb	r2, [r3, #0]
	if(error_flag != BqPack_OK)
 8000388:	4b3f      	ldr	r3, [pc, #252]	; (8000488 <BqPack_CheckForErrors+0x194>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d032      	beq.n	80003f6 <BqPack_CheckForErrors+0x102>
	{
		uint8_t htemp = (pack->temperature1 > pack->temperature2) ? pack->temperature1 : pack->temperature2;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	88da      	ldrh	r2, [r3, #6]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	889b      	ldrh	r3, [r3, #4]
 8000398:	4293      	cmp	r3, r2
 800039a:	bf38      	it	cc
 800039c:	4613      	movcc	r3, r2
 800039e:	b29b      	uxth	r3, r3
 80003a0:	73bb      	strb	r3, [r7, #14]
		CanSendPdo(hcan, 0x85, 8, &can_frame_template, error_flag, (uint8_t)htemp + 30, 0, 0, 0, 0, 0, 0);
 80003a2:	4b39      	ldr	r3, [pc, #228]	; (8000488 <BqPack_CheckForErrors+0x194>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	7bba      	ldrb	r2, [r7, #14]
 80003a8:	321e      	adds	r2, #30
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	4e38      	ldr	r6, [pc, #224]	; (8000490 <BqPack_CheckForErrors+0x19c>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	9110      	str	r1, [sp, #64]	; 0x40
 80003b2:	2100      	movs	r1, #0
 80003b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80003b6:	2100      	movs	r1, #0
 80003b8:	910e      	str	r1, [sp, #56]	; 0x38
 80003ba:	2100      	movs	r1, #0
 80003bc:	910d      	str	r1, [sp, #52]	; 0x34
 80003be:	2100      	movs	r1, #0
 80003c0:	910c      	str	r1, [sp, #48]	; 0x30
 80003c2:	2100      	movs	r1, #0
 80003c4:	910b      	str	r1, [sp, #44]	; 0x2c
 80003c6:	920a      	str	r2, [sp, #40]	; 0x28
 80003c8:	9309      	str	r3, [sp, #36]	; 0x24
 80003ca:	4b32      	ldr	r3, [pc, #200]	; (8000494 <BqPack_CheckForErrors+0x1a0>)
 80003cc:	9308      	str	r3, [sp, #32]
 80003ce:	2308      	movs	r3, #8
 80003d0:	9307      	str	r3, [sp, #28]
 80003d2:	2385      	movs	r3, #133	; 0x85
 80003d4:	9306      	str	r3, [sp, #24]
 80003d6:	466d      	mov	r5, sp
 80003d8:	f106 0410 	add.w	r4, r6, #16
 80003dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80003e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80003e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003ec:	f000 fa5e 	bl	80008ac <CanSendPdo>
		return error_flag;
 80003f0:	4b25      	ldr	r3, [pc, #148]	; (8000488 <BqPack_CheckForErrors+0x194>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	e044      	b.n	8000480 <BqPack_CheckForErrors+0x18c>
	}

	error_flag = VoltageDiffErrorCheck(&pack->highest_cell_volts, &pack->lowest_cell_volts);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	f103 020a 	add.w	r2, r3, #10
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	3308      	adds	r3, #8
 8000400:	4619      	mov	r1, r3
 8000402:	4610      	mov	r0, r2
 8000404:	f000 f873 	bl	80004ee <VoltageDiffErrorCheck>
 8000408:	4603      	mov	r3, r0
 800040a:	461a      	mov	r2, r3
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <BqPack_CheckForErrors+0x194>)
 800040e:	701a      	strb	r2, [r3, #0]
	if(error_flag != BqPack_OK)
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <BqPack_CheckForErrors+0x194>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d031      	beq.n	800047c <BqPack_CheckForErrors+0x188>
	{
		uint8_t volt_diff = abs(pack->highest_cell_volts - pack->lowest_cell_volts);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	895b      	ldrh	r3, [r3, #10]
 800041c:	461a      	mov	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	891b      	ldrh	r3, [r3, #8]
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	2b00      	cmp	r3, #0
 8000426:	bfb8      	it	lt
 8000428:	425b      	neglt	r3, r3
 800042a:	73fb      	strb	r3, [r7, #15]
		CanSendPdo(hcan, 0x85, 8, &can_frame_template, error_flag, volt_diff, 0, 0, 0, 0, 0, 0);
 800042c:	4b16      	ldr	r3, [pc, #88]	; (8000488 <BqPack_CheckForErrors+0x194>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4e17      	ldr	r6, [pc, #92]	; (8000490 <BqPack_CheckForErrors+0x19c>)
 8000432:	2200      	movs	r2, #0
 8000434:	9210      	str	r2, [sp, #64]	; 0x40
 8000436:	2200      	movs	r2, #0
 8000438:	920f      	str	r2, [sp, #60]	; 0x3c
 800043a:	2200      	movs	r2, #0
 800043c:	920e      	str	r2, [sp, #56]	; 0x38
 800043e:	2200      	movs	r2, #0
 8000440:	920d      	str	r2, [sp, #52]	; 0x34
 8000442:	2200      	movs	r2, #0
 8000444:	920c      	str	r2, [sp, #48]	; 0x30
 8000446:	2200      	movs	r2, #0
 8000448:	920b      	str	r2, [sp, #44]	; 0x2c
 800044a:	7bfa      	ldrb	r2, [r7, #15]
 800044c:	920a      	str	r2, [sp, #40]	; 0x28
 800044e:	9309      	str	r3, [sp, #36]	; 0x24
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <BqPack_CheckForErrors+0x1a0>)
 8000452:	9308      	str	r3, [sp, #32]
 8000454:	2308      	movs	r3, #8
 8000456:	9307      	str	r3, [sp, #28]
 8000458:	2385      	movs	r3, #133	; 0x85
 800045a:	9306      	str	r3, [sp, #24]
 800045c:	466d      	mov	r5, sp
 800045e:	f106 0410 	add.w	r4, r6, #16
 8000462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000466:	e894 0003 	ldmia.w	r4, {r0, r1}
 800046a:	e885 0003 	stmia.w	r5, {r0, r1}
 800046e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000472:	f000 fa1b 	bl	80008ac <CanSendPdo>
		return error_flag;
 8000476:	4b04      	ldr	r3, [pc, #16]	; (8000488 <BqPack_CheckForErrors+0x194>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	e001      	b.n	8000480 <BqPack_CheckForErrors+0x18c>
	}
	return error_flag;
 800047c:	4b02      	ldr	r3, [pc, #8]	; (8000488 <BqPack_CheckForErrors+0x194>)
 800047e:	781b      	ldrb	r3, [r3, #0]
}
 8000480:	4618      	mov	r0, r3
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000488:	2000015c 	.word	0x2000015c
 800048c:	10624dd3 	.word	0x10624dd3
 8000490:	20000190 	.word	0x20000190
 8000494:	20000118 	.word	0x20000118

08000498 <VoltageErrorCheck>:

BqPack_Error_Status VoltageErrorCheck(uint32_t *voltage)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	if(*voltage > OVERVOLTAGE_ERR) 		return BqPack_ErrOV;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b78      	cmp	r3, #120	; 0x78
 80004a6:	d901      	bls.n	80004ac <VoltageErrorCheck+0x14>
 80004a8:	2301      	movs	r3, #1
 80004aa:	e006      	b.n	80004ba <VoltageErrorCheck+0x22>
	if(*voltage < UNDERVOLTAGE_ERR) 	return BqPack_ErrUV;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b51      	cmp	r3, #81	; 0x51
 80004b2:	d801      	bhi.n	80004b8 <VoltageErrorCheck+0x20>
 80004b4:	2302      	movs	r3, #2
 80004b6:	e000      	b.n	80004ba <VoltageErrorCheck+0x22>

	return BqPack_OK;
 80004b8:	2300      	movs	r3, #0
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <TemperatureErrorCheck>:

BqPack_Error_Status TemperatureErrorCheck(uint16_t *t1, uint16_t *t2)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	if(*t1 > HIGHTEMP_ERR || *t2 > HIGHTEMP_ERR) 	return BqPack_ErrHT;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	2b37      	cmp	r3, #55	; 0x37
 80004d4:	d803      	bhi.n	80004de <TemperatureErrorCheck+0x1a>
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	2b37      	cmp	r3, #55	; 0x37
 80004dc:	d901      	bls.n	80004e2 <TemperatureErrorCheck+0x1e>
 80004de:	2303      	movs	r3, #3
 80004e0:	e000      	b.n	80004e4 <TemperatureErrorCheck+0x20>
	if(*t1 < LOWTEMP_ERR || *t2 < LOWTEMP_ERR) 		return BqPack_ErrLT;

	return BqPack_OK;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <VoltageDiffErrorCheck>:

BqPack_Error_Status VoltageDiffErrorCheck(uint16_t *voltage1, uint16_t *voltage2)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
 80004f6:	6039      	str	r1, [r7, #0]
	if(abs(*voltage1 - *voltage2) > BAL_ERR) 	return BqPack_ErrBal;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	1ad3      	subs	r3, r2, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	bfb8      	it	lt
 8000508:	425b      	neglt	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	dd01      	ble.n	8000512 <VoltageDiffErrorCheck+0x24>
 800050e:	2309      	movs	r3, #9
 8000510:	e000      	b.n	8000514 <VoltageDiffErrorCheck+0x26>

	return BqPack_OK;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
	...

08000520 <BqPack_CheckForWarnings>:
/*************************************************************************************/
void BqPack_CheckForWarnings(bq_pack *pack)
{
 8000520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000522:	b097      	sub	sp, #92	; 0x5c
 8000524:	af12      	add	r7, sp, #72	; 0x48
 8000526:	6078      	str	r0, [r7, #4]
	pack->warnings += VoltageWarningCheck(&pack->voltage);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f87a 	bl	8000624 <VoltageWarningCheck>
 8000530:	4603      	mov	r3, r0
 8000532:	4619      	mov	r1, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	89da      	ldrh	r2, [r3, #14]
 8000538:	b28b      	uxth	r3, r1
 800053a:	4413      	add	r3, r2
 800053c:	b29a      	uxth	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	81da      	strh	r2, [r3, #14]
	pack->warnings += TemperatureWarningCheck(&pack->temperature1, &pack->temperature2);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	1d1a      	adds	r2, r3, #4
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3306      	adds	r3, #6
 800054a:	4619      	mov	r1, r3
 800054c:	4610      	mov	r0, r2
 800054e:	f000 f87f 	bl	8000650 <TemperatureWarningCheck>
 8000552:	4603      	mov	r3, r0
 8000554:	4619      	mov	r1, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	89da      	ldrh	r2, [r3, #14]
 800055a:	b28b      	uxth	r3, r1
 800055c:	4413      	add	r3, r2
 800055e:	b29a      	uxth	r2, r3
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	81da      	strh	r2, [r3, #14]
	pack->warnings += VoltageDiffErrorCheck(&pack->highest_cell_volts, &pack->lowest_cell_volts);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f103 020a 	add.w	r2, r3, #10
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3308      	adds	r3, #8
 800056e:	4619      	mov	r1, r3
 8000570:	4610      	mov	r0, r2
 8000572:	f7ff ffbc 	bl	80004ee <VoltageDiffErrorCheck>
 8000576:	4603      	mov	r3, r0
 8000578:	4619      	mov	r1, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	89da      	ldrh	r2, [r3, #14]
 800057e:	b28b      	uxth	r3, r1
 8000580:	4413      	add	r3, r2
 8000582:	b29a      	uxth	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	81da      	strh	r2, [r3, #14]

	if(pack->warnings != 0)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	89db      	ldrh	r3, [r3, #14]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d03e      	beq.n	800060e <BqPack_CheckForWarnings+0xee>
	{
		uint8_t htemp = (pack->temperature1 > pack->temperature2) ? pack->temperature1 : pack->temperature2;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	88da      	ldrh	r2, [r3, #6]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	889b      	ldrh	r3, [r3, #4]
 8000598:	4293      	cmp	r3, r2
 800059a:	bf38      	it	cc
 800059c:	4613      	movcc	r3, r2
 800059e:	b29b      	uxth	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		uint8_t volt_diff = abs(pack->highest_cell_volts - pack->lowest_cell_volts);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	895b      	ldrh	r3, [r3, #10]
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	891b      	ldrh	r3, [r3, #8]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bfb8      	it	lt
 80005b2:	425b      	neglt	r3, r3
 80005b4:	73bb      	strb	r3, [r7, #14]
		CanSendPdo(hcan, 0x86, 8, &can_frame_template, pack->warnings, (uint8_t)(pack->voltage/1000), htemp, volt_diff, 0, 0, 0, 0);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	89db      	ldrh	r3, [r3, #14]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	6812      	ldr	r2, [r2, #0]
 80005c0:	4915      	ldr	r1, [pc, #84]	; (8000618 <BqPack_CheckForWarnings+0xf8>)
 80005c2:	fba1 1202 	umull	r1, r2, r1, r2
 80005c6:	0992      	lsrs	r2, r2, #6
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	4e14      	ldr	r6, [pc, #80]	; (800061c <BqPack_CheckForWarnings+0xfc>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	9110      	str	r1, [sp, #64]	; 0x40
 80005d0:	2100      	movs	r1, #0
 80005d2:	910f      	str	r1, [sp, #60]	; 0x3c
 80005d4:	2100      	movs	r1, #0
 80005d6:	910e      	str	r1, [sp, #56]	; 0x38
 80005d8:	2100      	movs	r1, #0
 80005da:	910d      	str	r1, [sp, #52]	; 0x34
 80005dc:	7bb9      	ldrb	r1, [r7, #14]
 80005de:	910c      	str	r1, [sp, #48]	; 0x30
 80005e0:	7bf9      	ldrb	r1, [r7, #15]
 80005e2:	910b      	str	r1, [sp, #44]	; 0x2c
 80005e4:	920a      	str	r2, [sp, #40]	; 0x28
 80005e6:	9309      	str	r3, [sp, #36]	; 0x24
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <BqPack_CheckForWarnings+0x100>)
 80005ea:	9308      	str	r3, [sp, #32]
 80005ec:	2308      	movs	r3, #8
 80005ee:	9307      	str	r3, [sp, #28]
 80005f0:	2386      	movs	r3, #134	; 0x86
 80005f2:	9306      	str	r3, [sp, #24]
 80005f4:	466d      	mov	r5, sp
 80005f6:	f106 0410 	add.w	r4, r6, #16
 80005fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000602:	e885 0003 	stmia.w	r5, {r0, r1}
 8000606:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800060a:	f000 f94f 	bl	80008ac <CanSendPdo>
	}

}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000616:	bf00      	nop
 8000618:	10624dd3 	.word	0x10624dd3
 800061c:	20000190 	.word	0x20000190
 8000620:	20000118 	.word	0x20000118

08000624 <VoltageWarningCheck>:

uint8_t VoltageWarningCheck(uint32_t *voltage)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if(*voltage > OVERVOLTAGE_WARN)		return pow(2, 0);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b75      	cmp	r3, #117	; 0x75
 8000632:	d901      	bls.n	8000638 <VoltageWarningCheck+0x14>
 8000634:	2301      	movs	r3, #1
 8000636:	e006      	b.n	8000646 <VoltageWarningCheck+0x22>
	if(*voltage < UNDERVOLTAGE_WARN)	return pow(2, 1);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b52      	cmp	r3, #82	; 0x52
 800063e:	d801      	bhi.n	8000644 <VoltageWarningCheck+0x20>
 8000640:	2302      	movs	r3, #2
 8000642:	e000      	b.n	8000646 <VoltageWarningCheck+0x22>
	return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <TemperatureWarningCheck>:

uint8_t TemperatureWarningCheck(uint16_t *t1, uint16_t *t2)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	if(*t1 > HIGHTEMP_WARN || *t2 > HIGHTEMP_WARN) 	return pow(2, 2);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	2b2d      	cmp	r3, #45	; 0x2d
 8000660:	d803      	bhi.n	800066a <TemperatureWarningCheck+0x1a>
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	2b2d      	cmp	r3, #45	; 0x2d
 8000668:	d901      	bls.n	800066e <TemperatureWarningCheck+0x1e>
 800066a:	2304      	movs	r3, #4
 800066c:	e00a      	b.n	8000684 <TemperatureWarningCheck+0x34>
	if(*t1 < LOWTEMP_WARN || *t2 < LOWTEMP_WARN) 	return pow(2, 3);
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	2b04      	cmp	r3, #4
 8000674:	d903      	bls.n	800067e <TemperatureWarningCheck+0x2e>
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2b04      	cmp	r3, #4
 800067c:	d801      	bhi.n	8000682 <TemperatureWarningCheck+0x32>
 800067e:	2308      	movs	r3, #8
 8000680:	e000      	b.n	8000684 <TemperatureWarningCheck+0x34>
	return 0;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_CAN_Init+0x64>)
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <MX_CAN_Init+0x68>)
 8000698:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_CAN_Init+0x64>)
 800069c:	2208      	movs	r2, #8
 800069e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_CAN_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_CAN_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_CAN_Init+0x64>)
 80006ae:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80006b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_CAN_Init+0x64>)
 80006b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_CAN_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_CAN_Init+0x64>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_CAN_Init+0x64>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_CAN_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_CAN_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_CAN_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_CAN_Init+0x64>)
 80006e2:	f000 ff9d 	bl	8001620 <HAL_CAN_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 fbb3 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000190 	.word	0x20000190
 80006f8:	40006400 	.word	0x40006400

080006fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a28      	ldr	r2, [pc, #160]	; (80007b8 <HAL_CAN_MspInit+0xbc>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d149      	bne.n	80007b0 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <HAL_CAN_MspInit+0xc0>)
 800071e:	69db      	ldr	r3, [r3, #28]
 8000720:	4a26      	ldr	r2, [pc, #152]	; (80007bc <HAL_CAN_MspInit+0xc0>)
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000726:	61d3      	str	r3, [r2, #28]
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <HAL_CAN_MspInit+0xc0>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <HAL_CAN_MspInit+0xc0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a20      	ldr	r2, [pc, #128]	; (80007bc <HAL_CAN_MspInit+0xc0>)
 800073a:	f043 0304 	orr.w	r3, r3, #4
 800073e:	6193      	str	r3, [r2, #24]
 8000740:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <HAL_CAN_MspInit+0xc0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f003 0304 	and.w	r3, r3, #4
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800074c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000750:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	4817      	ldr	r0, [pc, #92]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 8000762:	f001 ff93 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4619      	mov	r1, r3
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <HAL_CAN_MspInit+0xc4>)
 800077c:	f001 ff86 	bl	800268c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 3, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2103      	movs	r1, #3
 8000784:	2013      	movs	r0, #19
 8000786:	f001 fe9a 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800078a:	2013      	movs	r0, #19
 800078c:	f001 feb3 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	2103      	movs	r1, #3
 8000794:	2014      	movs	r0, #20
 8000796:	f001 fe92 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800079a:	2014      	movs	r0, #20
 800079c:	f001 feab 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2103      	movs	r1, #3
 80007a4:	2015      	movs	r0, #21
 80007a6:	f001 fe8a 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80007aa:	2015      	movs	r0, #21
 80007ac:	f001 fea3 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80007b0:	bf00      	nop
 80007b2:	3720      	adds	r7, #32
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40006400 	.word	0x40006400
 80007bc:	40021000 	.word	0x40021000
 80007c0:	40010800 	.word	0x40010800

080007c4 <CanInit>:
/**
 * @brief: Initialize CAN network
 * @param chosen_network
 *
 **/
void CanInit(CAN_HandleTypeDef chosen_network) {
 80007c4:	b084      	sub	sp, #16
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	f107 0c08 	add.w	ip, r7, #8
 80007ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&chosen_network) != HAL_OK) {
 80007d2:	f107 0008 	add.w	r0, r7, #8
 80007d6:	f001 f8e7 	bl	80019a8 <HAL_CAN_Start>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <CanInit+0x20>
		Error_Handler();
 80007e0:	f000 fb39 	bl	8000e56 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&chosen_network,
 80007e4:	2103      	movs	r1, #3
 80007e6:	f107 0008 	add.w	r0, r7, #8
 80007ea:	f001 fb40 	bl	8001e6e <HAL_CAN_ActivateNotification>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 80007f4:	f000 fb2f 	bl	8000e56 <Error_Handler>
	}
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <CanSaveReceivedData>:
/**
 * @brief: store received data from chosen network
 * @param chosen_network
 *
 **/
void CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 8000804:	b084      	sub	sp, #16
 8000806:	b580      	push	{r7, lr}
 8000808:	af00      	add	r7, sp, #0
 800080a:	f107 0c08 	add.w	ip, r7, #8
 800080e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000814:	f103 0220 	add.w	r2, r3, #32
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
 8000818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800081a:	333c      	adds	r3, #60	; 0x3c
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 800081c:	2100      	movs	r1, #0
 800081e:	f107 0008 	add.w	r0, r7, #8
 8000822:	f001 fa13 	bl	8001c4c <HAL_CAN_GetRxMessage>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <CanSaveReceivedData+0x2c>
		/* Reception Error */
		Error_Handler();
 800082c:	f000 fb13 	bl	8000e56 <Error_Handler>
	}
//	CanClearRxDataFrame(ptr_can_rx_frame_template);
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000838:	b004      	add	sp, #16
 800083a:	4770      	bx	lr

0800083c <CanConfigFilter>:
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 *
 **/
void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank,
		uint32_t can_filter_id_high, uint32_t can_filter_id_low,
		uint32_t can_filter_mask_id_high, uint32_t can_filter_mask_id_low) {
 800083c:	b084      	sub	sp, #16
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
 8000842:	f107 0c08 	add.w	ip, r7, #8
 8000846:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 800084a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800084e:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <CanConfigFilter+0x6c>)
 8000850:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <CanConfigFilter+0x6c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <CanConfigFilter+0x6c>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
//	can_filter_template.FilterIdHigh = 0x290 << 5; //can_filter_id_high; //18FF;			//0x321 << 5;
//	can_filter_template.FilterIdLow = 0x00000000; //can_filter_id_low; //50E5;				//0x00000000;
	can_filter_template.FilterIdHigh = 0x0000;
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <CanConfigFilter+0x6c>)
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
	can_filter_template.FilterIdLow = 0x0000;
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <CanConfigFilter+0x6c>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <CanConfigFilter+0x6c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <CanConfigFilter+0x6c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
//	can_filter_template.FilterMaskIdHigh = 0x290 << 5;	//0x111 << 5;
//	can_filter_template.FilterMaskIdLow = 0x00000000;
	can_filter_template.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <CanConfigFilter+0x6c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <CanConfigFilter+0x6c>)
 800087e:	2201      	movs	r2, #1
 8000880:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <CanConfigFilter+0x6c>)
 8000884:	220e      	movs	r2, #14
 8000886:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 8000888:	4907      	ldr	r1, [pc, #28]	; (80008a8 <CanConfigFilter+0x6c>)
 800088a:	f107 0008 	add.w	r0, r7, #8
 800088e:	f000 ffc2 	bl	8001816 <HAL_CAN_ConfigFilter>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <CanConfigFilter+0x60>
		Error_Handler();
 8000898:	f000 fadd 	bl	8000e56 <Error_Handler>
	}

}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008a4:	b004      	add	sp, #16
 80008a6:	4770      	bx	lr
 80008a8:	200001d0 	.word	0x200001d0

080008ac <CanSendPdo>:
 *
 **/
void CanSendPdo(CAN_HandleTypeDef chosen_network, uint32_t frame_pdo_id,
		uint8_t number_of_bytes, CanDataFrameInit *ptr_can_frame_template,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 80008ac:	b084      	sub	sp, #16
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	f107 0c08 	add.w	ip, r7, #8
 80008b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_pdo_id;
 80008ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008be:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 80008c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 80008c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 80008cc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80008d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d2:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 80008d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d6:	2200      	movs	r2, #0
 80008d8:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 80008da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008dc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80008e0:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 80008e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008e4:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80008e8:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 80008ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008ec:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80008f0:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 80008f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f4:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80008f8:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 80008fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fc:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000900:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 8000902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000904:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000908:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 800090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000910:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 8000912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000914:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000918:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 800091a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800091c:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000920:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <CanSendPdo+0xac>)
 8000924:	f107 0008 	add.w	r0, r7, #8
 8000928:	f001 f882 	bl	8001a30 <HAL_CAN_AddTxMessage>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <CanSendPdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000932:	f000 fa90 	bl	8000e56 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 8000936:	bf00      	nop
 8000938:	f107 0008 	add.w	r0, r7, #8
 800093c:	f001 f952 	bl	8001be4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b03      	cmp	r3, #3
 8000944:	d1f8      	bne.n	8000938 <CanSendPdo+0x8c>
	}

	CanClearTxDataFrame(ptr_can_frame_template);
 8000946:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000948:	f000 f808 	bl	800095c <CanClearTxDataFrame>

}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000954:	b004      	add	sp, #16
 8000956:	4770      	bx	lr
 8000958:	20000170 	.word	0x20000170

0800095c <CanClearTxDataFrame>:
 * @brief: data sent over usb is not correctly shown when structure is not cleared
 *         after every message sent. Assigning zeros has no influence on the network
 * @param ptr_can_frame_template: chosen structure which helds all the data
 *
 **/
void CanClearTxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->tx_header.StdId = 0x00;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 0;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = 0x0;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = 0x0;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = 0x0;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = 0x0;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = 0x0;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = 0x0;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = 0x0;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = 0x0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	71da      	strb	r2, [r3, #7]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <CanClearRxDataFrame>:


void CanClearRxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->rx_header.StdId = 0x00;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
	ptr_can_frame_template->rx_header.RTR = CAN_RTR_DATA;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
	ptr_can_frame_template->rx_header.IDE = CAN_ID_STD;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
	ptr_can_frame_template->rx_header.DLC = 0;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30

	ptr_can_frame_template->rx_data[0] = 0x0;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ptr_can_frame_template->rx_data[1] = 0x0;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	ptr_can_frame_template->rx_data[2] = 0x0;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ptr_can_frame_template->rx_data[3] = 0x0;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ptr_can_frame_template->rx_data[4] = 0x0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ptr_can_frame_template->rx_data[5] = 0x0;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ptr_can_frame_template->rx_data[6] = 0x0;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ptr_can_frame_template->rx_data[7] = 0x0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr

08000a26 <GetRawData>:
 */

#include "current_sensor.h"
#include "can.h"

void GetRawData(CurrentData *current_data, CanDataFrameInit *can_rx_frame){
 8000a26:	b4b0      	push	{r4, r5, r7}
 8000a28:	b085      	sub	sp, #20
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
	current_data->rx_header = can_rx_frame->rx_header;
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	4615      	mov	r5, r2
 8000a36:	f103 0420 	add.w	r4, r3, #32
 8000a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	current_data->current = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
	uint32_t buffer;
	buffer = (uint32_t)(can_rx_frame->rx_data[3]) << 0;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000a52:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69da      	ldr	r2, [r3, #28]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	441a      	add	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[2]) << 8;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	69da      	ldr	r2, [r3, #28]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	441a      	add	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[1]) << 16;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000a7c:	041b      	lsls	r3, r3, #16
 8000a7e:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69da      	ldr	r2, [r3, #28]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	441a      	add	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[0]) << 24;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000a92:	061b      	lsls	r3, r3, #24
 8000a94:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	69da      	ldr	r2, [r3, #28]
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	441a      	add	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	61da      	str	r2, [r3, #28]

}
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bcb0      	pop	{r4, r5, r7}
 8000aaa:	4770      	bx	lr

08000aac <Queue_Init>:
#include <assert.h>

queue_t Fifo_Queue;

void Queue_Init()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	Fifo_Queue.head = 0;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <Queue_Init+0x28>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	Fifo_Queue.tail = 0;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <Queue_Init+0x28>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
	Fifo_Queue.size = 5;
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <Queue_Init+0x28>)
 8000abe:	2205      	movs	r2, #5
 8000ac0:	609a      	str	r2, [r3, #8]
	Fifo_Queue.data = malloc(sizeof(frame_to_send*) * 5);
 8000ac2:	2014      	movs	r0, #20
 8000ac4:	f003 fc76 	bl	80043b4 <malloc>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	461a      	mov	r2, r3
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <Queue_Init+0x28>)
 8000ace:	60da      	str	r2, [r3, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000160 	.word	0x20000160

08000ad8 <Queue_TxCanMessage>:

/* Pass global variable FifoQueue as argument */
void* Queue_TxCanMessage() {
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	b099      	sub	sp, #100	; 0x64
 8000adc:	af12      	add	r7, sp, #72	; 0x48
    if (Fifo_Queue.tail == Fifo_Queue.head) {
 8000ade:	4b33      	ldr	r3, [pc, #204]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	4b32      	ldr	r3, [pc, #200]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d101      	bne.n	8000aee <Queue_TxCanMessage+0x16>
        return NULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e059      	b.n	8000ba2 <Queue_TxCanMessage+0xca>
    }
    frame_to_send *handle = Fifo_Queue.data[Fifo_Queue.tail];
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	4413      	add	r3, r2
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	617b      	str	r3, [r7, #20]
    CanSendPdo(hcan, handle->tx_header, 8, &can_frame_template,
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	7912      	ldrb	r2, [r2, #4]
 8000b06:	6979      	ldr	r1, [r7, #20]
 8000b08:	7949      	ldrb	r1, [r1, #5]
 8000b0a:	6978      	ldr	r0, [r7, #20]
 8000b0c:	7980      	ldrb	r0, [r0, #6]
 8000b0e:	697c      	ldr	r4, [r7, #20]
 8000b10:	79e4      	ldrb	r4, [r4, #7]
 8000b12:	697d      	ldr	r5, [r7, #20]
 8000b14:	7a2d      	ldrb	r5, [r5, #8]
 8000b16:	697e      	ldr	r6, [r7, #20]
 8000b18:	7a76      	ldrb	r6, [r6, #9]
 8000b1a:	60fe      	str	r6, [r7, #12]
 8000b1c:	697e      	ldr	r6, [r7, #20]
 8000b1e:	f896 c00a 	ldrb.w	ip, [r6, #10]
 8000b22:	4666      	mov	r6, ip
 8000b24:	60be      	str	r6, [r7, #8]
 8000b26:	697e      	ldr	r6, [r7, #20]
 8000b28:	f896 c00b 	ldrb.w	ip, [r6, #11]
 8000b2c:	4666      	mov	r6, ip
 8000b2e:	603e      	str	r6, [r7, #0]
 8000b30:	4e1f      	ldr	r6, [pc, #124]	; (8000bb0 <Queue_TxCanMessage+0xd8>)
 8000b32:	607e      	str	r6, [r7, #4]
 8000b34:	683e      	ldr	r6, [r7, #0]
 8000b36:	9610      	str	r6, [sp, #64]	; 0x40
 8000b38:	68be      	ldr	r6, [r7, #8]
 8000b3a:	960f      	str	r6, [sp, #60]	; 0x3c
 8000b3c:	68fe      	ldr	r6, [r7, #12]
 8000b3e:	960e      	str	r6, [sp, #56]	; 0x38
 8000b40:	950d      	str	r5, [sp, #52]	; 0x34
 8000b42:	940c      	str	r4, [sp, #48]	; 0x30
 8000b44:	900b      	str	r0, [sp, #44]	; 0x2c
 8000b46:	910a      	str	r1, [sp, #40]	; 0x28
 8000b48:	9209      	str	r2, [sp, #36]	; 0x24
 8000b4a:	4a1a      	ldr	r2, [pc, #104]	; (8000bb4 <Queue_TxCanMessage+0xdc>)
 8000b4c:	9208      	str	r2, [sp, #32]
 8000b4e:	2208      	movs	r2, #8
 8000b50:	9207      	str	r2, [sp, #28]
 8000b52:	9306      	str	r3, [sp, #24]
 8000b54:	466d      	mov	r5, sp
 8000b56:	687e      	ldr	r6, [r7, #4]
 8000b58:	4633      	mov	r3, r6
 8000b5a:	f103 0410 	add.w	r4, r3, #16
 8000b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b66:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b6a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b6e:	f7ff fe9d 	bl	80008ac <CanSendPdo>
			handle->tx_data[4],
			handle->tx_data[5],
			handle->tx_data[6],
			handle->tx_data[7]);

    CanClearTxDataFrame(&can_frame_template);
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <Queue_TxCanMessage+0xdc>)
 8000b74:	f7ff fef2 	bl	800095c <CanClearTxDataFrame>
    Fifo_Queue.data[Fifo_Queue.tail] = NULL;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000b7a:	68da      	ldr	r2, [r3, #12]
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	4413      	add	r3, r2
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
    Fifo_Queue.tail = (Fifo_Queue.tail + 1) % Fifo_Queue.size;
 8000b88:	4b08      	ldr	r3, [pc, #32]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000b90:	6892      	ldr	r2, [r2, #8]
 8000b92:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b96:	fb02 f201 	mul.w	r2, r2, r1
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <Queue_TxCanMessage+0xd4>)
 8000b9e:	6053      	str	r3, [r2, #4]
    return handle;
 8000ba0:	697b      	ldr	r3, [r7, #20]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	371c      	adds	r7, #28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000160 	.word	0x20000160
 8000bb0:	20000190 	.word	0x20000190
 8000bb4:	20000118 	.word	0x20000118

08000bb8 <Queue_AddTxCanMessage>:

/* frame to send is just header (id) and data as array of uint8_t*/
int Queue_AddTxCanMessage(frame_to_send* handle) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    if (((Fifo_Queue.head + 1) % Fifo_Queue.size) == Fifo_Queue.tail) {
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000bc8:	6892      	ldr	r2, [r2, #8]
 8000bca:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bce:	fb02 f201 	mul.w	r2, r2, r1
 8000bd2:	1a9a      	subs	r2, r3, r2
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d102      	bne.n	8000be2 <Queue_AddTxCanMessage+0x2a>
        return -1;
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000be0:	e014      	b.n	8000c0c <Queue_AddTxCanMessage+0x54>
    }
    Fifo_Queue.data[Fifo_Queue.head] = handle;
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	4413      	add	r3, r2
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	601a      	str	r2, [r3, #0]
    Fifo_Queue.head = (Fifo_Queue.head + 1) % Fifo_Queue.size;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000bfa:	6892      	ldr	r2, [r2, #8]
 8000bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c00:	fb02 f201 	mul.w	r2, r2, r1
 8000c04:	1a9b      	subs	r3, r3, r2
 8000c06:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <Queue_AddTxCanMessage+0x60>)
 8000c08:	6013      	str	r3, [r2, #0]
    return 0;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000160 	.word	0x20000160

08000c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_GPIO_Init+0xb8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c7e:	4816      	ldr	r0, [pc, #88]	; (8000cd8 <MX_GPIO_Init+0xbc>)
 8000c80:	f001 fe88 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c8a:	4814      	ldr	r0, [pc, #80]	; (8000cdc <MX_GPIO_Init+0xc0>)
 8000c8c:	f001 fe82 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca2:	f107 0310 	add.w	r3, r7, #16
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <MX_GPIO_Init+0xbc>)
 8000caa:	f001 fcef 	bl	800268c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_GPIO_Init+0xc0>)
 8000cc8:	f001 fce0 	bl	800268c <HAL_GPIO_Init>

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40011000 	.word	0x40011000
 8000cdc:	40010800 	.word	0x40010800

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ce2:	b093      	sub	sp, #76	; 0x4c
 8000ce4:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f000 fc15 	bl	8001514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f86f 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f7ff ff95 	bl	8000c1c <MX_GPIO_Init>
  MX_CAN_Init();
 8000cf2:	f7ff fccd 	bl	8000690 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000cf6:	f000 fb33 	bl	8001360 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000cfa:	f000 fa7d 	bl	80011f8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000cfe:	f000 fa29 	bl	8001154 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  CanConfigFilter(hcan, 0, 0x0000, 0x0000, 0x0000, 0x0000);
 8000d02:	4e2c      	ldr	r6, [pc, #176]	; (8000db4 <main+0xd4>)
 8000d04:	2300      	movs	r3, #0
 8000d06:	930a      	str	r3, [sp, #40]	; 0x28
 8000d08:	2300      	movs	r3, #0
 8000d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9308      	str	r3, [sp, #32]
 8000d10:	2300      	movs	r3, #0
 8000d12:	9307      	str	r3, [sp, #28]
 8000d14:	2300      	movs	r3, #0
 8000d16:	9306      	str	r3, [sp, #24]
 8000d18:	466d      	mov	r5, sp
 8000d1a:	f106 0410 	add.w	r4, r6, #16
 8000d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d26:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d2a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d2e:	f7ff fd85 	bl	800083c <CanConfigFilter>
  CanInit(hcan);
 8000d32:	4e20      	ldr	r6, [pc, #128]	; (8000db4 <main+0xd4>)
 8000d34:	466d      	mov	r5, sp
 8000d36:	f106 0410 	add.w	r4, r6, #16
 8000d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d42:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d46:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d4a:	f7ff fd3b 	bl	80007c4 <CanInit>

  BqPack_StructInit(&battery_pack);
 8000d4e:	481a      	ldr	r0, [pc, #104]	; (8000db8 <main+0xd8>)
 8000d50:	f7ff f9fc 	bl	800014c <BqPack_StructInit>
  /* Start the timer */
  HAL_TIM_Base_Start_IT(&htim1);
 8000d54:	4819      	ldr	r0, [pc, #100]	; (8000dbc <main+0xdc>)
 8000d56:	f002 fab9 	bl	80032cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000d5a:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <main+0xe0>)
 8000d5c:	f002 fab6 	bl	80032cc <HAL_TIM_Base_Start_IT>

  Queue_Init();
 8000d60:	f7ff fea4 	bl	8000aac <Queue_Init>

  /* Start receiving data from MSP430 */
  uint8_t data[8] = {1, 1, 1, 1, 1, 1, 1, 1};
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <main+0xe4>)
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d6e:	e883 0003 	stmia.w	r3, {r0, r1}
  	frame_to_send tx_frame;
  	tx_frame.tx_data[0] = data[0];
 8000d72:	7c3b      	ldrb	r3, [r7, #16]
 8000d74:	723b      	strb	r3, [r7, #8]
  	tx_frame.tx_data[1] = data[1];
 8000d76:	7c7b      	ldrb	r3, [r7, #17]
 8000d78:	727b      	strb	r3, [r7, #9]
  	tx_frame.tx_data[2] = data[2];
 8000d7a:	7cbb      	ldrb	r3, [r7, #18]
 8000d7c:	72bb      	strb	r3, [r7, #10]
  	tx_frame.tx_data[3] = data[3];
 8000d7e:	7cfb      	ldrb	r3, [r7, #19]
 8000d80:	72fb      	strb	r3, [r7, #11]
  	tx_frame.tx_data[4] = data[4];
 8000d82:	7d3b      	ldrb	r3, [r7, #20]
 8000d84:	733b      	strb	r3, [r7, #12]
  	tx_frame.tx_data[5] = data[5];
 8000d86:	7d7b      	ldrb	r3, [r7, #21]
 8000d88:	737b      	strb	r3, [r7, #13]
  	tx_frame.tx_data[6] = data[6];
 8000d8a:	7dbb      	ldrb	r3, [r7, #22]
 8000d8c:	73bb      	strb	r3, [r7, #14]
  	tx_frame.tx_data[7] = data[7];
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	73fb      	strb	r3, [r7, #15]
  	tx_frame.tx_header = 0x127;
 8000d92:	f240 1327 	movw	r3, #295	; 0x127
 8000d96:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Queue_AddTxCanMessage(&tx_frame);
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff ff0c 	bl	8000bb8 <Queue_AddTxCanMessage>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <main+0xe8>)
 8000da6:	f001 fe0d 	bl	80029c4 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8000daa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dae:	f000 fc13 	bl	80015d8 <HAL_Delay>
	Queue_AddTxCanMessage(&tx_frame);
 8000db2:	e7f1      	b.n	8000d98 <main+0xb8>
 8000db4:	20000190 	.word	0x20000190
 8000db8:	20000244 	.word	0x20000244
 8000dbc:	20000284 	.word	0x20000284
 8000dc0:	200002cc 	.word	0x200002cc
 8000dc4:	08005550 	.word	0x08005550
 8000dc8:	40011000 	.word	0x40011000

08000dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	; 0x40
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 faf2 	bl	80043c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000e0a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fdef 	bl	80029f8 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e20:	f000 f819 	bl	8000e56 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 f85a 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e4a:	f000 f804 	bl	8000e56 <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3740      	adds	r7, #64	; 0x40
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5a:	b672      	cpsid	i
}
 8000e5c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <Error_Handler+0x8>

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6193      	str	r3, [r2, #24]
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x5c>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_MspInit+0x60>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_MspInit+0x60>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <NMI_Handler+0x4>

08000eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0a:	f000 fb49 	bl	80015a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000f1a:	f000 ffcd 	bl	8001eb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000190 	.word	0x20000190

08000f28 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f2e:	480f      	ldr	r0, [pc, #60]	; (8000f6c <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8000f30:	f000 ffc2 	bl	8001eb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* Receive CAN frame procedure */
  CanClearRxDataFrame(&can_rx_frame_template);
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8000f36:	f7ff fd41 	bl	80009bc <CanClearRxDataFrame>
  CanSaveReceivedData(hcan, &can_rx_frame_template);
 8000f3a:	4e0c      	ldr	r6, [pc, #48]	; (8000f6c <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8000f3e:	9306      	str	r3, [sp, #24]
 8000f40:	466d      	mov	r5, sp
 8000f42:	f106 0410 	add.w	r4, r6, #16
 8000f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f52:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f56:	f7ff fc55 	bl	8000804 <CanSaveReceivedData>
  GetRawData(&current_data, &can_rx_frame_template);
 8000f5a:	4905      	ldr	r1, [pc, #20]	; (8000f70 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <USB_LP_CAN1_RX0_IRQHandler+0x4c>)
 8000f5e:	f7ff fd62 	bl	8000a26 <GetRawData>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3704      	adds	r7, #4
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000190 	.word	0x20000190
 8000f70:	200001f8 	.word	0x200001f8
 8000f74:	20000264 	.word	0x20000264

08000f78 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <CAN1_RX1_IRQHandler+0x10>)
 8000f7e:	f000 ff9b 	bl	8001eb8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */


  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000190 	.word	0x20000190

08000f8c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM1_UP_IRQHandler+0x10>)
 8000f92:	f002 f9ed 	bl	8003370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000284 	.word	0x20000284

08000fa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM2_IRQHandler+0x10>)
 8000fa6:	f002 f9e3 	bl	8003370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200002cc 	.word	0x200002cc

08000fb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <USART1_IRQHandler+0x10>)
 8000fba:	f002 fdf3 	bl	8003ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000314 	.word	0x20000314

08000fc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
	return 1;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <_kill>:

int _kill(int pid, int sig)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fe0:	f003 f9be 	bl	8004360 <__errno>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2216      	movs	r2, #22
 8000fe8:	601a      	str	r2, [r3, #0]
	return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_exit>:

void _exit (int status)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffe7 	bl	8000fd6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001008:	e7fe      	b.n	8001008 <_exit+0x12>

0800100a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00a      	b.n	8001032 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800101c:	f3af 8000 	nop.w
 8001020:	4601      	mov	r1, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	60ba      	str	r2, [r7, #8]
 8001028:	b2ca      	uxtb	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	dbf0      	blt.n	800101c <_read+0x12>
	}

return len;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e009      	b.n	800106a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	60ba      	str	r2, [r7, #8]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbf1      	blt.n	8001056 <_write+0x12>
	}
	return len;
 8001072:	687b      	ldr	r3, [r7, #4]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_close>:

int _close(int file)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	return -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
	return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <_isatty>:

int _isatty(int file)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	return 1;
 80010b8:	2301      	movs	r3, #1
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
	return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <_sbrk+0x5c>)
 80010e6:	4b15      	ldr	r3, [pc, #84]	; (800113c <_sbrk+0x60>)
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <_sbrk+0x64>)
 80010fa:	4a12      	ldr	r2, [pc, #72]	; (8001144 <_sbrk+0x68>)
 80010fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4413      	add	r3, r2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	429a      	cmp	r2, r3
 800110a:	d207      	bcs.n	800111c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800110c:	f003 f928 	bl	8004360 <__errno>
 8001110:	4603      	mov	r3, r0
 8001112:	220c      	movs	r2, #12
 8001114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295
 800111a:	e009      	b.n	8001130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <_sbrk+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a05      	ldr	r2, [pc, #20]	; (8001140 <_sbrk+0x64>)
 800112c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20005000 	.word	0x20005000
 800113c:	00000400 	.word	0x00000400
 8001140:	2000008c 	.word	0x2000008c
 8001144:	20000370 	.word	0x20000370

08001148 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	463b      	mov	r3, r7
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_TIM1_Init+0x9c>)
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <MX_TIM1_Init+0xa0>)
 8001174:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_TIM1_Init+0x9c>)
 8001178:	f240 32e7 	movw	r2, #999	; 0x3e7
 800117c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_TIM1_Init+0x9c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_TIM1_Init+0x9c>)
 8001186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118c:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM1_Init+0x9c>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_TIM1_Init+0x9c>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_TIM1_Init+0x9c>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800119e:	4814      	ldr	r0, [pc, #80]	; (80011f0 <MX_TIM1_Init+0x9c>)
 80011a0:	f002 f844 	bl	800322c <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80011aa:	f7ff fe54 	bl	8000e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_TIM1_Init+0x9c>)
 80011bc:	f002 f9e0 	bl	8003580 <HAL_TIM_ConfigClockSource>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80011c6:	f7ff fe46 	bl	8000e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4806      	ldr	r0, [pc, #24]	; (80011f0 <MX_TIM1_Init+0x9c>)
 80011d8:	f002 fbb2 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80011e2:	f7ff fe38 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000284 	.word	0x20000284
 80011f4:	40012c00 	.word	0x40012c00

080011f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_TIM2_Init+0x98>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_TIM2_Init+0x98>)
 800121e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM2_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM2_Init+0x98>)
 800122c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_TIM2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM2_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_TIM2_Init+0x98>)
 8001240:	f001 fff4 	bl	800322c <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800124a:	f7ff fe04 	bl	8000e56 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_TIM2_Init+0x98>)
 800125c:	f002 f990 	bl	8003580 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001266:	f7ff fdf6 	bl	8000e56 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_TIM2_Init+0x98>)
 8001278:	f002 fb62 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001282:	f7ff fde8 	bl	8000e56 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200002cc 	.word	0x200002cc

08001294 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a1a      	ldr	r2, [pc, #104]	; (800130c <HAL_TIM_Base_MspInit+0x78>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d114      	bne.n	80012d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_TIM_Base_MspInit+0x7c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_TIM_Base_MspInit+0x7c>)
 80012ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_TIM_Base_MspInit+0x7c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2019      	movs	r0, #25
 80012c4:	f001 f8fb 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80012c8:	2019      	movs	r0, #25
 80012ca:	f001 f914 	bl	80024f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012ce:	e018      	b.n	8001302 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d8:	d113      	bne.n	8001302 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_TIM_Base_MspInit+0x7c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <HAL_TIM_Base_MspInit+0x7c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	61d3      	str	r3, [r2, #28]
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_TIM_Base_MspInit+0x7c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	201c      	movs	r0, #28
 80012f8:	f001 f8e1 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80012fc:	201c      	movs	r0, #28
 80012fe:	f001 f8fa 	bl	80024f6 <HAL_NVIC_EnableIRQ>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40012c00 	.word	0x40012c00
 8001310:	40021000 	.word	0x40021000

08001314 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001324:	d104      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)"rqst\r", 5);
 8001326:	2205      	movs	r2, #5
 8001328:	4909      	ldr	r1, [pc, #36]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800132a:	480a      	ldr	r0, [pc, #40]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800132c:	f002 fbc5 	bl	8003aba <HAL_UART_Transmit_IT>
	}
	if(htim->Instance == TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d106      	bne.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		Queue_TxCanMessage();
 800133a:	f7ff fbcd 	bl	8000ad8 <Queue_TxCanMessage>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800133e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001344:	f001 fb3e 	bl	80029c4 <HAL_GPIO_TogglePin>
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	08005558 	.word	0x08005558
 8001354:	20000314 	.word	0x20000314
 8001358:	40012c00 	.word	0x40012c00
 800135c:	40011000 	.word	0x40011000

08001360 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <MX_USART1_UART_Init+0x50>)
 8001368:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_USART1_UART_Init+0x4c>)
 8001398:	f002 fb42 	bl	8003a20 <HAL_UART_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a2:	f7ff fd58 	bl	8000e56 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
  // Immediately start receiving
  //HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
  /* USER CODE END USART1_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000314 	.word	0x20000314
 80013b0:	40013800 	.word	0x40013800

080013b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a20      	ldr	r2, [pc, #128]	; (8001450 <HAL_UART_MspInit+0x9c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d139      	bne.n	8001448 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_UART_MspInit+0xa0>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_UART_MspInit+0xa0>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_UART_MspInit+0xa0>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_UART_MspInit+0xa0>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_UART_MspInit+0xa0>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_UART_MspInit+0xa0>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001408:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	480f      	ldr	r0, [pc, #60]	; (8001458 <HAL_UART_MspInit+0xa4>)
 800141a:	f001 f937 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800141e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0310 	add.w	r3, r7, #16
 8001430:	4619      	mov	r1, r3
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <HAL_UART_MspInit+0xa4>)
 8001434:	f001 f92a 	bl	800268c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001438:	2200      	movs	r2, #0
 800143a:	2106      	movs	r1, #6
 800143c:	2025      	movs	r0, #37	; 0x25
 800143e:	f001 f83e 	bl	80024be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001442:	2025      	movs	r0, #37	; 0x25
 8001444:	f001 f857 	bl	80024f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001448:	bf00      	nop
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40013800 	.word	0x40013800
 8001454:	40021000 	.word	0x40021000
 8001458:	40010800 	.word	0x40010800

0800145c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_UART_RxCpltCallback+0x54>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d11c      	bne.n	80014a8 <HAL_UART_RxCpltCallback+0x4c>
	{
		/* Manage battery pack */
		BqPack_StructUpdate_MSP430(&battery_pack, rx_buffer);
 800146e:	4911      	ldr	r1, [pc, #68]	; (80014b4 <HAL_UART_RxCpltCallback+0x58>)
 8001470:	4811      	ldr	r0, [pc, #68]	; (80014b8 <HAL_UART_RxCpltCallback+0x5c>)
 8001472:	f7fe feb5 	bl	80001e0 <BqPack_StructUpdate_MSP430>
		BqPack_StructUpdate_CurrSensor(&battery_pack, &current_data);
 8001476:	4911      	ldr	r1, [pc, #68]	; (80014bc <HAL_UART_RxCpltCallback+0x60>)
 8001478:	480f      	ldr	r0, [pc, #60]	; (80014b8 <HAL_UART_RxCpltCallback+0x5c>)
 800147a:	f7fe fe82 	bl	8000182 <BqPack_StructUpdate_CurrSensor>
		BqPack_RecalculateData(&battery_pack);
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <HAL_UART_RxCpltCallback+0x5c>)
 8001480:	f7fe fe8d 	bl	800019e <BqPack_RecalculateData>

		BqPack_CheckForErrors(&battery_pack);
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HAL_UART_RxCpltCallback+0x5c>)
 8001486:	f7fe ff35 	bl	80002f4 <BqPack_CheckForErrors>
		BqPack_CheckForWarnings(&battery_pack);
 800148a:	480b      	ldr	r0, [pc, #44]	; (80014b8 <HAL_UART_RxCpltCallback+0x5c>)
 800148c:	f7ff f848 	bl	8000520 <BqPack_CheckForWarnings>
		uint8_t data[8] = {1, 1, 1, 1, 1, 1, 1, 1};
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_UART_RxCpltCallback+0x64>)
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	e892 0003 	ldmia.w	r2, {r0, r1}
 800149a:	e883 0003 	stmia.w	r3, {r0, r1}
//		frame_to_send tx_frame = { 0x127, data};
//		Queue_AddTxCanMessage(&Fifo_Queue, &tx_frame);

		/* Restart Uart */
		HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	4904      	ldr	r1, [pc, #16]	; (80014b4 <HAL_UART_RxCpltCallback+0x58>)
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <HAL_UART_RxCpltCallback+0x68>)
 80014a4:	f002 fb4d 	bl	8003b42 <HAL_UART_Receive_IT>
	}
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40013800 	.word	0x40013800
 80014b4:	20000090 	.word	0x20000090
 80014b8:	20000244 	.word	0x20000244
 80014bc:	20000264 	.word	0x20000264
 80014c0:	08005560 	.word	0x08005560
 80014c4:	20000314 	.word	0x20000314

080014c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ee:	f7ff fe2b 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014f2:	f002 ff3b 	bl	800436c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014f6:	f7ff fbf3 	bl	8000ce0 <main>
  bx lr
 80014fa:	4770      	bx	lr
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001504:	080057e4 	.word	0x080057e4
  ldr r2, =_sbss
 8001508:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800150c:	2000036c 	.word	0x2000036c

08001510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC1_2_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <HAL_Init+0x28>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	; (800153c <HAL_Init+0x28>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 ffbf 	bl	80024a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f808 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fc96 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40022000 	.word	0x40022000

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_InitTick+0x54>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_InitTick+0x58>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 ffd7 	bl	8002512 <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00e      	b.n	800158c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d80a      	bhi.n	800158a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f000 ff9f 	bl	80024be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <HAL_InitTick+0x5c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000000 	.word	0x20000000
 8001598:	20000008 	.word	0x20000008
 800159c:	20000004 	.word	0x20000004

080015a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_IncTick+0x1c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_IncTick+0x20>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <HAL_IncTick+0x20>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000358 	.word	0x20000358

080015c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return uwTick;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <HAL_GetTick+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	20000358 	.word	0x20000358

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff fff0 	bl	80015c4 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffe0 	bl	80015c4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000008 	.word	0x20000008

08001620 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0ed      	b.n	800180e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff f85c 	bl	80006fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff ffb6 	bl	80015c4 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165a:	e012      	b.n	8001682 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800165c:	f7ff ffb2 	bl	80015c4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b0a      	cmp	r3, #10
 8001668:	d90b      	bls.n	8001682 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2205      	movs	r2, #5
 800167a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0c5      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0e5      	beq.n	800165c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0202 	bic.w	r2, r2, #2
 800169e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff ff90 	bl	80015c4 <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016a6:	e012      	b.n	80016ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a8:	f7ff ff8c 	bl	80015c4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b0a      	cmp	r3, #10
 80016b4:	d90b      	bls.n	80016ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e09f      	b.n	800180e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1e5      	bne.n	80016a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	7e1b      	ldrb	r3, [r3, #24]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d108      	bne.n	80016f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e007      	b.n	8001706 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7e5b      	ldrb	r3, [r3, #25]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d108      	bne.n	8001720 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e007      	b.n	8001730 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800172e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7e9b      	ldrb	r3, [r3, #26]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d108      	bne.n	800174a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e007      	b.n	800175a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0220 	bic.w	r2, r2, #32
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	7edb      	ldrb	r3, [r3, #27]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0210 	bic.w	r2, r2, #16
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e007      	b.n	8001784 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0210 	orr.w	r2, r2, #16
 8001782:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7f1b      	ldrb	r3, [r3, #28]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d108      	bne.n	800179e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0208 	orr.w	r2, r2, #8
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	e007      	b.n	80017ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0208 	bic.w	r2, r2, #8
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7f5b      	ldrb	r3, [r3, #29]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e007      	b.n	80017d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	ea42 0103 	orr.w	r1, r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	1e5a      	subs	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001816:	b480      	push	{r7}
 8001818:	b087      	sub	sp, #28
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800182e:	7cfb      	ldrb	r3, [r7, #19]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d003      	beq.n	800183c <HAL_CAN_ConfigFilter+0x26>
 8001834:	7cfb      	ldrb	r3, [r7, #19]
 8001836:	2b02      	cmp	r3, #2
 8001838:	f040 80aa 	bne.w	8001990 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2201      	movs	r2, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d123      	bne.n	80018be <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43db      	mvns	r3, r3
 8001880:	401a      	ands	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001898:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3248      	adds	r2, #72	; 0x48
 800189e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b4:	6979      	ldr	r1, [r7, #20]
 80018b6:	3348      	adds	r3, #72	; 0x48
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d122      	bne.n	800190c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	3248      	adds	r2, #72	; 0x48
 80018ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001900:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001902:	6979      	ldr	r1, [r7, #20]
 8001904:	3348      	adds	r3, #72	; 0x48
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001926:	e007      	b.n	8001938 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	431a      	orrs	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001952:	e007      	b.n	8001964 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	431a      	orrs	r2, r3
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001982:	f023 0201 	bic.w	r2, r3, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e006      	b.n	800199e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d12e      	bne.n	8001a1a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2202      	movs	r2, #2
 80019c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff fdf6 	bl	80015c4 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019da:	e012      	b.n	8001a02 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019dc:	f7ff fdf2 	bl	80015c4 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b0a      	cmp	r3, #10
 80019e8:	d90b      	bls.n	8001a02 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2205      	movs	r2, #5
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e012      	b.n	8001a28 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e5      	bne.n	80019dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e006      	b.n	8001a28 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a44:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a4e:	7ffb      	ldrb	r3, [r7, #31]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d003      	beq.n	8001a5c <HAL_CAN_AddTxMessage+0x2c>
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	f040 80b8 	bne.w	8001bcc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d10a      	bne.n	8001a7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80a0 	beq.w	8001bbc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	0e1b      	lsrs	r3, r3, #24
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d907      	bls.n	8001a9c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e09e      	b.n	8001bda <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d10d      	bne.n	8001aca <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	6809      	ldr	r1, [r1, #0]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	440b      	add	r3, r1
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e00f      	b.n	8001aea <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ade:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3318      	adds	r3, #24
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	440b      	add	r3, r1
 8001ae8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3318      	adds	r3, #24
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	440b      	add	r3, r1
 8001afa:	3304      	adds	r3, #4
 8001afc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	7d1b      	ldrb	r3, [r3, #20]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d111      	bne.n	8001b2a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3318      	adds	r3, #24
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	4413      	add	r3, r2
 8001b12:	3304      	adds	r3, #4
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6811      	ldr	r1, [r2, #0]
 8001b1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3318      	adds	r3, #24
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	440b      	add	r3, r1
 8001b26:	3304      	adds	r3, #4
 8001b28:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3307      	adds	r3, #7
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3306      	adds	r3, #6
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3305      	adds	r3, #5
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	3204      	adds	r2, #4
 8001b4a:	7812      	ldrb	r2, [r2, #0]
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6811      	ldr	r1, [r2, #0]
 8001b52:	ea43 0200 	orr.w	r2, r3, r0
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	011b      	lsls	r3, r3, #4
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b60:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3303      	adds	r3, #3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	061a      	lsls	r2, r3, #24
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3301      	adds	r3, #1
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	4610      	mov	r0, r2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	6811      	ldr	r1, [r2, #0]
 8001b88:	ea43 0200 	orr.w	r2, r3, r0
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3318      	adds	r3, #24
 8001ba0:	011b      	lsls	r3, r3, #4
 8001ba2:	4413      	add	r3, r2
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	6811      	ldr	r1, [r2, #0]
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	3318      	adds	r3, #24
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	440b      	add	r3, r1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e00e      	b.n	8001bda <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e006      	b.n	8001bda <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
  }
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d002      	beq.n	8001c04 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001bfe:	7afb      	ldrb	r3, [r7, #11]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d11d      	bne.n	8001c40 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c62:	7dfb      	ldrb	r3, [r7, #23]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d003      	beq.n	8001c70 <HAL_CAN_GetRxMessage+0x24>
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	f040 80f3 	bne.w	8001e56 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10e      	bne.n	8001c94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d116      	bne.n	8001cb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0e7      	b.n	8001e64 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0d8      	b.n	8001e64 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	331b      	adds	r3, #27
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0204 	and.w	r2, r3, #4
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10c      	bne.n	8001cea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	331b      	adds	r3, #27
 8001cd8:	011b      	lsls	r3, r3, #4
 8001cda:	4413      	add	r3, r2
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0d5b      	lsrs	r3, r3, #21
 8001ce0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	e00b      	b.n	8001d02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	331b      	adds	r3, #27
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	08db      	lsrs	r3, r3, #3
 8001cfa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	331b      	adds	r3, #27
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	4413      	add	r3, r2
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0202 	and.w	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	331b      	adds	r3, #27
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	331b      	adds	r3, #27
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	331b      	adds	r3, #27
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	4413      	add	r3, r2
 8001d54:	3304      	adds	r3, #4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0a1a      	lsrs	r2, r3, #8
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0c1a      	lsrs	r2, r3, #16
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3302      	adds	r3, #2
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0e1a      	lsrs	r2, r3, #24
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	3303      	adds	r3, #3
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	4413      	add	r3, r2
 8001de6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0a1a      	lsrs	r2, r3, #8
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	3305      	adds	r3, #5
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	4413      	add	r3, r2
 8001e00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0c1a      	lsrs	r2, r3, #16
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3306      	adds	r3, #6
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	4413      	add	r3, r2
 8001e1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0e1a      	lsrs	r2, r3, #24
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	3307      	adds	r3, #7
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68da      	ldr	r2, [r3, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	60da      	str	r2, [r3, #12]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0220 	orr.w	r2, r2, #32
 8001e50:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e006      	b.n	8001e64 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bc80      	pop	{r7}
 8001e6c:	4770      	bx	lr

08001e6e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b085      	sub	sp, #20
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d002      	beq.n	8001e8c <HAL_CAN_ActivateNotification+0x1e>
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d109      	bne.n	8001ea0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6959      	ldr	r1, [r3, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e006      	b.n	8001eae <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
  }
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07c      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d023      	beq.n	8001f50 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f983 	bl	8002226 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f20:	e016      	b.n	8001f50 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
 8001f34:	e00c      	b.n	8001f50 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d004      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
 8001f48:	e002      	b.n	8001f50 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f986 	bl	800225c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d024      	beq.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f62:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f962 	bl	8002238 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f74:	e016      	b.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
 8001f88:	e00c      	b.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9c:	e002      	b.n	8001fa4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f965 	bl	800226e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d024      	beq.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f941 	bl	800224a <HAL_CAN_TxMailbox2CompleteCallback>
 8001fc8:	e016      	b.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	e00c      	b.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff0:	e002      	b.n	8001ff8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f944 	bl	8002280 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002012:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2210      	movs	r2, #16
 800201a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2208      	movs	r2, #8
 8002036:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f933 	bl	80022a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f91b 	bl	8002292 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800205c:	6a3b      	ldr	r3, [r7, #32]
 800205e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002076:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d006      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f913 	bl	80022c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d009      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f8fb 	bl	80022b6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00b      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d006      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2210      	movs	r2, #16
 80020da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8fc 	bl	80022da <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00b      	beq.n	8002104 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2208      	movs	r2, #8
 80020fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8f4 	bl	80022ec <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d07b      	beq.n	8002206 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d072      	beq.n	80021fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213a:	2b00      	cmp	r3, #0
 800213c:	d008      	beq.n	8002150 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d008      	beq.n	800216c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	f043 0304 	orr.w	r3, r3, #4
 800216a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800216c:	6a3b      	ldr	r3, [r7, #32]
 800216e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002172:	2b00      	cmp	r3, #0
 8002174:	d043      	beq.n	80021fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d03e      	beq.n	80021fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002186:	2b60      	cmp	r3, #96	; 0x60
 8002188:	d02b      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x32a>
 800218a:	2b60      	cmp	r3, #96	; 0x60
 800218c:	d82e      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 800218e:	2b50      	cmp	r3, #80	; 0x50
 8002190:	d022      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x320>
 8002192:	2b50      	cmp	r3, #80	; 0x50
 8002194:	d82a      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d019      	beq.n	80021ce <HAL_CAN_IRQHandler+0x316>
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d826      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 800219e:	2b30      	cmp	r3, #48	; 0x30
 80021a0:	d010      	beq.n	80021c4 <HAL_CAN_IRQHandler+0x30c>
 80021a2:	2b30      	cmp	r3, #48	; 0x30
 80021a4:	d822      	bhi.n	80021ec <HAL_CAN_IRQHandler+0x334>
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d002      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x2f8>
 80021aa:	2b20      	cmp	r3, #32
 80021ac:	d005      	beq.n	80021ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021ae:	e01d      	b.n	80021ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	f043 0308 	orr.w	r3, r3, #8
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021b8:	e019      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	f043 0310 	orr.w	r3, r3, #16
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021c2:	e014      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	f043 0320 	orr.w	r3, r3, #32
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021cc:	e00f      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021d6:	e00a      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021e0:	e005      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021ea:	e000      	b.n	80021ee <HAL_CAN_IRQHandler+0x336>
            break;
 80021ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80021fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2204      	movs	r2, #4
 8002204:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f870 	bl	80022fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	; 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr

0800226e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr

080022b6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr

080022da <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	; (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4906      	ldr	r1, [pc, #24]	; (80023a8 <__NVIC_EnableIRQ+0x34>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100

080023ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	6039      	str	r1, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	db0a      	blt.n	80023d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	490c      	ldr	r1, [pc, #48]	; (80023f8 <__NVIC_SetPriority+0x4c>)
 80023c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ca:	0112      	lsls	r2, r2, #4
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	440b      	add	r3, r1
 80023d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d4:	e00a      	b.n	80023ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4908      	ldr	r1, [pc, #32]	; (80023fc <__NVIC_SetPriority+0x50>)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3b04      	subs	r3, #4
 80023e4:	0112      	lsls	r2, r2, #4
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	440b      	add	r3, r1
 80023ea:	761a      	strb	r2, [r3, #24]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f1c3 0307 	rsb	r3, r3, #7
 800241a:	2b04      	cmp	r3, #4
 800241c:	bf28      	it	cs
 800241e:	2304      	movcs	r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3304      	adds	r3, #4
 8002426:	2b06      	cmp	r3, #6
 8002428:	d902      	bls.n	8002430 <NVIC_EncodePriority+0x30>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3b03      	subs	r3, #3
 800242e:	e000      	b.n	8002432 <NVIC_EncodePriority+0x32>
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002434:	f04f 32ff 	mov.w	r2, #4294967295
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	401a      	ands	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002448:	f04f 31ff 	mov.w	r1, #4294967295
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa01 f303 	lsl.w	r3, r1, r3
 8002452:	43d9      	mvns	r1, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	4313      	orrs	r3, r2
         );
}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002474:	d301      	bcc.n	800247a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002476:	2301      	movs	r3, #1
 8002478:	e00f      	b.n	800249a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800247a:	4a0a      	ldr	r2, [pc, #40]	; (80024a4 <SysTick_Config+0x40>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002482:	210f      	movs	r1, #15
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f7ff ff90 	bl	80023ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <SysTick_Config+0x40>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Config+0x40>)
 8002494:	2207      	movs	r2, #7
 8002496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	e000e010 	.word	0xe000e010

080024a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ff2d 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d0:	f7ff ff42 	bl	8002358 <__NVIC_GetPriorityGrouping>
 80024d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	6978      	ldr	r0, [r7, #20]
 80024dc:	f7ff ff90 	bl	8002400 <NVIC_EncodePriority>
 80024e0:	4602      	mov	r2, r0
 80024e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff5f 	bl	80023ac <__NVIC_SetPriority>
}
 80024ee:	bf00      	nop
 80024f0:	3718      	adds	r7, #24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff35 	bl	8002374 <__NVIC_EnableIRQ>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffa2 	bl	8002464 <SysTick_Config>
 8002520:	4603      	mov	r3, r0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800253c:	2b02      	cmp	r3, #2
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2204      	movs	r2, #4
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e020      	b.n	8002594 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 020e 	bic.w	r2, r2, #14
 8002560:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002592:	7bfb      	ldrb	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
	...

080025a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d005      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	e051      	b.n	8002666 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 020e 	bic.w	r2, r2, #14
 80025d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a22      	ldr	r2, [pc, #136]	; (8002670 <HAL_DMA_Abort_IT+0xd0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d029      	beq.n	8002640 <HAL_DMA_Abort_IT+0xa0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <HAL_DMA_Abort_IT+0xd4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d022      	beq.n	800263c <HAL_DMA_Abort_IT+0x9c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <HAL_DMA_Abort_IT+0xd8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d01a      	beq.n	8002636 <HAL_DMA_Abort_IT+0x96>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_DMA_Abort_IT+0xdc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d012      	beq.n	8002630 <HAL_DMA_Abort_IT+0x90>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <HAL_DMA_Abort_IT+0xe0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d00a      	beq.n	800262a <HAL_DMA_Abort_IT+0x8a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1a      	ldr	r2, [pc, #104]	; (8002684 <HAL_DMA_Abort_IT+0xe4>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d102      	bne.n	8002624 <HAL_DMA_Abort_IT+0x84>
 800261e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002622:	e00e      	b.n	8002642 <HAL_DMA_Abort_IT+0xa2>
 8002624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002628:	e00b      	b.n	8002642 <HAL_DMA_Abort_IT+0xa2>
 800262a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800262e:	e008      	b.n	8002642 <HAL_DMA_Abort_IT+0xa2>
 8002630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002634:	e005      	b.n	8002642 <HAL_DMA_Abort_IT+0xa2>
 8002636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263a:	e002      	b.n	8002642 <HAL_DMA_Abort_IT+0xa2>
 800263c:	2310      	movs	r3, #16
 800263e:	e000      	b.n	8002642 <HAL_DMA_Abort_IT+0xa2>
 8002640:	2301      	movs	r3, #1
 8002642:	4a11      	ldr	r2, [pc, #68]	; (8002688 <HAL_DMA_Abort_IT+0xe8>)
 8002644:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
    } 
  }
  return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40020008 	.word	0x40020008
 8002674:	4002001c 	.word	0x4002001c
 8002678:	40020030 	.word	0x40020030
 800267c:	40020044 	.word	0x40020044
 8002680:	40020058 	.word	0x40020058
 8002684:	4002006c 	.word	0x4002006c
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b08b      	sub	sp, #44	; 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002696:	2300      	movs	r3, #0
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269e:	e169      	b.n	8002974 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a0:	2201      	movs	r2, #1
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f040 8158 	bne.w	800296e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a9a      	ldr	r2, [pc, #616]	; (800292c <HAL_GPIO_Init+0x2a0>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d05e      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026c8:	4a98      	ldr	r2, [pc, #608]	; (800292c <HAL_GPIO_Init+0x2a0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d875      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026ce:	4a98      	ldr	r2, [pc, #608]	; (8002930 <HAL_GPIO_Init+0x2a4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d058      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026d4:	4a96      	ldr	r2, [pc, #600]	; (8002930 <HAL_GPIO_Init+0x2a4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d86f      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026da:	4a96      	ldr	r2, [pc, #600]	; (8002934 <HAL_GPIO_Init+0x2a8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d052      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026e0:	4a94      	ldr	r2, [pc, #592]	; (8002934 <HAL_GPIO_Init+0x2a8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d869      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026e6:	4a94      	ldr	r2, [pc, #592]	; (8002938 <HAL_GPIO_Init+0x2ac>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d04c      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026ec:	4a92      	ldr	r2, [pc, #584]	; (8002938 <HAL_GPIO_Init+0x2ac>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d863      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026f2:	4a92      	ldr	r2, [pc, #584]	; (800293c <HAL_GPIO_Init+0x2b0>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d046      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
 80026f8:	4a90      	ldr	r2, [pc, #576]	; (800293c <HAL_GPIO_Init+0x2b0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d85d      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d82a      	bhi.n	8002758 <HAL_GPIO_Init+0xcc>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d859      	bhi.n	80027ba <HAL_GPIO_Init+0x12e>
 8002706:	a201      	add	r2, pc, #4	; (adr r2, 800270c <HAL_GPIO_Init+0x80>)
 8002708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270c:	08002787 	.word	0x08002787
 8002710:	08002761 	.word	0x08002761
 8002714:	08002773 	.word	0x08002773
 8002718:	080027b5 	.word	0x080027b5
 800271c:	080027bb 	.word	0x080027bb
 8002720:	080027bb 	.word	0x080027bb
 8002724:	080027bb 	.word	0x080027bb
 8002728:	080027bb 	.word	0x080027bb
 800272c:	080027bb 	.word	0x080027bb
 8002730:	080027bb 	.word	0x080027bb
 8002734:	080027bb 	.word	0x080027bb
 8002738:	080027bb 	.word	0x080027bb
 800273c:	080027bb 	.word	0x080027bb
 8002740:	080027bb 	.word	0x080027bb
 8002744:	080027bb 	.word	0x080027bb
 8002748:	080027bb 	.word	0x080027bb
 800274c:	080027bb 	.word	0x080027bb
 8002750:	08002769 	.word	0x08002769
 8002754:	0800277d 	.word	0x0800277d
 8002758:	4a79      	ldr	r2, [pc, #484]	; (8002940 <HAL_GPIO_Init+0x2b4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d013      	beq.n	8002786 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800275e:	e02c      	b.n	80027ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	623b      	str	r3, [r7, #32]
          break;
 8002766:	e029      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	3304      	adds	r3, #4
 800276e:	623b      	str	r3, [r7, #32]
          break;
 8002770:	e024      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	3308      	adds	r3, #8
 8002778:	623b      	str	r3, [r7, #32]
          break;
 800277a:	e01f      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	330c      	adds	r3, #12
 8002782:	623b      	str	r3, [r7, #32]
          break;
 8002784:	e01a      	b.n	80027bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800278e:	2304      	movs	r3, #4
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e013      	b.n	80027bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d105      	bne.n	80027a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800279c:	2308      	movs	r3, #8
 800279e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69fa      	ldr	r2, [r7, #28]
 80027a4:	611a      	str	r2, [r3, #16]
          break;
 80027a6:	e009      	b.n	80027bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a8:	2308      	movs	r3, #8
 80027aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	615a      	str	r2, [r3, #20]
          break;
 80027b2:	e003      	b.n	80027bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
          break;
 80027b8:	e000      	b.n	80027bc <HAL_GPIO_Init+0x130>
          break;
 80027ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	2bff      	cmp	r3, #255	; 0xff
 80027c0:	d801      	bhi.n	80027c6 <HAL_GPIO_Init+0x13a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	e001      	b.n	80027ca <HAL_GPIO_Init+0x13e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2bff      	cmp	r3, #255	; 0xff
 80027d0:	d802      	bhi.n	80027d8 <HAL_GPIO_Init+0x14c>
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	e002      	b.n	80027de <HAL_GPIO_Init+0x152>
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	3b08      	subs	r3, #8
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	210f      	movs	r1, #15
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	401a      	ands	r2, r3
 80027f0:	6a39      	ldr	r1, [r7, #32]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	fa01 f303 	lsl.w	r3, r1, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80b1 	beq.w	800296e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800280c:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_GPIO_Init+0x2b8>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002824:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_GPIO_Init+0x2bc>)
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	089b      	lsrs	r3, r3, #2
 800282a:	3302      	adds	r3, #2
 800282c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002830:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a40      	ldr	r2, [pc, #256]	; (800294c <HAL_GPIO_Init+0x2c0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_GPIO_Init+0x1ec>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <HAL_GPIO_Init+0x2c4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00d      	beq.n	8002874 <HAL_GPIO_Init+0x1e8>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a3e      	ldr	r2, [pc, #248]	; (8002954 <HAL_GPIO_Init+0x2c8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d007      	beq.n	8002870 <HAL_GPIO_Init+0x1e4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a3d      	ldr	r2, [pc, #244]	; (8002958 <HAL_GPIO_Init+0x2cc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d101      	bne.n	800286c <HAL_GPIO_Init+0x1e0>
 8002868:	2303      	movs	r3, #3
 800286a:	e006      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 800286c:	2304      	movs	r3, #4
 800286e:	e004      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002870:	2302      	movs	r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <HAL_GPIO_Init+0x1ee>
 8002878:	2300      	movs	r3, #0
 800287a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287c:	f002 0203 	and.w	r2, r2, #3
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	4093      	lsls	r3, r2
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288a:	492f      	ldr	r1, [pc, #188]	; (8002948 <HAL_GPIO_Init+0x2bc>)
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	089b      	lsrs	r3, r3, #2
 8002890:	3302      	adds	r3, #2
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	492c      	ldr	r1, [pc, #176]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4928      	ldr	r1, [pc, #160]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028cc:	4b23      	ldr	r3, [pc, #140]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4922      	ldr	r1, [pc, #136]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028da:	4b20      	ldr	r3, [pc, #128]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	491e      	ldr	r1, [pc, #120]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	4918      	ldr	r1, [pc, #96]	; (800295c <HAL_GPIO_Init+0x2d0>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	608b      	str	r3, [r1, #8]
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <HAL_GPIO_Init+0x2d0>)
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	43db      	mvns	r3, r3
 800290a:	4914      	ldr	r1, [pc, #80]	; (800295c <HAL_GPIO_Init+0x2d0>)
 800290c:	4013      	ands	r3, r2
 800290e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d021      	beq.n	8002960 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_GPIO_Init+0x2d0>)
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	490e      	ldr	r1, [pc, #56]	; (800295c <HAL_GPIO_Init+0x2d0>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	60cb      	str	r3, [r1, #12]
 8002928:	e021      	b.n	800296e <HAL_GPIO_Init+0x2e2>
 800292a:	bf00      	nop
 800292c:	10320000 	.word	0x10320000
 8002930:	10310000 	.word	0x10310000
 8002934:	10220000 	.word	0x10220000
 8002938:	10210000 	.word	0x10210000
 800293c:	10120000 	.word	0x10120000
 8002940:	10110000 	.word	0x10110000
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	40010800 	.word	0x40010800
 8002950:	40010c00 	.word	0x40010c00
 8002954:	40011000 	.word	0x40011000
 8002958:	40011400 	.word	0x40011400
 800295c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_GPIO_Init+0x304>)
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	43db      	mvns	r3, r3
 8002968:	4909      	ldr	r1, [pc, #36]	; (8002990 <HAL_GPIO_Init+0x304>)
 800296a:	4013      	ands	r3, r2
 800296c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	3301      	adds	r3, #1
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	fa22 f303 	lsr.w	r3, r2, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	f47f ae8e 	bne.w	80026a0 <HAL_GPIO_Init+0x14>
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	372c      	adds	r7, #44	; 0x2c
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029b0:	e003      	b.n	80029ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	041a      	lsls	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	611a      	str	r2, [r3, #16]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	041a      	lsls	r2, r3, #16
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	43d9      	mvns	r1, r3
 80029e2:	887b      	ldrh	r3, [r7, #2]
 80029e4:	400b      	ands	r3, r1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	611a      	str	r2, [r3, #16]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e26c      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8087 	beq.w	8002b26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a18:	4b92      	ldr	r3, [pc, #584]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 030c 	and.w	r3, r3, #12
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d00c      	beq.n	8002a3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a24:	4b8f      	ldr	r3, [pc, #572]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d112      	bne.n	8002a56 <HAL_RCC_OscConfig+0x5e>
 8002a30:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3c:	d10b      	bne.n	8002a56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d06c      	beq.n	8002b24 <HAL_RCC_OscConfig+0x12c>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d168      	bne.n	8002b24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e246      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x76>
 8002a60:	4b80      	ldr	r3, [pc, #512]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a7f      	ldr	r2, [pc, #508]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	e02e      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x98>
 8002a76:	4b7b      	ldr	r3, [pc, #492]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7a      	ldr	r2, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b78      	ldr	r3, [pc, #480]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a77      	ldr	r2, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e01d      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0xbc>
 8002a9a:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a71      	ldr	r2, [pc, #452]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6e      	ldr	r2, [pc, #440]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0xd4>
 8002ab4:	4b6b      	ldr	r3, [pc, #428]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a6a      	ldr	r2, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002aba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a67      	ldr	r2, [pc, #412]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d013      	beq.n	8002afc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fd76 	bl	80015c4 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe fd72 	bl	80015c4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1fa      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b5d      	ldr	r3, [pc, #372]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xe4>
 8002afa:	e014      	b.n	8002b26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fd62 	bl	80015c4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b04:	f7fe fd5e 	bl	80015c4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b64      	cmp	r3, #100	; 0x64
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1e6      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x10c>
 8002b22:	e000      	b.n	8002b26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d063      	beq.n	8002bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b32:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 030c 	and.w	r3, r3, #12
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b3e:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d11c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x18c>
 8002b4a:	4b46      	ldr	r3, [pc, #280]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d116      	bne.n	8002b84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b56:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d005      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1ba      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4939      	ldr	r1, [pc, #228]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	e03a      	b.n	8002bfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b92:	f7fe fd17 	bl	80015c4 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b9a:	f7fe fd13 	bl	80015c4 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e19b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	4927      	ldr	r1, [pc, #156]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
 8002bcc:	e015      	b.n	8002bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fcf6 	bl	80015c4 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bdc:	f7fe fcf2 	bl	80015c4 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e17a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d03a      	beq.n	8002c7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d019      	beq.n	8002c42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0e:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c14:	f7fe fcd6 	bl	80015c4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c1c:	f7fe fcd2 	bl	80015c4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e15a      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f000 fad8 	bl	80031f0 <RCC_Delay>
 8002c40:	e01c      	b.n	8002c7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_RCC_OscConfig+0x274>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fcbc 	bl	80015c4 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4e:	e00f      	b.n	8002c70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fcb8 	bl	80015c4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d908      	bls.n	8002c70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e140      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	42420000 	.word	0x42420000
 8002c6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	4b9e      	ldr	r3, [pc, #632]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1e9      	bne.n	8002c50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a6 	beq.w	8002dd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b97      	ldr	r3, [pc, #604]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10d      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	4b94      	ldr	r3, [pc, #592]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	4a93      	ldr	r2, [pc, #588]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	61d3      	str	r3, [r2, #28]
 8002ca6:	4b91      	ldr	r3, [pc, #580]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb6:	4b8e      	ldr	r3, [pc, #568]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d118      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a8a      	ldr	r2, [pc, #552]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cce:	f7fe fc79 	bl	80015c4 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd6:	f7fe fc75 	bl	80015c4 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e0fd      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	4b81      	ldr	r3, [pc, #516]	; (8002ef0 <HAL_RCC_OscConfig+0x4f8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d106      	bne.n	8002d0a <HAL_RCC_OscConfig+0x312>
 8002cfc:	4b7b      	ldr	r3, [pc, #492]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a7a      	ldr	r2, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	f043 0301 	orr.w	r3, r3, #1
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	e02d      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x334>
 8002d12:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	4a75      	ldr	r2, [pc, #468]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	4a72      	ldr	r2, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	f023 0304 	bic.w	r3, r3, #4
 8002d28:	6213      	str	r3, [r2, #32]
 8002d2a:	e01c      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d10c      	bne.n	8002d4e <HAL_RCC_OscConfig+0x356>
 8002d34:	4b6d      	ldr	r3, [pc, #436]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	4a6c      	ldr	r2, [pc, #432]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d3a:	f043 0304 	orr.w	r3, r3, #4
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	4b6a      	ldr	r3, [pc, #424]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4a69      	ldr	r2, [pc, #420]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6213      	str	r3, [r2, #32]
 8002d4c:	e00b      	b.n	8002d66 <HAL_RCC_OscConfig+0x36e>
 8002d4e:	4b67      	ldr	r3, [pc, #412]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	4a66      	ldr	r2, [pc, #408]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6213      	str	r3, [r2, #32]
 8002d5a:	4b64      	ldr	r3, [pc, #400]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	4a63      	ldr	r2, [pc, #396]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6e:	f7fe fc29 	bl	80015c4 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fc25 	bl	80015c4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e0ab      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d0ee      	beq.n	8002d76 <HAL_RCC_OscConfig+0x37e>
 8002d98:	e014      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fc13 	bl	80015c4 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fc0f 	bl	80015c4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e095      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	4b4c      	ldr	r3, [pc, #304]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ee      	bne.n	8002da2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d105      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dca:	4b48      	ldr	r3, [pc, #288]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8081 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002de0:	4b42      	ldr	r3, [pc, #264]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d061      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d146      	bne.n	8002e82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df4:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <HAL_RCC_OscConfig+0x4fc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfa:	f7fe fbe3 	bl	80015c4 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e02:	f7fe fbdf 	bl	80015c4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e067      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e14:	4b35      	ldr	r3, [pc, #212]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e28:	d108      	bne.n	8002e3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e2a:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	492d      	ldr	r1, [pc, #180]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a19      	ldr	r1, [r3, #32]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	4927      	ldr	r1, [pc, #156]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x4fc>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fbb3 	bl	80015c4 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e62:	f7fe fbaf 	bl	80015c4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e037      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e74:	4b1d      	ldr	r3, [pc, #116]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x46a>
 8002e80:	e02f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b1c      	ldr	r3, [pc, #112]	; (8002ef4 <HAL_RCC_OscConfig+0x4fc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fb9c 	bl	80015c4 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fb98 	bl	80015c4 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e020      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x498>
 8002eae:	e018      	b.n	8002ee2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e013      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_OscConfig+0x4f4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d001      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	42420060 	.word	0x42420060

08002ef8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0d0      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b6a      	ldr	r3, [pc, #424]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b67      	ldr	r3, [pc, #412]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	4965      	ldr	r1, [pc, #404]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b63      	ldr	r3, [pc, #396]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0b8      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d005      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f54:	4b59      	ldr	r3, [pc, #356]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	4a58      	ldr	r2, [pc, #352]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f6c:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a52      	ldr	r2, [pc, #328]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f78:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	494d      	ldr	r1, [pc, #308]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d040      	beq.n	8003018 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d107      	bne.n	8002fae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d115      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07f      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb6:	4b41      	ldr	r3, [pc, #260]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d109      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e073      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc6:	4b3d      	ldr	r3, [pc, #244]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06b      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd6:	4b39      	ldr	r3, [pc, #228]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f023 0203 	bic.w	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4936      	ldr	r1, [pc, #216]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe faec 	bl	80015c4 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fee:	e00a      	b.n	8003006 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff0:	f7fe fae8 	bl	80015c4 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e053      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	4b2d      	ldr	r3, [pc, #180]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 020c 	and.w	r2, r3, #12
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	429a      	cmp	r2, r3
 8003016:	d1eb      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003018:	4b27      	ldr	r3, [pc, #156]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d210      	bcs.n	8003048 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 0207 	bic.w	r2, r3, #7
 800302e:	4922      	ldr	r1, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e032      	b.n	80030ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4916      	ldr	r1, [pc, #88]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003062:	4313      	orrs	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d009      	beq.n	8003086 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	490e      	ldr	r1, [pc, #56]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003086:	f000 f821 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 800308a:	4602      	mov	r2, r0
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_ClockConfig+0x1c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 030f 	and.w	r3, r3, #15
 8003096:	490a      	ldr	r1, [pc, #40]	; (80030c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	5ccb      	ldrb	r3, [r1, r3]
 800309a:	fa22 f303 	lsr.w	r3, r2, r3
 800309e:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <HAL_RCC_ClockConfig+0x1cc>)
 80030a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_RCC_ClockConfig+0x1d0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fa4a 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40022000 	.word	0x40022000
 80030bc:	40021000 	.word	0x40021000
 80030c0:	08005578 	.word	0x08005578
 80030c4:	20000000 	.word	0x20000000
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b490      	push	{r4, r7}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030d2:	4b2a      	ldr	r3, [pc, #168]	; (800317c <HAL_RCC_GetSysClockFreq+0xb0>)
 80030d4:	1d3c      	adds	r4, r7, #4
 80030d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030dc:	f240 2301 	movw	r3, #513	; 0x201
 80030e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d002      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x40>
 8003106:	2b08      	cmp	r3, #8
 8003108:	d003      	beq.n	8003112 <HAL_RCC_GetSysClockFreq+0x46>
 800310a:	e02d      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800310c:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800310e:	623b      	str	r3, [r7, #32]
      break;
 8003110:	e02d      	b.n	800316e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	0c9b      	lsrs	r3, r3, #18
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800311e:	4413      	add	r3, r2
 8003120:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003124:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d013      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	0c5b      	lsrs	r3, r3, #17
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313e:	4413      	add	r3, r2
 8003140:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003144:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314a:	fb02 f203 	mul.w	r2, r2, r3
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	e004      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <HAL_RCC_GetSysClockFreq+0xbc>)
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	623b      	str	r3, [r7, #32]
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_RCC_GetSysClockFreq+0xb8>)
 800316a:	623b      	str	r3, [r7, #32]
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	6a3b      	ldr	r3, [r7, #32]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3728      	adds	r7, #40	; 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bc90      	pop	{r4, r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	08005568 	.word	0x08005568
 8003180:	40021000 	.word	0x40021000
 8003184:	007a1200 	.word	0x007a1200
 8003188:	003d0900 	.word	0x003d0900

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b02      	ldr	r3, [pc, #8]	; (800319c <HAL_RCC_GetHCLKFreq+0x10>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	20000000 	.word	0x20000000

080031a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a4:	f7ff fff2 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0a1b      	lsrs	r3, r3, #8
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08005588 	.word	0x08005588

080031c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031cc:	f7ff ffde 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	0adb      	lsrs	r3, r3, #11
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	4903      	ldr	r1, [pc, #12]	; (80031ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80031de:	5ccb      	ldrb	r3, [r1, r3]
 80031e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40021000 	.word	0x40021000
 80031ec:	08005588 	.word	0x08005588

080031f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <RCC_Delay+0x34>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <RCC_Delay+0x38>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	0a5b      	lsrs	r3, r3, #9
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800320c:	bf00      	nop
  }
  while (Delay --);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1e5a      	subs	r2, r3, #1
 8003212:	60fa      	str	r2, [r7, #12]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f9      	bne.n	800320c <RCC_Delay+0x1c>
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	20000000 	.word	0x20000000
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e041      	b.n	80032c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe f81e 	bl	8001294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 fa70 	bl	8003750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d001      	beq.n	80032e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e03a      	b.n	800335a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_TIM_Base_Start_IT+0x98>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x58>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330e:	d009      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x58>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <HAL_TIM_Base_Start_IT+0x9c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0x58>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a13      	ldr	r2, [pc, #76]	; (800336c <HAL_TIM_Base_Start_IT+0xa0>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d111      	bne.n	8003348 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b06      	cmp	r3, #6
 8003334:	d010      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003346:	e007      	b.n	8003358 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bc80      	pop	{r7}
 8003362:	4770      	bx	lr
 8003364:	40012c00 	.word	0x40012c00
 8003368:	40000400 	.word	0x40000400
 800336c:	40000800 	.word	0x40000800

08003370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d122      	bne.n	80033cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d11b      	bne.n	80033cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0202 	mvn.w	r2, #2
 800339c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f9b1 	bl	800371a <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f9a4 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f9b3 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d122      	bne.n	8003420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d11b      	bne.n	8003420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0204 	mvn.w	r2, #4
 80033f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2202      	movs	r2, #2
 80033f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f987 	bl	800371a <HAL_TIM_IC_CaptureCallback>
 800340c:	e005      	b.n	800341a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f97a 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f989 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b08      	cmp	r3, #8
 800342c:	d122      	bne.n	8003474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b08      	cmp	r3, #8
 800343a:	d11b      	bne.n	8003474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0208 	mvn.w	r2, #8
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2204      	movs	r2, #4
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f95d 	bl	800371a <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f950 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f95f 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	2b10      	cmp	r3, #16
 8003480:	d122      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b10      	cmp	r3, #16
 800348e:	d11b      	bne.n	80034c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0210 	mvn.w	r2, #16
 8003498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2208      	movs	r2, #8
 800349e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f933 	bl	800371a <HAL_TIM_IC_CaptureCallback>
 80034b4:	e005      	b.n	80034c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f926 	bl	8003708 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 f935 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d10e      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d107      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0201 	mvn.w	r2, #1
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd ff10 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d10e      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350c:	2b80      	cmp	r3, #128	; 0x80
 800350e:	d107      	bne.n	8003520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 fa77 	bl	8003a0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d10e      	bne.n	800354c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003538:	2b40      	cmp	r3, #64	; 0x40
 800353a:	d107      	bne.n	800354c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8f9 	bl	800373e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d10e      	bne.n	8003578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b20      	cmp	r3, #32
 8003566:	d107      	bne.n	8003578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0220 	mvn.w	r2, #32
 8003570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fa42 	bl	80039fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_TIM_ConfigClockSource+0x18>
 8003594:	2302      	movs	r3, #2
 8003596:	e0b3      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x180>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d0:	d03e      	beq.n	8003650 <HAL_TIM_ConfigClockSource+0xd0>
 80035d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035d6:	f200 8087 	bhi.w	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 80035da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035de:	f000 8085 	beq.w	80036ec <HAL_TIM_ConfigClockSource+0x16c>
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e6:	d87f      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 80035e8:	2b70      	cmp	r3, #112	; 0x70
 80035ea:	d01a      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0xa2>
 80035ec:	2b70      	cmp	r3, #112	; 0x70
 80035ee:	d87b      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 80035f0:	2b60      	cmp	r3, #96	; 0x60
 80035f2:	d050      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x116>
 80035f4:	2b60      	cmp	r3, #96	; 0x60
 80035f6:	d877      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 80035f8:	2b50      	cmp	r3, #80	; 0x50
 80035fa:	d03c      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0xf6>
 80035fc:	2b50      	cmp	r3, #80	; 0x50
 80035fe:	d873      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 8003600:	2b40      	cmp	r3, #64	; 0x40
 8003602:	d058      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x136>
 8003604:	2b40      	cmp	r3, #64	; 0x40
 8003606:	d86f      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 8003608:	2b30      	cmp	r3, #48	; 0x30
 800360a:	d064      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x156>
 800360c:	2b30      	cmp	r3, #48	; 0x30
 800360e:	d86b      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 8003610:	2b20      	cmp	r3, #32
 8003612:	d060      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x156>
 8003614:	2b20      	cmp	r3, #32
 8003616:	d867      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
 8003618:	2b00      	cmp	r3, #0
 800361a:	d05c      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x156>
 800361c:	2b10      	cmp	r3, #16
 800361e:	d05a      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003620:	e062      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f000 f966 	bl	8003902 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	609a      	str	r2, [r3, #8]
      break;
 800364e:	e04e      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6899      	ldr	r1, [r3, #8]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f000 f94f 	bl	8003902 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003672:	609a      	str	r2, [r3, #8]
      break;
 8003674:	e03b      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f000 f8c6 	bl	8003814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2150      	movs	r1, #80	; 0x50
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f91d 	bl	80038ce <TIM_ITRx_SetConfig>
      break;
 8003694:	e02b      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 f8e4 	bl	8003870 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2160      	movs	r1, #96	; 0x60
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f90d 	bl	80038ce <TIM_ITRx_SetConfig>
      break;
 80036b4:	e01b      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	461a      	mov	r2, r3
 80036c4:	f000 f8a6 	bl	8003814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2140      	movs	r1, #64	; 0x40
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 f8fd 	bl	80038ce <TIM_ITRx_SetConfig>
      break;
 80036d4:	e00b      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f000 f8f4 	bl	80038ce <TIM_ITRx_SetConfig>
        break;
 80036e6:	e002      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr

0800371a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a29      	ldr	r2, [pc, #164]	; (8003808 <TIM_Base_SetConfig+0xb8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00b      	beq.n	8003780 <TIM_Base_SetConfig+0x30>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800376e:	d007      	beq.n	8003780 <TIM_Base_SetConfig+0x30>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a26      	ldr	r2, [pc, #152]	; (800380c <TIM_Base_SetConfig+0xbc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_Base_SetConfig+0x30>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a25      	ldr	r2, [pc, #148]	; (8003810 <TIM_Base_SetConfig+0xc0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d108      	bne.n	8003792 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <TIM_Base_SetConfig+0xb8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0x62>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0x62>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a19      	ldr	r2, [pc, #100]	; (800380c <TIM_Base_SetConfig+0xbc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x62>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a18      	ldr	r2, [pc, #96]	; (8003810 <TIM_Base_SetConfig+0xc0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a07      	ldr	r2, [pc, #28]	; (8003808 <TIM_Base_SetConfig+0xb8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d103      	bne.n	80037f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691a      	ldr	r2, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	615a      	str	r2, [r3, #20]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800

08003814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	f023 0201 	bic.w	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800383e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f023 030a 	bic.w	r3, r3, #10
 8003850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	621a      	str	r2, [r3, #32]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f023 0210 	bic.w	r2, r3, #16
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800389a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	031b      	lsls	r3, r3, #12
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	621a      	str	r2, [r3, #32]
}
 80038c4:	bf00      	nop
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr

080038ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f043 0307 	orr.w	r3, r3, #7
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b087      	sub	sp, #28
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
 800390e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800391c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	021a      	lsls	r2, r3, #8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	431a      	orrs	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4313      	orrs	r3, r2
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	609a      	str	r2, [r3, #8]
}
 8003936:	bf00      	nop
 8003938:	371c      	adds	r7, #28
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003954:	2302      	movs	r3, #2
 8003956:	e046      	b.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a4:	d009      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d10c      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40000800 	.word	0x40000800

080039fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e03f      	b.n	8003ab2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fd fcb4 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fbed 	bl	8004244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b085      	sub	sp, #20
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b20      	cmp	r3, #32
 8003ad2:	d130      	bne.n	8003b36 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_UART_Transmit_IT+0x26>
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e029      	b.n	8003b38 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Transmit_IT+0x38>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e022      	b.n	8003b38 <HAL_UART_Transmit_IT+0x7e>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	88fa      	ldrh	r2, [r7, #6]
 8003b0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2221      	movs	r2, #33	; 0x21
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr

08003b42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d11d      	bne.n	8003b98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <HAL_UART_Receive_IT+0x26>
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e016      	b.n	8003b9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Receive_IT+0x38>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e00f      	b.n	8003b9a <HAL_UART_Receive_IT+0x58>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f9cf 	bl	8003f32 <UART_Start_Receive_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	e000      	b.n	8003b9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
  }
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10d      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x52>
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f003 0320 	and.w	r3, r3, #32
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 fa7f 	bl	80040f2 <UART_Receive_IT>
      return;
 8003bf4:	e17b      	b.n	8003eee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 80b1 	beq.w	8003d60 <HAL_UART_IRQHandler+0x1bc>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d105      	bne.n	8003c14 <HAL_UART_IRQHandler+0x70>
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80a6 	beq.w	8003d60 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_UART_IRQHandler+0x90>
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f043 0201 	orr.w	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_UART_IRQHandler+0xb0>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0202 	orr.w	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_UART_IRQHandler+0xd0>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f043 0204 	orr.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00f      	beq.n	8003c9e <HAL_UART_IRQHandler+0xfa>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d104      	bne.n	8003c92 <HAL_UART_IRQHandler+0xee>
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d005      	beq.n	8003c9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	f043 0208 	orr.w	r2, r3, #8
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 811e 	beq.w	8003ee4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x11e>
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa18 	bl	80040f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_UART_IRQHandler+0x146>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d031      	beq.n	8003d4e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f95a 	bl	8003fa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d023      	beq.n	8003d46 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d0c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d013      	beq.n	8003d3e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	4a76      	ldr	r2, [pc, #472]	; (8003ef4 <HAL_UART_IRQHandler+0x350>)
 8003d1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe fc3c 	bl	80025a0 <HAL_DMA_Abort_IT>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d3c:	e00e      	b.n	8003d5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8e3 	bl	8003f0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d44:	e00a      	b.n	8003d5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f8df 	bl	8003f0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4c:	e006      	b.n	8003d5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f8db 	bl	8003f0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d5a:	e0c3      	b.n	8003ee4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	bf00      	nop
    return;
 8003d5e:	e0c1      	b.n	8003ee4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 80a1 	bne.w	8003eac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 809b 	beq.w	8003eac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8095 	beq.w	8003eac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d82:	2300      	movs	r3, #0
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d04e      	beq.n	8003e44 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003db0:	8a3b      	ldrh	r3, [r7, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8098 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dbc:	8a3a      	ldrh	r2, [r7, #16]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	f080 8092 	bcs.w	8003ee8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	8a3a      	ldrh	r2, [r7, #16]
 8003dc8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d02b      	beq.n	8003e2c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695a      	ldr	r2, [r3, #20]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0201 	bic.w	r2, r2, #1
 8003df2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e02:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0210 	bic.w	r2, r2, #16
 8003e20:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fb7f 	bl	800252a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f86d 	bl	8003f1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e42:	e051      	b.n	8003ee8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d047      	beq.n	8003eec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003e5c:	8a7b      	ldrh	r3, [r7, #18]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d044      	beq.n	8003eec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e70:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695a      	ldr	r2, [r3, #20]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0210 	bic.w	r2, r2, #16
 8003e9e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ea0:	8a7b      	ldrh	r3, [r7, #18]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f839 	bl	8003f1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003eaa:	e01f      	b.n	8003eec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x324>
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f8af 	bl	8004024 <UART_Transmit_IT>
    return;
 8003ec6:	e012      	b.n	8003eee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <HAL_UART_IRQHandler+0x34a>
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8f0 	bl	80040c2 <UART_EndTransmit_IT>
    return;
 8003ee2:	e004      	b.n	8003eee <HAL_UART_IRQHandler+0x34a>
    return;
 8003ee4:	bf00      	nop
 8003ee6:	e002      	b.n	8003eee <HAL_UART_IRQHandler+0x34a>
      return;
 8003ee8:	bf00      	nop
 8003eea:	e000      	b.n	8003eee <HAL_UART_IRQHandler+0x34a>
      return;
 8003eec:	bf00      	nop
  }
}
 8003eee:	3728      	adds	r7, #40	; 0x28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	08003ffd 	.word	0x08003ffd

08003ef8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bc80      	pop	{r7}
 8003f08:	4770      	bx	lr

08003f0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr

08003f32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	88fa      	ldrh	r2, [r7, #6]
 8003f50:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2222      	movs	r2, #34	; 0x22
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f76:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003fba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0201 	bic.w	r2, r2, #1
 8003fca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d107      	bne.n	8003fe4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0210 	bic.w	r2, r2, #16
 8003fe2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff ff77 	bl	8003f0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800401c:	bf00      	nop
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b21      	cmp	r3, #33	; 0x21
 8004036:	d13e      	bne.n	80040b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004040:	d114      	bne.n	800406c <UART_Transmit_IT+0x48>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d110      	bne.n	800406c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800405e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	1c9a      	adds	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	621a      	str	r2, [r3, #32]
 800406a:	e008      	b.n	800407e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	1c59      	adds	r1, r3, #1
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6211      	str	r1, [r2, #32]
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4619      	mov	r1, r3
 800408c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040b6:	2302      	movs	r3, #2
  }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr

080040c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff ff08 	bl	8003ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b22      	cmp	r3, #34	; 0x22
 8004104:	f040 8099 	bne.w	800423a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004110:	d117      	bne.n	8004142 <UART_Receive_IT+0x50>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d113      	bne.n	8004142 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004122:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004130:	b29a      	uxth	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	1c9a      	adds	r2, r3, #2
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	629a      	str	r2, [r3, #40]	; 0x28
 8004140:	e026      	b.n	8004190 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004154:	d007      	beq.n	8004166 <UART_Receive_IT+0x74>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <UART_Receive_IT+0x82>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	b2da      	uxtb	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e008      	b.n	8004186 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004180:	b2da      	uxtb	r2, r3
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b29b      	uxth	r3, r3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4619      	mov	r1, r3
 800419e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d148      	bne.n	8004236 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0220 	bic.w	r2, r2, #32
 80041b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0201 	bic.w	r2, r2, #1
 80041d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d123      	bne.n	800422c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0210 	bic.w	r2, r2, #16
 80041f8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d10a      	bne.n	800421e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fe79 	bl	8003f1c <HAL_UARTEx_RxEventCallback>
 800422a:	e002      	b.n	8004232 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fd f915 	bl	800145c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e002      	b.n	800423c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800423a:	2302      	movs	r3, #2
  }
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68da      	ldr	r2, [r3, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800427e:	f023 030c 	bic.w	r3, r3, #12
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	430b      	orrs	r3, r1
 800428a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2c      	ldr	r2, [pc, #176]	; (8004358 <UART_SetConfig+0x114>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d103      	bne.n	80042b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042ac:	f7fe ff8c 	bl	80031c8 <HAL_RCC_GetPCLK2Freq>
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	e002      	b.n	80042ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042b4:	f7fe ff74 	bl	80031a0 <HAL_RCC_GetPCLK1Freq>
 80042b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	009a      	lsls	r2, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <UART_SetConfig+0x118>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	095b      	lsrs	r3, r3, #5
 80042d8:	0119      	lsls	r1, r3, #4
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	441a      	add	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80042f0:	4b1a      	ldr	r3, [pc, #104]	; (800435c <UART_SetConfig+0x118>)
 80042f2:	fba3 0302 	umull	r0, r3, r3, r2
 80042f6:	095b      	lsrs	r3, r3, #5
 80042f8:	2064      	movs	r0, #100	; 0x64
 80042fa:	fb00 f303 	mul.w	r3, r0, r3
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	3332      	adds	r3, #50	; 0x32
 8004304:	4a15      	ldr	r2, [pc, #84]	; (800435c <UART_SetConfig+0x118>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004310:	4419      	add	r1, r3
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009a      	lsls	r2, r3, #2
 800431c:	441a      	add	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	fbb2 f2f3 	udiv	r2, r2, r3
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <UART_SetConfig+0x118>)
 800432a:	fba3 0302 	umull	r0, r3, r3, r2
 800432e:	095b      	lsrs	r3, r3, #5
 8004330:	2064      	movs	r0, #100	; 0x64
 8004332:	fb00 f303 	mul.w	r3, r0, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	3332      	adds	r3, #50	; 0x32
 800433c:	4a07      	ldr	r2, [pc, #28]	; (800435c <UART_SetConfig+0x118>)
 800433e:	fba2 2303 	umull	r2, r3, r2, r3
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	f003 020f 	and.w	r2, r3, #15
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	440a      	add	r2, r1
 800434e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004350:	bf00      	nop
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40013800 	.word	0x40013800
 800435c:	51eb851f 	.word	0x51eb851f

08004360 <__errno>:
 8004360:	4b01      	ldr	r3, [pc, #4]	; (8004368 <__errno+0x8>)
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	2000000c 	.word	0x2000000c

0800436c <__libc_init_array>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	2600      	movs	r6, #0
 8004370:	4d0c      	ldr	r5, [pc, #48]	; (80043a4 <__libc_init_array+0x38>)
 8004372:	4c0d      	ldr	r4, [pc, #52]	; (80043a8 <__libc_init_array+0x3c>)
 8004374:	1b64      	subs	r4, r4, r5
 8004376:	10a4      	asrs	r4, r4, #2
 8004378:	42a6      	cmp	r6, r4
 800437a:	d109      	bne.n	8004390 <__libc_init_array+0x24>
 800437c:	f001 f8da 	bl	8005534 <_init>
 8004380:	2600      	movs	r6, #0
 8004382:	4d0a      	ldr	r5, [pc, #40]	; (80043ac <__libc_init_array+0x40>)
 8004384:	4c0a      	ldr	r4, [pc, #40]	; (80043b0 <__libc_init_array+0x44>)
 8004386:	1b64      	subs	r4, r4, r5
 8004388:	10a4      	asrs	r4, r4, #2
 800438a:	42a6      	cmp	r6, r4
 800438c:	d105      	bne.n	800439a <__libc_init_array+0x2e>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	f855 3b04 	ldr.w	r3, [r5], #4
 8004394:	4798      	blx	r3
 8004396:	3601      	adds	r6, #1
 8004398:	e7ee      	b.n	8004378 <__libc_init_array+0xc>
 800439a:	f855 3b04 	ldr.w	r3, [r5], #4
 800439e:	4798      	blx	r3
 80043a0:	3601      	adds	r6, #1
 80043a2:	e7f2      	b.n	800438a <__libc_init_array+0x1e>
 80043a4:	080057dc 	.word	0x080057dc
 80043a8:	080057dc 	.word	0x080057dc
 80043ac:	080057dc 	.word	0x080057dc
 80043b0:	080057e0 	.word	0x080057e0

080043b4 <malloc>:
 80043b4:	4b02      	ldr	r3, [pc, #8]	; (80043c0 <malloc+0xc>)
 80043b6:	4601      	mov	r1, r0
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	f000 b857 	b.w	800446c <_malloc_r>
 80043be:	bf00      	nop
 80043c0:	2000000c 	.word	0x2000000c

080043c4 <memset>:
 80043c4:	4603      	mov	r3, r0
 80043c6:	4402      	add	r2, r0
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d100      	bne.n	80043ce <memset+0xa>
 80043cc:	4770      	bx	lr
 80043ce:	f803 1b01 	strb.w	r1, [r3], #1
 80043d2:	e7f9      	b.n	80043c8 <memset+0x4>

080043d4 <_free_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4605      	mov	r5, r0
 80043d8:	2900      	cmp	r1, #0
 80043da:	d043      	beq.n	8004464 <_free_r+0x90>
 80043dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e0:	1f0c      	subs	r4, r1, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bfb8      	it	lt
 80043e6:	18e4      	addlt	r4, r4, r3
 80043e8:	f000 f9c6 	bl	8004778 <__malloc_lock>
 80043ec:	4a1e      	ldr	r2, [pc, #120]	; (8004468 <_free_r+0x94>)
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	4610      	mov	r0, r2
 80043f2:	b933      	cbnz	r3, 8004402 <_free_r+0x2e>
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	6014      	str	r4, [r2, #0]
 80043f8:	4628      	mov	r0, r5
 80043fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043fe:	f000 b9c1 	b.w	8004784 <__malloc_unlock>
 8004402:	42a3      	cmp	r3, r4
 8004404:	d90a      	bls.n	800441c <_free_r+0x48>
 8004406:	6821      	ldr	r1, [r4, #0]
 8004408:	1862      	adds	r2, r4, r1
 800440a:	4293      	cmp	r3, r2
 800440c:	bf01      	itttt	eq
 800440e:	681a      	ldreq	r2, [r3, #0]
 8004410:	685b      	ldreq	r3, [r3, #4]
 8004412:	1852      	addeq	r2, r2, r1
 8004414:	6022      	streq	r2, [r4, #0]
 8004416:	6063      	str	r3, [r4, #4]
 8004418:	6004      	str	r4, [r0, #0]
 800441a:	e7ed      	b.n	80043f8 <_free_r+0x24>
 800441c:	461a      	mov	r2, r3
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	b10b      	cbz	r3, 8004426 <_free_r+0x52>
 8004422:	42a3      	cmp	r3, r4
 8004424:	d9fa      	bls.n	800441c <_free_r+0x48>
 8004426:	6811      	ldr	r1, [r2, #0]
 8004428:	1850      	adds	r0, r2, r1
 800442a:	42a0      	cmp	r0, r4
 800442c:	d10b      	bne.n	8004446 <_free_r+0x72>
 800442e:	6820      	ldr	r0, [r4, #0]
 8004430:	4401      	add	r1, r0
 8004432:	1850      	adds	r0, r2, r1
 8004434:	4283      	cmp	r3, r0
 8004436:	6011      	str	r1, [r2, #0]
 8004438:	d1de      	bne.n	80043f8 <_free_r+0x24>
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4401      	add	r1, r0
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	6053      	str	r3, [r2, #4]
 8004444:	e7d8      	b.n	80043f8 <_free_r+0x24>
 8004446:	d902      	bls.n	800444e <_free_r+0x7a>
 8004448:	230c      	movs	r3, #12
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	e7d4      	b.n	80043f8 <_free_r+0x24>
 800444e:	6820      	ldr	r0, [r4, #0]
 8004450:	1821      	adds	r1, r4, r0
 8004452:	428b      	cmp	r3, r1
 8004454:	bf01      	itttt	eq
 8004456:	6819      	ldreq	r1, [r3, #0]
 8004458:	685b      	ldreq	r3, [r3, #4]
 800445a:	1809      	addeq	r1, r1, r0
 800445c:	6021      	streq	r1, [r4, #0]
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7c9      	b.n	80043f8 <_free_r+0x24>
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	bf00      	nop
 8004468:	20000110 	.word	0x20000110

0800446c <_malloc_r>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	1ccd      	adds	r5, r1, #3
 8004470:	f025 0503 	bic.w	r5, r5, #3
 8004474:	3508      	adds	r5, #8
 8004476:	2d0c      	cmp	r5, #12
 8004478:	bf38      	it	cc
 800447a:	250c      	movcc	r5, #12
 800447c:	2d00      	cmp	r5, #0
 800447e:	4606      	mov	r6, r0
 8004480:	db01      	blt.n	8004486 <_malloc_r+0x1a>
 8004482:	42a9      	cmp	r1, r5
 8004484:	d903      	bls.n	800448e <_malloc_r+0x22>
 8004486:	230c      	movs	r3, #12
 8004488:	6033      	str	r3, [r6, #0]
 800448a:	2000      	movs	r0, #0
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448e:	f000 f973 	bl	8004778 <__malloc_lock>
 8004492:	4921      	ldr	r1, [pc, #132]	; (8004518 <_malloc_r+0xac>)
 8004494:	680a      	ldr	r2, [r1, #0]
 8004496:	4614      	mov	r4, r2
 8004498:	b99c      	cbnz	r4, 80044c2 <_malloc_r+0x56>
 800449a:	4f20      	ldr	r7, [pc, #128]	; (800451c <_malloc_r+0xb0>)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	b923      	cbnz	r3, 80044aa <_malloc_r+0x3e>
 80044a0:	4621      	mov	r1, r4
 80044a2:	4630      	mov	r0, r6
 80044a4:	f000 f83c 	bl	8004520 <_sbrk_r>
 80044a8:	6038      	str	r0, [r7, #0]
 80044aa:	4629      	mov	r1, r5
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f837 	bl	8004520 <_sbrk_r>
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	d123      	bne.n	80044fe <_malloc_r+0x92>
 80044b6:	230c      	movs	r3, #12
 80044b8:	4630      	mov	r0, r6
 80044ba:	6033      	str	r3, [r6, #0]
 80044bc:	f000 f962 	bl	8004784 <__malloc_unlock>
 80044c0:	e7e3      	b.n	800448a <_malloc_r+0x1e>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	1b5b      	subs	r3, r3, r5
 80044c6:	d417      	bmi.n	80044f8 <_malloc_r+0x8c>
 80044c8:	2b0b      	cmp	r3, #11
 80044ca:	d903      	bls.n	80044d4 <_malloc_r+0x68>
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	441c      	add	r4, r3
 80044d0:	6025      	str	r5, [r4, #0]
 80044d2:	e004      	b.n	80044de <_malloc_r+0x72>
 80044d4:	6863      	ldr	r3, [r4, #4]
 80044d6:	42a2      	cmp	r2, r4
 80044d8:	bf0c      	ite	eq
 80044da:	600b      	streq	r3, [r1, #0]
 80044dc:	6053      	strne	r3, [r2, #4]
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 f950 	bl	8004784 <__malloc_unlock>
 80044e4:	f104 000b 	add.w	r0, r4, #11
 80044e8:	1d23      	adds	r3, r4, #4
 80044ea:	f020 0007 	bic.w	r0, r0, #7
 80044ee:	1ac2      	subs	r2, r0, r3
 80044f0:	d0cc      	beq.n	800448c <_malloc_r+0x20>
 80044f2:	1a1b      	subs	r3, r3, r0
 80044f4:	50a3      	str	r3, [r4, r2]
 80044f6:	e7c9      	b.n	800448c <_malloc_r+0x20>
 80044f8:	4622      	mov	r2, r4
 80044fa:	6864      	ldr	r4, [r4, #4]
 80044fc:	e7cc      	b.n	8004498 <_malloc_r+0x2c>
 80044fe:	1cc4      	adds	r4, r0, #3
 8004500:	f024 0403 	bic.w	r4, r4, #3
 8004504:	42a0      	cmp	r0, r4
 8004506:	d0e3      	beq.n	80044d0 <_malloc_r+0x64>
 8004508:	1a21      	subs	r1, r4, r0
 800450a:	4630      	mov	r0, r6
 800450c:	f000 f808 	bl	8004520 <_sbrk_r>
 8004510:	3001      	adds	r0, #1
 8004512:	d1dd      	bne.n	80044d0 <_malloc_r+0x64>
 8004514:	e7cf      	b.n	80044b6 <_malloc_r+0x4a>
 8004516:	bf00      	nop
 8004518:	20000110 	.word	0x20000110
 800451c:	20000114 	.word	0x20000114

08004520 <_sbrk_r>:
 8004520:	b538      	push	{r3, r4, r5, lr}
 8004522:	2300      	movs	r3, #0
 8004524:	4d05      	ldr	r5, [pc, #20]	; (800453c <_sbrk_r+0x1c>)
 8004526:	4604      	mov	r4, r0
 8004528:	4608      	mov	r0, r1
 800452a:	602b      	str	r3, [r5, #0]
 800452c:	f7fc fdd6 	bl	80010dc <_sbrk>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d102      	bne.n	800453a <_sbrk_r+0x1a>
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b103      	cbz	r3, 800453a <_sbrk_r+0x1a>
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	bd38      	pop	{r3, r4, r5, pc}
 800453c:	2000035c 	.word	0x2000035c

08004540 <strtok>:
 8004540:	4b16      	ldr	r3, [pc, #88]	; (800459c <strtok+0x5c>)
 8004542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004546:	681f      	ldr	r7, [r3, #0]
 8004548:	4605      	mov	r5, r0
 800454a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800454c:	460e      	mov	r6, r1
 800454e:	b9ec      	cbnz	r4, 800458c <strtok+0x4c>
 8004550:	2050      	movs	r0, #80	; 0x50
 8004552:	f7ff ff2f 	bl	80043b4 <malloc>
 8004556:	4602      	mov	r2, r0
 8004558:	65b8      	str	r0, [r7, #88]	; 0x58
 800455a:	b920      	cbnz	r0, 8004566 <strtok+0x26>
 800455c:	2157      	movs	r1, #87	; 0x57
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <strtok+0x60>)
 8004560:	4810      	ldr	r0, [pc, #64]	; (80045a4 <strtok+0x64>)
 8004562:	f000 f8d9 	bl	8004718 <__assert_func>
 8004566:	e9c0 4400 	strd	r4, r4, [r0]
 800456a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800456e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004572:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004576:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800457a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800457e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004582:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004586:	6184      	str	r4, [r0, #24]
 8004588:	7704      	strb	r4, [r0, #28]
 800458a:	6244      	str	r4, [r0, #36]	; 0x24
 800458c:	4631      	mov	r1, r6
 800458e:	4628      	mov	r0, r5
 8004590:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004592:	2301      	movs	r3, #1
 8004594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004598:	f000 b806 	b.w	80045a8 <__strtok_r>
 800459c:	2000000c 	.word	0x2000000c
 80045a0:	08005594 	.word	0x08005594
 80045a4:	080055ab 	.word	0x080055ab

080045a8 <__strtok_r>:
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b908      	cbnz	r0, 80045b0 <__strtok_r+0x8>
 80045ac:	6810      	ldr	r0, [r2, #0]
 80045ae:	b188      	cbz	r0, 80045d4 <__strtok_r+0x2c>
 80045b0:	4604      	mov	r4, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	4620      	mov	r0, r4
 80045b6:	f814 5b01 	ldrb.w	r5, [r4], #1
 80045ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 80045be:	b91e      	cbnz	r6, 80045c8 <__strtok_r+0x20>
 80045c0:	b965      	cbnz	r5, 80045dc <__strtok_r+0x34>
 80045c2:	4628      	mov	r0, r5
 80045c4:	6015      	str	r5, [r2, #0]
 80045c6:	e005      	b.n	80045d4 <__strtok_r+0x2c>
 80045c8:	42b5      	cmp	r5, r6
 80045ca:	d1f6      	bne.n	80045ba <__strtok_r+0x12>
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <__strtok_r+0xa>
 80045d0:	6014      	str	r4, [r2, #0]
 80045d2:	7003      	strb	r3, [r0, #0]
 80045d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045d6:	461c      	mov	r4, r3
 80045d8:	e00c      	b.n	80045f4 <__strtok_r+0x4c>
 80045da:	b915      	cbnz	r5, 80045e2 <__strtok_r+0x3a>
 80045dc:	460e      	mov	r6, r1
 80045de:	f814 3b01 	ldrb.w	r3, [r4], #1
 80045e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80045e6:	42ab      	cmp	r3, r5
 80045e8:	d1f7      	bne.n	80045da <__strtok_r+0x32>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f3      	beq.n	80045d6 <__strtok_r+0x2e>
 80045ee:	2300      	movs	r3, #0
 80045f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80045f4:	6014      	str	r4, [r2, #0]
 80045f6:	e7ed      	b.n	80045d4 <__strtok_r+0x2c>

080045f8 <_strtol_l.isra.0>:
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045fe:	4686      	mov	lr, r0
 8004600:	d001      	beq.n	8004606 <_strtol_l.isra.0+0xe>
 8004602:	2b24      	cmp	r3, #36	; 0x24
 8004604:	d906      	bls.n	8004614 <_strtol_l.isra.0+0x1c>
 8004606:	f7ff feab 	bl	8004360 <__errno>
 800460a:	2316      	movs	r3, #22
 800460c:	6003      	str	r3, [r0, #0]
 800460e:	2000      	movs	r0, #0
 8004610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004614:	468c      	mov	ip, r1
 8004616:	4e3a      	ldr	r6, [pc, #232]	; (8004700 <_strtol_l.isra.0+0x108>)
 8004618:	4660      	mov	r0, ip
 800461a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800461e:	5da5      	ldrb	r5, [r4, r6]
 8004620:	f015 0508 	ands.w	r5, r5, #8
 8004624:	d1f8      	bne.n	8004618 <_strtol_l.isra.0+0x20>
 8004626:	2c2d      	cmp	r4, #45	; 0x2d
 8004628:	d133      	bne.n	8004692 <_strtol_l.isra.0+0x9a>
 800462a:	f04f 0801 	mov.w	r8, #1
 800462e:	f89c 4000 	ldrb.w	r4, [ip]
 8004632:	f100 0c02 	add.w	ip, r0, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d05d      	beq.n	80046f6 <_strtol_l.isra.0+0xfe>
 800463a:	2b10      	cmp	r3, #16
 800463c:	d10c      	bne.n	8004658 <_strtol_l.isra.0+0x60>
 800463e:	2c30      	cmp	r4, #48	; 0x30
 8004640:	d10a      	bne.n	8004658 <_strtol_l.isra.0+0x60>
 8004642:	f89c 0000 	ldrb.w	r0, [ip]
 8004646:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800464a:	2858      	cmp	r0, #88	; 0x58
 800464c:	d14e      	bne.n	80046ec <_strtol_l.isra.0+0xf4>
 800464e:	2310      	movs	r3, #16
 8004650:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004654:	f10c 0c02 	add.w	ip, ip, #2
 8004658:	2500      	movs	r5, #0
 800465a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800465e:	3f01      	subs	r7, #1
 8004660:	fbb7 f9f3 	udiv	r9, r7, r3
 8004664:	4628      	mov	r0, r5
 8004666:	fb03 7a19 	mls	sl, r3, r9, r7
 800466a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800466e:	2e09      	cmp	r6, #9
 8004670:	d818      	bhi.n	80046a4 <_strtol_l.isra.0+0xac>
 8004672:	4634      	mov	r4, r6
 8004674:	42a3      	cmp	r3, r4
 8004676:	dd24      	ble.n	80046c2 <_strtol_l.isra.0+0xca>
 8004678:	2d00      	cmp	r5, #0
 800467a:	db1f      	blt.n	80046bc <_strtol_l.isra.0+0xc4>
 800467c:	4581      	cmp	r9, r0
 800467e:	d31d      	bcc.n	80046bc <_strtol_l.isra.0+0xc4>
 8004680:	d101      	bne.n	8004686 <_strtol_l.isra.0+0x8e>
 8004682:	45a2      	cmp	sl, r4
 8004684:	db1a      	blt.n	80046bc <_strtol_l.isra.0+0xc4>
 8004686:	2501      	movs	r5, #1
 8004688:	fb00 4003 	mla	r0, r0, r3, r4
 800468c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004690:	e7eb      	b.n	800466a <_strtol_l.isra.0+0x72>
 8004692:	2c2b      	cmp	r4, #43	; 0x2b
 8004694:	bf08      	it	eq
 8004696:	f89c 4000 	ldrbeq.w	r4, [ip]
 800469a:	46a8      	mov	r8, r5
 800469c:	bf08      	it	eq
 800469e:	f100 0c02 	addeq.w	ip, r0, #2
 80046a2:	e7c8      	b.n	8004636 <_strtol_l.isra.0+0x3e>
 80046a4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80046a8:	2e19      	cmp	r6, #25
 80046aa:	d801      	bhi.n	80046b0 <_strtol_l.isra.0+0xb8>
 80046ac:	3c37      	subs	r4, #55	; 0x37
 80046ae:	e7e1      	b.n	8004674 <_strtol_l.isra.0+0x7c>
 80046b0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80046b4:	2e19      	cmp	r6, #25
 80046b6:	d804      	bhi.n	80046c2 <_strtol_l.isra.0+0xca>
 80046b8:	3c57      	subs	r4, #87	; 0x57
 80046ba:	e7db      	b.n	8004674 <_strtol_l.isra.0+0x7c>
 80046bc:	f04f 35ff 	mov.w	r5, #4294967295
 80046c0:	e7e4      	b.n	800468c <_strtol_l.isra.0+0x94>
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	da08      	bge.n	80046d8 <_strtol_l.isra.0+0xe0>
 80046c6:	2322      	movs	r3, #34	; 0x22
 80046c8:	4638      	mov	r0, r7
 80046ca:	f8ce 3000 	str.w	r3, [lr]
 80046ce:	2a00      	cmp	r2, #0
 80046d0:	d09e      	beq.n	8004610 <_strtol_l.isra.0+0x18>
 80046d2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80046d6:	e007      	b.n	80046e8 <_strtol_l.isra.0+0xf0>
 80046d8:	f1b8 0f00 	cmp.w	r8, #0
 80046dc:	d000      	beq.n	80046e0 <_strtol_l.isra.0+0xe8>
 80046de:	4240      	negs	r0, r0
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d095      	beq.n	8004610 <_strtol_l.isra.0+0x18>
 80046e4:	2d00      	cmp	r5, #0
 80046e6:	d1f4      	bne.n	80046d2 <_strtol_l.isra.0+0xda>
 80046e8:	6011      	str	r1, [r2, #0]
 80046ea:	e791      	b.n	8004610 <_strtol_l.isra.0+0x18>
 80046ec:	2430      	movs	r4, #48	; 0x30
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1b2      	bne.n	8004658 <_strtol_l.isra.0+0x60>
 80046f2:	2308      	movs	r3, #8
 80046f4:	e7b0      	b.n	8004658 <_strtol_l.isra.0+0x60>
 80046f6:	2c30      	cmp	r4, #48	; 0x30
 80046f8:	d0a3      	beq.n	8004642 <_strtol_l.isra.0+0x4a>
 80046fa:	230a      	movs	r3, #10
 80046fc:	e7ac      	b.n	8004658 <_strtol_l.isra.0+0x60>
 80046fe:	bf00      	nop
 8004700:	08005649 	.word	0x08005649

08004704 <strtol>:
 8004704:	4613      	mov	r3, r2
 8004706:	460a      	mov	r2, r1
 8004708:	4601      	mov	r1, r0
 800470a:	4802      	ldr	r0, [pc, #8]	; (8004714 <strtol+0x10>)
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f7ff bf73 	b.w	80045f8 <_strtol_l.isra.0>
 8004712:	bf00      	nop
 8004714:	2000000c 	.word	0x2000000c

08004718 <__assert_func>:
 8004718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800471a:	4614      	mov	r4, r2
 800471c:	461a      	mov	r2, r3
 800471e:	4b09      	ldr	r3, [pc, #36]	; (8004744 <__assert_func+0x2c>)
 8004720:	4605      	mov	r5, r0
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68d8      	ldr	r0, [r3, #12]
 8004726:	b14c      	cbz	r4, 800473c <__assert_func+0x24>
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <__assert_func+0x30>)
 800472a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800472e:	9100      	str	r1, [sp, #0]
 8004730:	462b      	mov	r3, r5
 8004732:	4906      	ldr	r1, [pc, #24]	; (800474c <__assert_func+0x34>)
 8004734:	f000 f80e 	bl	8004754 <fiprintf>
 8004738:	f000 fbd8 	bl	8004eec <abort>
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <__assert_func+0x38>)
 800473e:	461c      	mov	r4, r3
 8004740:	e7f3      	b.n	800472a <__assert_func+0x12>
 8004742:	bf00      	nop
 8004744:	2000000c 	.word	0x2000000c
 8004748:	0800560c 	.word	0x0800560c
 800474c:	08005619 	.word	0x08005619
 8004750:	08005647 	.word	0x08005647

08004754 <fiprintf>:
 8004754:	b40e      	push	{r1, r2, r3}
 8004756:	b503      	push	{r0, r1, lr}
 8004758:	4601      	mov	r1, r0
 800475a:	ab03      	add	r3, sp, #12
 800475c:	4805      	ldr	r0, [pc, #20]	; (8004774 <fiprintf+0x20>)
 800475e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004762:	6800      	ldr	r0, [r0, #0]
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	f000 f83b 	bl	80047e0 <_vfiprintf_r>
 800476a:	b002      	add	sp, #8
 800476c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004770:	b003      	add	sp, #12
 8004772:	4770      	bx	lr
 8004774:	2000000c 	.word	0x2000000c

08004778 <__malloc_lock>:
 8004778:	4801      	ldr	r0, [pc, #4]	; (8004780 <__malloc_lock+0x8>)
 800477a:	f000 bd77 	b.w	800526c <__retarget_lock_acquire_recursive>
 800477e:	bf00      	nop
 8004780:	20000364 	.word	0x20000364

08004784 <__malloc_unlock>:
 8004784:	4801      	ldr	r0, [pc, #4]	; (800478c <__malloc_unlock+0x8>)
 8004786:	f000 bd72 	b.w	800526e <__retarget_lock_release_recursive>
 800478a:	bf00      	nop
 800478c:	20000364 	.word	0x20000364

08004790 <__sfputc_r>:
 8004790:	6893      	ldr	r3, [r2, #8]
 8004792:	b410      	push	{r4}
 8004794:	3b01      	subs	r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	6093      	str	r3, [r2, #8]
 800479a:	da07      	bge.n	80047ac <__sfputc_r+0x1c>
 800479c:	6994      	ldr	r4, [r2, #24]
 800479e:	42a3      	cmp	r3, r4
 80047a0:	db01      	blt.n	80047a6 <__sfputc_r+0x16>
 80047a2:	290a      	cmp	r1, #10
 80047a4:	d102      	bne.n	80047ac <__sfputc_r+0x1c>
 80047a6:	bc10      	pop	{r4}
 80047a8:	f000 bae0 	b.w	8004d6c <__swbuf_r>
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	1c58      	adds	r0, r3, #1
 80047b0:	6010      	str	r0, [r2, #0]
 80047b2:	7019      	strb	r1, [r3, #0]
 80047b4:	4608      	mov	r0, r1
 80047b6:	bc10      	pop	{r4}
 80047b8:	4770      	bx	lr

080047ba <__sfputs_r>:
 80047ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047bc:	4606      	mov	r6, r0
 80047be:	460f      	mov	r7, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	18d5      	adds	r5, r2, r3
 80047c4:	42ac      	cmp	r4, r5
 80047c6:	d101      	bne.n	80047cc <__sfputs_r+0x12>
 80047c8:	2000      	movs	r0, #0
 80047ca:	e007      	b.n	80047dc <__sfputs_r+0x22>
 80047cc:	463a      	mov	r2, r7
 80047ce:	4630      	mov	r0, r6
 80047d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047d4:	f7ff ffdc 	bl	8004790 <__sfputc_r>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	d1f3      	bne.n	80047c4 <__sfputs_r+0xa>
 80047dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047e0 <_vfiprintf_r>:
 80047e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e4:	460d      	mov	r5, r1
 80047e6:	4614      	mov	r4, r2
 80047e8:	4698      	mov	r8, r3
 80047ea:	4606      	mov	r6, r0
 80047ec:	b09d      	sub	sp, #116	; 0x74
 80047ee:	b118      	cbz	r0, 80047f8 <_vfiprintf_r+0x18>
 80047f0:	6983      	ldr	r3, [r0, #24]
 80047f2:	b90b      	cbnz	r3, 80047f8 <_vfiprintf_r+0x18>
 80047f4:	f000 fc9c 	bl	8005130 <__sinit>
 80047f8:	4b89      	ldr	r3, [pc, #548]	; (8004a20 <_vfiprintf_r+0x240>)
 80047fa:	429d      	cmp	r5, r3
 80047fc:	d11b      	bne.n	8004836 <_vfiprintf_r+0x56>
 80047fe:	6875      	ldr	r5, [r6, #4]
 8004800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004802:	07d9      	lsls	r1, r3, #31
 8004804:	d405      	bmi.n	8004812 <_vfiprintf_r+0x32>
 8004806:	89ab      	ldrh	r3, [r5, #12]
 8004808:	059a      	lsls	r2, r3, #22
 800480a:	d402      	bmi.n	8004812 <_vfiprintf_r+0x32>
 800480c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800480e:	f000 fd2d 	bl	800526c <__retarget_lock_acquire_recursive>
 8004812:	89ab      	ldrh	r3, [r5, #12]
 8004814:	071b      	lsls	r3, r3, #28
 8004816:	d501      	bpl.n	800481c <_vfiprintf_r+0x3c>
 8004818:	692b      	ldr	r3, [r5, #16]
 800481a:	b9eb      	cbnz	r3, 8004858 <_vfiprintf_r+0x78>
 800481c:	4629      	mov	r1, r5
 800481e:	4630      	mov	r0, r6
 8004820:	f000 faf6 	bl	8004e10 <__swsetup_r>
 8004824:	b1c0      	cbz	r0, 8004858 <_vfiprintf_r+0x78>
 8004826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004828:	07dc      	lsls	r4, r3, #31
 800482a:	d50e      	bpl.n	800484a <_vfiprintf_r+0x6a>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	b01d      	add	sp, #116	; 0x74
 8004832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004836:	4b7b      	ldr	r3, [pc, #492]	; (8004a24 <_vfiprintf_r+0x244>)
 8004838:	429d      	cmp	r5, r3
 800483a:	d101      	bne.n	8004840 <_vfiprintf_r+0x60>
 800483c:	68b5      	ldr	r5, [r6, #8]
 800483e:	e7df      	b.n	8004800 <_vfiprintf_r+0x20>
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <_vfiprintf_r+0x248>)
 8004842:	429d      	cmp	r5, r3
 8004844:	bf08      	it	eq
 8004846:	68f5      	ldreq	r5, [r6, #12]
 8004848:	e7da      	b.n	8004800 <_vfiprintf_r+0x20>
 800484a:	89ab      	ldrh	r3, [r5, #12]
 800484c:	0598      	lsls	r0, r3, #22
 800484e:	d4ed      	bmi.n	800482c <_vfiprintf_r+0x4c>
 8004850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004852:	f000 fd0c 	bl	800526e <__retarget_lock_release_recursive>
 8004856:	e7e9      	b.n	800482c <_vfiprintf_r+0x4c>
 8004858:	2300      	movs	r3, #0
 800485a:	9309      	str	r3, [sp, #36]	; 0x24
 800485c:	2320      	movs	r3, #32
 800485e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004862:	2330      	movs	r3, #48	; 0x30
 8004864:	f04f 0901 	mov.w	r9, #1
 8004868:	f8cd 800c 	str.w	r8, [sp, #12]
 800486c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004a2c <_vfiprintf_r+0x24c>
 8004870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004874:	4623      	mov	r3, r4
 8004876:	469a      	mov	sl, r3
 8004878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800487c:	b10a      	cbz	r2, 8004882 <_vfiprintf_r+0xa2>
 800487e:	2a25      	cmp	r2, #37	; 0x25
 8004880:	d1f9      	bne.n	8004876 <_vfiprintf_r+0x96>
 8004882:	ebba 0b04 	subs.w	fp, sl, r4
 8004886:	d00b      	beq.n	80048a0 <_vfiprintf_r+0xc0>
 8004888:	465b      	mov	r3, fp
 800488a:	4622      	mov	r2, r4
 800488c:	4629      	mov	r1, r5
 800488e:	4630      	mov	r0, r6
 8004890:	f7ff ff93 	bl	80047ba <__sfputs_r>
 8004894:	3001      	adds	r0, #1
 8004896:	f000 80aa 	beq.w	80049ee <_vfiprintf_r+0x20e>
 800489a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800489c:	445a      	add	r2, fp
 800489e:	9209      	str	r2, [sp, #36]	; 0x24
 80048a0:	f89a 3000 	ldrb.w	r3, [sl]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a2 	beq.w	80049ee <_vfiprintf_r+0x20e>
 80048aa:	2300      	movs	r3, #0
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048b4:	f10a 0a01 	add.w	sl, sl, #1
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	9307      	str	r3, [sp, #28]
 80048bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048c0:	931a      	str	r3, [sp, #104]	; 0x68
 80048c2:	4654      	mov	r4, sl
 80048c4:	2205      	movs	r2, #5
 80048c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ca:	4858      	ldr	r0, [pc, #352]	; (8004a2c <_vfiprintf_r+0x24c>)
 80048cc:	f000 fd34 	bl	8005338 <memchr>
 80048d0:	9a04      	ldr	r2, [sp, #16]
 80048d2:	b9d8      	cbnz	r0, 800490c <_vfiprintf_r+0x12c>
 80048d4:	06d1      	lsls	r1, r2, #27
 80048d6:	bf44      	itt	mi
 80048d8:	2320      	movmi	r3, #32
 80048da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048de:	0713      	lsls	r3, r2, #28
 80048e0:	bf44      	itt	mi
 80048e2:	232b      	movmi	r3, #43	; 0x2b
 80048e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048e8:	f89a 3000 	ldrb.w	r3, [sl]
 80048ec:	2b2a      	cmp	r3, #42	; 0x2a
 80048ee:	d015      	beq.n	800491c <_vfiprintf_r+0x13c>
 80048f0:	4654      	mov	r4, sl
 80048f2:	2000      	movs	r0, #0
 80048f4:	f04f 0c0a 	mov.w	ip, #10
 80048f8:	9a07      	ldr	r2, [sp, #28]
 80048fa:	4621      	mov	r1, r4
 80048fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004900:	3b30      	subs	r3, #48	; 0x30
 8004902:	2b09      	cmp	r3, #9
 8004904:	d94e      	bls.n	80049a4 <_vfiprintf_r+0x1c4>
 8004906:	b1b0      	cbz	r0, 8004936 <_vfiprintf_r+0x156>
 8004908:	9207      	str	r2, [sp, #28]
 800490a:	e014      	b.n	8004936 <_vfiprintf_r+0x156>
 800490c:	eba0 0308 	sub.w	r3, r0, r8
 8004910:	fa09 f303 	lsl.w	r3, r9, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	46a2      	mov	sl, r4
 8004918:	9304      	str	r3, [sp, #16]
 800491a:	e7d2      	b.n	80048c2 <_vfiprintf_r+0xe2>
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	1d19      	adds	r1, r3, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	9103      	str	r1, [sp, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	bfbb      	ittet	lt
 8004928:	425b      	neglt	r3, r3
 800492a:	f042 0202 	orrlt.w	r2, r2, #2
 800492e:	9307      	strge	r3, [sp, #28]
 8004930:	9307      	strlt	r3, [sp, #28]
 8004932:	bfb8      	it	lt
 8004934:	9204      	strlt	r2, [sp, #16]
 8004936:	7823      	ldrb	r3, [r4, #0]
 8004938:	2b2e      	cmp	r3, #46	; 0x2e
 800493a:	d10c      	bne.n	8004956 <_vfiprintf_r+0x176>
 800493c:	7863      	ldrb	r3, [r4, #1]
 800493e:	2b2a      	cmp	r3, #42	; 0x2a
 8004940:	d135      	bne.n	80049ae <_vfiprintf_r+0x1ce>
 8004942:	9b03      	ldr	r3, [sp, #12]
 8004944:	3402      	adds	r4, #2
 8004946:	1d1a      	adds	r2, r3, #4
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	9203      	str	r2, [sp, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	bfb8      	it	lt
 8004950:	f04f 33ff 	movlt.w	r3, #4294967295
 8004954:	9305      	str	r3, [sp, #20]
 8004956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a3c <_vfiprintf_r+0x25c>
 800495a:	2203      	movs	r2, #3
 800495c:	4650      	mov	r0, sl
 800495e:	7821      	ldrb	r1, [r4, #0]
 8004960:	f000 fcea 	bl	8005338 <memchr>
 8004964:	b140      	cbz	r0, 8004978 <_vfiprintf_r+0x198>
 8004966:	2340      	movs	r3, #64	; 0x40
 8004968:	eba0 000a 	sub.w	r0, r0, sl
 800496c:	fa03 f000 	lsl.w	r0, r3, r0
 8004970:	9b04      	ldr	r3, [sp, #16]
 8004972:	3401      	adds	r4, #1
 8004974:	4303      	orrs	r3, r0
 8004976:	9304      	str	r3, [sp, #16]
 8004978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497c:	2206      	movs	r2, #6
 800497e:	482c      	ldr	r0, [pc, #176]	; (8004a30 <_vfiprintf_r+0x250>)
 8004980:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004984:	f000 fcd8 	bl	8005338 <memchr>
 8004988:	2800      	cmp	r0, #0
 800498a:	d03f      	beq.n	8004a0c <_vfiprintf_r+0x22c>
 800498c:	4b29      	ldr	r3, [pc, #164]	; (8004a34 <_vfiprintf_r+0x254>)
 800498e:	bb1b      	cbnz	r3, 80049d8 <_vfiprintf_r+0x1f8>
 8004990:	9b03      	ldr	r3, [sp, #12]
 8004992:	3307      	adds	r3, #7
 8004994:	f023 0307 	bic.w	r3, r3, #7
 8004998:	3308      	adds	r3, #8
 800499a:	9303      	str	r3, [sp, #12]
 800499c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800499e:	443b      	add	r3, r7
 80049a0:	9309      	str	r3, [sp, #36]	; 0x24
 80049a2:	e767      	b.n	8004874 <_vfiprintf_r+0x94>
 80049a4:	460c      	mov	r4, r1
 80049a6:	2001      	movs	r0, #1
 80049a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ac:	e7a5      	b.n	80048fa <_vfiprintf_r+0x11a>
 80049ae:	2300      	movs	r3, #0
 80049b0:	f04f 0c0a 	mov.w	ip, #10
 80049b4:	4619      	mov	r1, r3
 80049b6:	3401      	adds	r4, #1
 80049b8:	9305      	str	r3, [sp, #20]
 80049ba:	4620      	mov	r0, r4
 80049bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c0:	3a30      	subs	r2, #48	; 0x30
 80049c2:	2a09      	cmp	r2, #9
 80049c4:	d903      	bls.n	80049ce <_vfiprintf_r+0x1ee>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0c5      	beq.n	8004956 <_vfiprintf_r+0x176>
 80049ca:	9105      	str	r1, [sp, #20]
 80049cc:	e7c3      	b.n	8004956 <_vfiprintf_r+0x176>
 80049ce:	4604      	mov	r4, r0
 80049d0:	2301      	movs	r3, #1
 80049d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80049d6:	e7f0      	b.n	80049ba <_vfiprintf_r+0x1da>
 80049d8:	ab03      	add	r3, sp, #12
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	462a      	mov	r2, r5
 80049de:	4630      	mov	r0, r6
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <_vfiprintf_r+0x258>)
 80049e2:	a904      	add	r1, sp, #16
 80049e4:	f3af 8000 	nop.w
 80049e8:	4607      	mov	r7, r0
 80049ea:	1c78      	adds	r0, r7, #1
 80049ec:	d1d6      	bne.n	800499c <_vfiprintf_r+0x1bc>
 80049ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049f0:	07d9      	lsls	r1, r3, #31
 80049f2:	d405      	bmi.n	8004a00 <_vfiprintf_r+0x220>
 80049f4:	89ab      	ldrh	r3, [r5, #12]
 80049f6:	059a      	lsls	r2, r3, #22
 80049f8:	d402      	bmi.n	8004a00 <_vfiprintf_r+0x220>
 80049fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049fc:	f000 fc37 	bl	800526e <__retarget_lock_release_recursive>
 8004a00:	89ab      	ldrh	r3, [r5, #12]
 8004a02:	065b      	lsls	r3, r3, #25
 8004a04:	f53f af12 	bmi.w	800482c <_vfiprintf_r+0x4c>
 8004a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a0a:	e711      	b.n	8004830 <_vfiprintf_r+0x50>
 8004a0c:	ab03      	add	r3, sp, #12
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	462a      	mov	r2, r5
 8004a12:	4630      	mov	r0, r6
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <_vfiprintf_r+0x258>)
 8004a16:	a904      	add	r1, sp, #16
 8004a18:	f000 f882 	bl	8004b20 <_printf_i>
 8004a1c:	e7e4      	b.n	80049e8 <_vfiprintf_r+0x208>
 8004a1e:	bf00      	nop
 8004a20:	0800579c 	.word	0x0800579c
 8004a24:	080057bc 	.word	0x080057bc
 8004a28:	0800577c 	.word	0x0800577c
 8004a2c:	08005749 	.word	0x08005749
 8004a30:	08005753 	.word	0x08005753
 8004a34:	00000000 	.word	0x00000000
 8004a38:	080047bb 	.word	0x080047bb
 8004a3c:	0800574f 	.word	0x0800574f

08004a40 <_printf_common>:
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	4616      	mov	r6, r2
 8004a46:	4699      	mov	r9, r3
 8004a48:	688a      	ldr	r2, [r1, #8]
 8004a4a:	690b      	ldr	r3, [r1, #16]
 8004a4c:	4607      	mov	r7, r0
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	bfb8      	it	lt
 8004a52:	4613      	movlt	r3, r2
 8004a54:	6033      	str	r3, [r6, #0]
 8004a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a60:	b10a      	cbz	r2, 8004a66 <_printf_common+0x26>
 8004a62:	3301      	adds	r3, #1
 8004a64:	6033      	str	r3, [r6, #0]
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	0699      	lsls	r1, r3, #26
 8004a6a:	bf42      	ittt	mi
 8004a6c:	6833      	ldrmi	r3, [r6, #0]
 8004a6e:	3302      	addmi	r3, #2
 8004a70:	6033      	strmi	r3, [r6, #0]
 8004a72:	6825      	ldr	r5, [r4, #0]
 8004a74:	f015 0506 	ands.w	r5, r5, #6
 8004a78:	d106      	bne.n	8004a88 <_printf_common+0x48>
 8004a7a:	f104 0a19 	add.w	sl, r4, #25
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	6832      	ldr	r2, [r6, #0]
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	dc28      	bgt.n	8004ada <_printf_common+0x9a>
 8004a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a8c:	1e13      	subs	r3, r2, #0
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	bf18      	it	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	0692      	lsls	r2, r2, #26
 8004a96:	d42d      	bmi.n	8004af4 <_printf_common+0xb4>
 8004a98:	4649      	mov	r1, r9
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa0:	47c0      	blx	r8
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d020      	beq.n	8004ae8 <_printf_common+0xa8>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	68e5      	ldr	r5, [r4, #12]
 8004aaa:	f003 0306 	and.w	r3, r3, #6
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf18      	it	ne
 8004ab2:	2500      	movne	r5, #0
 8004ab4:	6832      	ldr	r2, [r6, #0]
 8004ab6:	f04f 0600 	mov.w	r6, #0
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	bf08      	it	eq
 8004abe:	1aad      	subeq	r5, r5, r2
 8004ac0:	6922      	ldr	r2, [r4, #16]
 8004ac2:	bf08      	it	eq
 8004ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	bfc4      	itt	gt
 8004acc:	1a9b      	subgt	r3, r3, r2
 8004ace:	18ed      	addgt	r5, r5, r3
 8004ad0:	341a      	adds	r4, #26
 8004ad2:	42b5      	cmp	r5, r6
 8004ad4:	d11a      	bne.n	8004b0c <_printf_common+0xcc>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e008      	b.n	8004aec <_printf_common+0xac>
 8004ada:	2301      	movs	r3, #1
 8004adc:	4652      	mov	r2, sl
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	47c0      	blx	r8
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d103      	bne.n	8004af0 <_printf_common+0xb0>
 8004ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af0:	3501      	adds	r5, #1
 8004af2:	e7c4      	b.n	8004a7e <_printf_common+0x3e>
 8004af4:	2030      	movs	r0, #48	; 0x30
 8004af6:	18e1      	adds	r1, r4, r3
 8004af8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b02:	4422      	add	r2, r4
 8004b04:	3302      	adds	r3, #2
 8004b06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b0a:	e7c5      	b.n	8004a98 <_printf_common+0x58>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	4622      	mov	r2, r4
 8004b10:	4649      	mov	r1, r9
 8004b12:	4638      	mov	r0, r7
 8004b14:	47c0      	blx	r8
 8004b16:	3001      	adds	r0, #1
 8004b18:	d0e6      	beq.n	8004ae8 <_printf_common+0xa8>
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7d9      	b.n	8004ad2 <_printf_common+0x92>
	...

08004b20 <_printf_i>:
 8004b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	460c      	mov	r4, r1
 8004b26:	7e27      	ldrb	r7, [r4, #24]
 8004b28:	4691      	mov	r9, r2
 8004b2a:	2f78      	cmp	r7, #120	; 0x78
 8004b2c:	4680      	mov	r8, r0
 8004b2e:	469a      	mov	sl, r3
 8004b30:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b36:	d807      	bhi.n	8004b48 <_printf_i+0x28>
 8004b38:	2f62      	cmp	r7, #98	; 0x62
 8004b3a:	d80a      	bhi.n	8004b52 <_printf_i+0x32>
 8004b3c:	2f00      	cmp	r7, #0
 8004b3e:	f000 80d9 	beq.w	8004cf4 <_printf_i+0x1d4>
 8004b42:	2f58      	cmp	r7, #88	; 0x58
 8004b44:	f000 80a4 	beq.w	8004c90 <_printf_i+0x170>
 8004b48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b50:	e03a      	b.n	8004bc8 <_printf_i+0xa8>
 8004b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b56:	2b15      	cmp	r3, #21
 8004b58:	d8f6      	bhi.n	8004b48 <_printf_i+0x28>
 8004b5a:	a001      	add	r0, pc, #4	; (adr r0, 8004b60 <_printf_i+0x40>)
 8004b5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b60:	08004bb9 	.word	0x08004bb9
 8004b64:	08004bcd 	.word	0x08004bcd
 8004b68:	08004b49 	.word	0x08004b49
 8004b6c:	08004b49 	.word	0x08004b49
 8004b70:	08004b49 	.word	0x08004b49
 8004b74:	08004b49 	.word	0x08004b49
 8004b78:	08004bcd 	.word	0x08004bcd
 8004b7c:	08004b49 	.word	0x08004b49
 8004b80:	08004b49 	.word	0x08004b49
 8004b84:	08004b49 	.word	0x08004b49
 8004b88:	08004b49 	.word	0x08004b49
 8004b8c:	08004cdb 	.word	0x08004cdb
 8004b90:	08004bfd 	.word	0x08004bfd
 8004b94:	08004cbd 	.word	0x08004cbd
 8004b98:	08004b49 	.word	0x08004b49
 8004b9c:	08004b49 	.word	0x08004b49
 8004ba0:	08004cfd 	.word	0x08004cfd
 8004ba4:	08004b49 	.word	0x08004b49
 8004ba8:	08004bfd 	.word	0x08004bfd
 8004bac:	08004b49 	.word	0x08004b49
 8004bb0:	08004b49 	.word	0x08004b49
 8004bb4:	08004cc5 	.word	0x08004cc5
 8004bb8:	680b      	ldr	r3, [r1, #0]
 8004bba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	600a      	str	r2, [r1, #0]
 8004bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e0a4      	b.n	8004d16 <_printf_i+0x1f6>
 8004bcc:	6825      	ldr	r5, [r4, #0]
 8004bce:	6808      	ldr	r0, [r1, #0]
 8004bd0:	062e      	lsls	r6, r5, #24
 8004bd2:	f100 0304 	add.w	r3, r0, #4
 8004bd6:	d50a      	bpl.n	8004bee <_printf_i+0xce>
 8004bd8:	6805      	ldr	r5, [r0, #0]
 8004bda:	600b      	str	r3, [r1, #0]
 8004bdc:	2d00      	cmp	r5, #0
 8004bde:	da03      	bge.n	8004be8 <_printf_i+0xc8>
 8004be0:	232d      	movs	r3, #45	; 0x2d
 8004be2:	426d      	negs	r5, r5
 8004be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be8:	230a      	movs	r3, #10
 8004bea:	485e      	ldr	r0, [pc, #376]	; (8004d64 <_printf_i+0x244>)
 8004bec:	e019      	b.n	8004c22 <_printf_i+0x102>
 8004bee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bf2:	6805      	ldr	r5, [r0, #0]
 8004bf4:	600b      	str	r3, [r1, #0]
 8004bf6:	bf18      	it	ne
 8004bf8:	b22d      	sxthne	r5, r5
 8004bfa:	e7ef      	b.n	8004bdc <_printf_i+0xbc>
 8004bfc:	680b      	ldr	r3, [r1, #0]
 8004bfe:	6825      	ldr	r5, [r4, #0]
 8004c00:	1d18      	adds	r0, r3, #4
 8004c02:	6008      	str	r0, [r1, #0]
 8004c04:	0628      	lsls	r0, r5, #24
 8004c06:	d501      	bpl.n	8004c0c <_printf_i+0xec>
 8004c08:	681d      	ldr	r5, [r3, #0]
 8004c0a:	e002      	b.n	8004c12 <_printf_i+0xf2>
 8004c0c:	0669      	lsls	r1, r5, #25
 8004c0e:	d5fb      	bpl.n	8004c08 <_printf_i+0xe8>
 8004c10:	881d      	ldrh	r5, [r3, #0]
 8004c12:	2f6f      	cmp	r7, #111	; 0x6f
 8004c14:	bf0c      	ite	eq
 8004c16:	2308      	moveq	r3, #8
 8004c18:	230a      	movne	r3, #10
 8004c1a:	4852      	ldr	r0, [pc, #328]	; (8004d64 <_printf_i+0x244>)
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c22:	6866      	ldr	r6, [r4, #4]
 8004c24:	2e00      	cmp	r6, #0
 8004c26:	bfa8      	it	ge
 8004c28:	6821      	ldrge	r1, [r4, #0]
 8004c2a:	60a6      	str	r6, [r4, #8]
 8004c2c:	bfa4      	itt	ge
 8004c2e:	f021 0104 	bicge.w	r1, r1, #4
 8004c32:	6021      	strge	r1, [r4, #0]
 8004c34:	b90d      	cbnz	r5, 8004c3a <_printf_i+0x11a>
 8004c36:	2e00      	cmp	r6, #0
 8004c38:	d04d      	beq.n	8004cd6 <_printf_i+0x1b6>
 8004c3a:	4616      	mov	r6, r2
 8004c3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c40:	fb03 5711 	mls	r7, r3, r1, r5
 8004c44:	5dc7      	ldrb	r7, [r0, r7]
 8004c46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c4a:	462f      	mov	r7, r5
 8004c4c:	42bb      	cmp	r3, r7
 8004c4e:	460d      	mov	r5, r1
 8004c50:	d9f4      	bls.n	8004c3c <_printf_i+0x11c>
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d10b      	bne.n	8004c6e <_printf_i+0x14e>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	07df      	lsls	r7, r3, #31
 8004c5a:	d508      	bpl.n	8004c6e <_printf_i+0x14e>
 8004c5c:	6923      	ldr	r3, [r4, #16]
 8004c5e:	6861      	ldr	r1, [r4, #4]
 8004c60:	4299      	cmp	r1, r3
 8004c62:	bfde      	ittt	le
 8004c64:	2330      	movle	r3, #48	; 0x30
 8004c66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c6e:	1b92      	subs	r2, r2, r6
 8004c70:	6122      	str	r2, [r4, #16]
 8004c72:	464b      	mov	r3, r9
 8004c74:	4621      	mov	r1, r4
 8004c76:	4640      	mov	r0, r8
 8004c78:	f8cd a000 	str.w	sl, [sp]
 8004c7c:	aa03      	add	r2, sp, #12
 8004c7e:	f7ff fedf 	bl	8004a40 <_printf_common>
 8004c82:	3001      	adds	r0, #1
 8004c84:	d14c      	bne.n	8004d20 <_printf_i+0x200>
 8004c86:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8a:	b004      	add	sp, #16
 8004c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c90:	4834      	ldr	r0, [pc, #208]	; (8004d64 <_printf_i+0x244>)
 8004c92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c96:	680e      	ldr	r6, [r1, #0]
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8004c9e:	061f      	lsls	r7, r3, #24
 8004ca0:	600e      	str	r6, [r1, #0]
 8004ca2:	d514      	bpl.n	8004cce <_printf_i+0x1ae>
 8004ca4:	07d9      	lsls	r1, r3, #31
 8004ca6:	bf44      	itt	mi
 8004ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8004cac:	6023      	strmi	r3, [r4, #0]
 8004cae:	b91d      	cbnz	r5, 8004cb8 <_printf_i+0x198>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	2310      	movs	r3, #16
 8004cba:	e7af      	b.n	8004c1c <_printf_i+0xfc>
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f043 0320 	orr.w	r3, r3, #32
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	2378      	movs	r3, #120	; 0x78
 8004cc6:	4828      	ldr	r0, [pc, #160]	; (8004d68 <_printf_i+0x248>)
 8004cc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ccc:	e7e3      	b.n	8004c96 <_printf_i+0x176>
 8004cce:	065e      	lsls	r6, r3, #25
 8004cd0:	bf48      	it	mi
 8004cd2:	b2ad      	uxthmi	r5, r5
 8004cd4:	e7e6      	b.n	8004ca4 <_printf_i+0x184>
 8004cd6:	4616      	mov	r6, r2
 8004cd8:	e7bb      	b.n	8004c52 <_printf_i+0x132>
 8004cda:	680b      	ldr	r3, [r1, #0]
 8004cdc:	6826      	ldr	r6, [r4, #0]
 8004cde:	1d1d      	adds	r5, r3, #4
 8004ce0:	6960      	ldr	r0, [r4, #20]
 8004ce2:	600d      	str	r5, [r1, #0]
 8004ce4:	0635      	lsls	r5, r6, #24
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	d501      	bpl.n	8004cee <_printf_i+0x1ce>
 8004cea:	6018      	str	r0, [r3, #0]
 8004cec:	e002      	b.n	8004cf4 <_printf_i+0x1d4>
 8004cee:	0671      	lsls	r1, r6, #25
 8004cf0:	d5fb      	bpl.n	8004cea <_printf_i+0x1ca>
 8004cf2:	8018      	strh	r0, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	4616      	mov	r6, r2
 8004cf8:	6123      	str	r3, [r4, #16]
 8004cfa:	e7ba      	b.n	8004c72 <_printf_i+0x152>
 8004cfc:	680b      	ldr	r3, [r1, #0]
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	600a      	str	r2, [r1, #0]
 8004d02:	681e      	ldr	r6, [r3, #0]
 8004d04:	2100      	movs	r1, #0
 8004d06:	4630      	mov	r0, r6
 8004d08:	6862      	ldr	r2, [r4, #4]
 8004d0a:	f000 fb15 	bl	8005338 <memchr>
 8004d0e:	b108      	cbz	r0, 8004d14 <_printf_i+0x1f4>
 8004d10:	1b80      	subs	r0, r0, r6
 8004d12:	6060      	str	r0, [r4, #4]
 8004d14:	6863      	ldr	r3, [r4, #4]
 8004d16:	6123      	str	r3, [r4, #16]
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1e:	e7a8      	b.n	8004c72 <_printf_i+0x152>
 8004d20:	4632      	mov	r2, r6
 8004d22:	4649      	mov	r1, r9
 8004d24:	4640      	mov	r0, r8
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	47d0      	blx	sl
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d0ab      	beq.n	8004c86 <_printf_i+0x166>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	079b      	lsls	r3, r3, #30
 8004d32:	d413      	bmi.n	8004d5c <_printf_i+0x23c>
 8004d34:	68e0      	ldr	r0, [r4, #12]
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	4298      	cmp	r0, r3
 8004d3a:	bfb8      	it	lt
 8004d3c:	4618      	movlt	r0, r3
 8004d3e:	e7a4      	b.n	8004c8a <_printf_i+0x16a>
 8004d40:	2301      	movs	r3, #1
 8004d42:	4632      	mov	r2, r6
 8004d44:	4649      	mov	r1, r9
 8004d46:	4640      	mov	r0, r8
 8004d48:	47d0      	blx	sl
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d09b      	beq.n	8004c86 <_printf_i+0x166>
 8004d4e:	3501      	adds	r5, #1
 8004d50:	68e3      	ldr	r3, [r4, #12]
 8004d52:	9903      	ldr	r1, [sp, #12]
 8004d54:	1a5b      	subs	r3, r3, r1
 8004d56:	42ab      	cmp	r3, r5
 8004d58:	dcf2      	bgt.n	8004d40 <_printf_i+0x220>
 8004d5a:	e7eb      	b.n	8004d34 <_printf_i+0x214>
 8004d5c:	2500      	movs	r5, #0
 8004d5e:	f104 0619 	add.w	r6, r4, #25
 8004d62:	e7f5      	b.n	8004d50 <_printf_i+0x230>
 8004d64:	0800575a 	.word	0x0800575a
 8004d68:	0800576b 	.word	0x0800576b

08004d6c <__swbuf_r>:
 8004d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6e:	460e      	mov	r6, r1
 8004d70:	4614      	mov	r4, r2
 8004d72:	4605      	mov	r5, r0
 8004d74:	b118      	cbz	r0, 8004d7e <__swbuf_r+0x12>
 8004d76:	6983      	ldr	r3, [r0, #24]
 8004d78:	b90b      	cbnz	r3, 8004d7e <__swbuf_r+0x12>
 8004d7a:	f000 f9d9 	bl	8005130 <__sinit>
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <__swbuf_r+0x98>)
 8004d80:	429c      	cmp	r4, r3
 8004d82:	d12b      	bne.n	8004ddc <__swbuf_r+0x70>
 8004d84:	686c      	ldr	r4, [r5, #4]
 8004d86:	69a3      	ldr	r3, [r4, #24]
 8004d88:	60a3      	str	r3, [r4, #8]
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	071a      	lsls	r2, r3, #28
 8004d8e:	d52f      	bpl.n	8004df0 <__swbuf_r+0x84>
 8004d90:	6923      	ldr	r3, [r4, #16]
 8004d92:	b36b      	cbz	r3, 8004df0 <__swbuf_r+0x84>
 8004d94:	6923      	ldr	r3, [r4, #16]
 8004d96:	6820      	ldr	r0, [r4, #0]
 8004d98:	b2f6      	uxtb	r6, r6
 8004d9a:	1ac0      	subs	r0, r0, r3
 8004d9c:	6963      	ldr	r3, [r4, #20]
 8004d9e:	4637      	mov	r7, r6
 8004da0:	4283      	cmp	r3, r0
 8004da2:	dc04      	bgt.n	8004dae <__swbuf_r+0x42>
 8004da4:	4621      	mov	r1, r4
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 f92e 	bl	8005008 <_fflush_r>
 8004dac:	bb30      	cbnz	r0, 8004dfc <__swbuf_r+0x90>
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	3001      	adds	r0, #1
 8004db2:	3b01      	subs	r3, #1
 8004db4:	60a3      	str	r3, [r4, #8]
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	6022      	str	r2, [r4, #0]
 8004dbc:	701e      	strb	r6, [r3, #0]
 8004dbe:	6963      	ldr	r3, [r4, #20]
 8004dc0:	4283      	cmp	r3, r0
 8004dc2:	d004      	beq.n	8004dce <__swbuf_r+0x62>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	07db      	lsls	r3, r3, #31
 8004dc8:	d506      	bpl.n	8004dd8 <__swbuf_r+0x6c>
 8004dca:	2e0a      	cmp	r6, #10
 8004dcc:	d104      	bne.n	8004dd8 <__swbuf_r+0x6c>
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f919 	bl	8005008 <_fflush_r>
 8004dd6:	b988      	cbnz	r0, 8004dfc <__swbuf_r+0x90>
 8004dd8:	4638      	mov	r0, r7
 8004dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <__swbuf_r+0x9c>)
 8004dde:	429c      	cmp	r4, r3
 8004de0:	d101      	bne.n	8004de6 <__swbuf_r+0x7a>
 8004de2:	68ac      	ldr	r4, [r5, #8]
 8004de4:	e7cf      	b.n	8004d86 <__swbuf_r+0x1a>
 8004de6:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <__swbuf_r+0xa0>)
 8004de8:	429c      	cmp	r4, r3
 8004dea:	bf08      	it	eq
 8004dec:	68ec      	ldreq	r4, [r5, #12]
 8004dee:	e7ca      	b.n	8004d86 <__swbuf_r+0x1a>
 8004df0:	4621      	mov	r1, r4
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 f80c 	bl	8004e10 <__swsetup_r>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d0cb      	beq.n	8004d94 <__swbuf_r+0x28>
 8004dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8004e00:	e7ea      	b.n	8004dd8 <__swbuf_r+0x6c>
 8004e02:	bf00      	nop
 8004e04:	0800579c 	.word	0x0800579c
 8004e08:	080057bc 	.word	0x080057bc
 8004e0c:	0800577c 	.word	0x0800577c

08004e10 <__swsetup_r>:
 8004e10:	4b32      	ldr	r3, [pc, #200]	; (8004edc <__swsetup_r+0xcc>)
 8004e12:	b570      	push	{r4, r5, r6, lr}
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	4606      	mov	r6, r0
 8004e18:	460c      	mov	r4, r1
 8004e1a:	b125      	cbz	r5, 8004e26 <__swsetup_r+0x16>
 8004e1c:	69ab      	ldr	r3, [r5, #24]
 8004e1e:	b913      	cbnz	r3, 8004e26 <__swsetup_r+0x16>
 8004e20:	4628      	mov	r0, r5
 8004e22:	f000 f985 	bl	8005130 <__sinit>
 8004e26:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <__swsetup_r+0xd0>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	d10f      	bne.n	8004e4c <__swsetup_r+0x3c>
 8004e2c:	686c      	ldr	r4, [r5, #4]
 8004e2e:	89a3      	ldrh	r3, [r4, #12]
 8004e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e34:	0719      	lsls	r1, r3, #28
 8004e36:	d42c      	bmi.n	8004e92 <__swsetup_r+0x82>
 8004e38:	06dd      	lsls	r5, r3, #27
 8004e3a:	d411      	bmi.n	8004e60 <__swsetup_r+0x50>
 8004e3c:	2309      	movs	r3, #9
 8004e3e:	6033      	str	r3, [r6, #0]
 8004e40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	e03e      	b.n	8004eca <__swsetup_r+0xba>
 8004e4c:	4b25      	ldr	r3, [pc, #148]	; (8004ee4 <__swsetup_r+0xd4>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d101      	bne.n	8004e56 <__swsetup_r+0x46>
 8004e52:	68ac      	ldr	r4, [r5, #8]
 8004e54:	e7eb      	b.n	8004e2e <__swsetup_r+0x1e>
 8004e56:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <__swsetup_r+0xd8>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	bf08      	it	eq
 8004e5c:	68ec      	ldreq	r4, [r5, #12]
 8004e5e:	e7e6      	b.n	8004e2e <__swsetup_r+0x1e>
 8004e60:	0758      	lsls	r0, r3, #29
 8004e62:	d512      	bpl.n	8004e8a <__swsetup_r+0x7a>
 8004e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e66:	b141      	cbz	r1, 8004e7a <__swsetup_r+0x6a>
 8004e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	d002      	beq.n	8004e76 <__swsetup_r+0x66>
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff faaf 	bl	80043d4 <_free_r>
 8004e76:	2300      	movs	r3, #0
 8004e78:	6363      	str	r3, [r4, #52]	; 0x34
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	2300      	movs	r3, #0
 8004e84:	6063      	str	r3, [r4, #4]
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	b94b      	cbnz	r3, 8004eaa <__swsetup_r+0x9a>
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d003      	beq.n	8004eaa <__swsetup_r+0x9a>
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 fa07 	bl	80052b8 <__smakebuf_r>
 8004eaa:	89a0      	ldrh	r0, [r4, #12]
 8004eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004eb0:	f010 0301 	ands.w	r3, r0, #1
 8004eb4:	d00a      	beq.n	8004ecc <__swsetup_r+0xbc>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60a3      	str	r3, [r4, #8]
 8004eba:	6963      	ldr	r3, [r4, #20]
 8004ebc:	425b      	negs	r3, r3
 8004ebe:	61a3      	str	r3, [r4, #24]
 8004ec0:	6923      	ldr	r3, [r4, #16]
 8004ec2:	b943      	cbnz	r3, 8004ed6 <__swsetup_r+0xc6>
 8004ec4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ec8:	d1ba      	bne.n	8004e40 <__swsetup_r+0x30>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	0781      	lsls	r1, r0, #30
 8004ece:	bf58      	it	pl
 8004ed0:	6963      	ldrpl	r3, [r4, #20]
 8004ed2:	60a3      	str	r3, [r4, #8]
 8004ed4:	e7f4      	b.n	8004ec0 <__swsetup_r+0xb0>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e7f7      	b.n	8004eca <__swsetup_r+0xba>
 8004eda:	bf00      	nop
 8004edc:	2000000c 	.word	0x2000000c
 8004ee0:	0800579c 	.word	0x0800579c
 8004ee4:	080057bc 	.word	0x080057bc
 8004ee8:	0800577c 	.word	0x0800577c

08004eec <abort>:
 8004eec:	2006      	movs	r0, #6
 8004eee:	b508      	push	{r3, lr}
 8004ef0:	f000 fa58 	bl	80053a4 <raise>
 8004ef4:	2001      	movs	r0, #1
 8004ef6:	f7fc f87e 	bl	8000ff6 <_exit>
	...

08004efc <__sflush_r>:
 8004efc:	898a      	ldrh	r2, [r1, #12]
 8004efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f02:	4605      	mov	r5, r0
 8004f04:	0710      	lsls	r0, r2, #28
 8004f06:	460c      	mov	r4, r1
 8004f08:	d458      	bmi.n	8004fbc <__sflush_r+0xc0>
 8004f0a:	684b      	ldr	r3, [r1, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	dc05      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	dc02      	bgt.n	8004f1c <__sflush_r+0x20>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d0f9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f22:	2300      	movs	r3, #0
 8004f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f28:	682f      	ldr	r7, [r5, #0]
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	d032      	beq.n	8004f94 <__sflush_r+0x98>
 8004f2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	075a      	lsls	r2, r3, #29
 8004f34:	d505      	bpl.n	8004f42 <__sflush_r+0x46>
 8004f36:	6863      	ldr	r3, [r4, #4]
 8004f38:	1ac0      	subs	r0, r0, r3
 8004f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f3c:	b10b      	cbz	r3, 8004f42 <__sflush_r+0x46>
 8004f3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f40:	1ac0      	subs	r0, r0, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	4602      	mov	r2, r0
 8004f46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f48:	4628      	mov	r0, r5
 8004f4a:	6a21      	ldr	r1, [r4, #32]
 8004f4c:	47b0      	blx	r6
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	89a3      	ldrh	r3, [r4, #12]
 8004f52:	d106      	bne.n	8004f62 <__sflush_r+0x66>
 8004f54:	6829      	ldr	r1, [r5, #0]
 8004f56:	291d      	cmp	r1, #29
 8004f58:	d82c      	bhi.n	8004fb4 <__sflush_r+0xb8>
 8004f5a:	4a2a      	ldr	r2, [pc, #168]	; (8005004 <__sflush_r+0x108>)
 8004f5c:	40ca      	lsrs	r2, r1
 8004f5e:	07d6      	lsls	r6, r2, #31
 8004f60:	d528      	bpl.n	8004fb4 <__sflush_r+0xb8>
 8004f62:	2200      	movs	r2, #0
 8004f64:	6062      	str	r2, [r4, #4]
 8004f66:	6922      	ldr	r2, [r4, #16]
 8004f68:	04d9      	lsls	r1, r3, #19
 8004f6a:	6022      	str	r2, [r4, #0]
 8004f6c:	d504      	bpl.n	8004f78 <__sflush_r+0x7c>
 8004f6e:	1c42      	adds	r2, r0, #1
 8004f70:	d101      	bne.n	8004f76 <__sflush_r+0x7a>
 8004f72:	682b      	ldr	r3, [r5, #0]
 8004f74:	b903      	cbnz	r3, 8004f78 <__sflush_r+0x7c>
 8004f76:	6560      	str	r0, [r4, #84]	; 0x54
 8004f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7a:	602f      	str	r7, [r5, #0]
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d0ca      	beq.n	8004f16 <__sflush_r+0x1a>
 8004f80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f84:	4299      	cmp	r1, r3
 8004f86:	d002      	beq.n	8004f8e <__sflush_r+0x92>
 8004f88:	4628      	mov	r0, r5
 8004f8a:	f7ff fa23 	bl	80043d4 <_free_r>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	6360      	str	r0, [r4, #52]	; 0x34
 8004f92:	e7c1      	b.n	8004f18 <__sflush_r+0x1c>
 8004f94:	6a21      	ldr	r1, [r4, #32]
 8004f96:	2301      	movs	r3, #1
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b0      	blx	r6
 8004f9c:	1c41      	adds	r1, r0, #1
 8004f9e:	d1c7      	bne.n	8004f30 <__sflush_r+0x34>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0c4      	beq.n	8004f30 <__sflush_r+0x34>
 8004fa6:	2b1d      	cmp	r3, #29
 8004fa8:	d001      	beq.n	8004fae <__sflush_r+0xb2>
 8004faa:	2b16      	cmp	r3, #22
 8004fac:	d101      	bne.n	8004fb2 <__sflush_r+0xb6>
 8004fae:	602f      	str	r7, [r5, #0]
 8004fb0:	e7b1      	b.n	8004f16 <__sflush_r+0x1a>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb8:	81a3      	strh	r3, [r4, #12]
 8004fba:	e7ad      	b.n	8004f18 <__sflush_r+0x1c>
 8004fbc:	690f      	ldr	r7, [r1, #16]
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d0a9      	beq.n	8004f16 <__sflush_r+0x1a>
 8004fc2:	0793      	lsls	r3, r2, #30
 8004fc4:	bf18      	it	ne
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	680e      	ldr	r6, [r1, #0]
 8004fca:	bf08      	it	eq
 8004fcc:	694b      	ldreq	r3, [r1, #20]
 8004fce:	eba6 0807 	sub.w	r8, r6, r7
 8004fd2:	600f      	str	r7, [r1, #0]
 8004fd4:	608b      	str	r3, [r1, #8]
 8004fd6:	f1b8 0f00 	cmp.w	r8, #0
 8004fda:	dd9c      	ble.n	8004f16 <__sflush_r+0x1a>
 8004fdc:	4643      	mov	r3, r8
 8004fde:	463a      	mov	r2, r7
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	6a21      	ldr	r1, [r4, #32]
 8004fe4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fe6:	47b0      	blx	r6
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	dc06      	bgt.n	8004ffa <__sflush_r+0xfe>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	e78e      	b.n	8004f18 <__sflush_r+0x1c>
 8004ffa:	4407      	add	r7, r0
 8004ffc:	eba8 0800 	sub.w	r8, r8, r0
 8005000:	e7e9      	b.n	8004fd6 <__sflush_r+0xda>
 8005002:	bf00      	nop
 8005004:	20400001 	.word	0x20400001

08005008 <_fflush_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	690b      	ldr	r3, [r1, #16]
 800500c:	4605      	mov	r5, r0
 800500e:	460c      	mov	r4, r1
 8005010:	b913      	cbnz	r3, 8005018 <_fflush_r+0x10>
 8005012:	2500      	movs	r5, #0
 8005014:	4628      	mov	r0, r5
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	b118      	cbz	r0, 8005022 <_fflush_r+0x1a>
 800501a:	6983      	ldr	r3, [r0, #24]
 800501c:	b90b      	cbnz	r3, 8005022 <_fflush_r+0x1a>
 800501e:	f000 f887 	bl	8005130 <__sinit>
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <_fflush_r+0x6c>)
 8005024:	429c      	cmp	r4, r3
 8005026:	d11b      	bne.n	8005060 <_fflush_r+0x58>
 8005028:	686c      	ldr	r4, [r5, #4]
 800502a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ef      	beq.n	8005012 <_fflush_r+0xa>
 8005032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005034:	07d0      	lsls	r0, r2, #31
 8005036:	d404      	bmi.n	8005042 <_fflush_r+0x3a>
 8005038:	0599      	lsls	r1, r3, #22
 800503a:	d402      	bmi.n	8005042 <_fflush_r+0x3a>
 800503c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503e:	f000 f915 	bl	800526c <__retarget_lock_acquire_recursive>
 8005042:	4628      	mov	r0, r5
 8005044:	4621      	mov	r1, r4
 8005046:	f7ff ff59 	bl	8004efc <__sflush_r>
 800504a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800504c:	4605      	mov	r5, r0
 800504e:	07da      	lsls	r2, r3, #31
 8005050:	d4e0      	bmi.n	8005014 <_fflush_r+0xc>
 8005052:	89a3      	ldrh	r3, [r4, #12]
 8005054:	059b      	lsls	r3, r3, #22
 8005056:	d4dd      	bmi.n	8005014 <_fflush_r+0xc>
 8005058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800505a:	f000 f908 	bl	800526e <__retarget_lock_release_recursive>
 800505e:	e7d9      	b.n	8005014 <_fflush_r+0xc>
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <_fflush_r+0x70>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d101      	bne.n	800506a <_fflush_r+0x62>
 8005066:	68ac      	ldr	r4, [r5, #8]
 8005068:	e7df      	b.n	800502a <_fflush_r+0x22>
 800506a:	4b04      	ldr	r3, [pc, #16]	; (800507c <_fflush_r+0x74>)
 800506c:	429c      	cmp	r4, r3
 800506e:	bf08      	it	eq
 8005070:	68ec      	ldreq	r4, [r5, #12]
 8005072:	e7da      	b.n	800502a <_fflush_r+0x22>
 8005074:	0800579c 	.word	0x0800579c
 8005078:	080057bc 	.word	0x080057bc
 800507c:	0800577c 	.word	0x0800577c

08005080 <std>:
 8005080:	2300      	movs	r3, #0
 8005082:	b510      	push	{r4, lr}
 8005084:	4604      	mov	r4, r0
 8005086:	e9c0 3300 	strd	r3, r3, [r0]
 800508a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800508e:	6083      	str	r3, [r0, #8]
 8005090:	8181      	strh	r1, [r0, #12]
 8005092:	6643      	str	r3, [r0, #100]	; 0x64
 8005094:	81c2      	strh	r2, [r0, #14]
 8005096:	6183      	str	r3, [r0, #24]
 8005098:	4619      	mov	r1, r3
 800509a:	2208      	movs	r2, #8
 800509c:	305c      	adds	r0, #92	; 0x5c
 800509e:	f7ff f991 	bl	80043c4 <memset>
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <std+0x38>)
 80050a4:	6224      	str	r4, [r4, #32]
 80050a6:	6263      	str	r3, [r4, #36]	; 0x24
 80050a8:	4b04      	ldr	r3, [pc, #16]	; (80050bc <std+0x3c>)
 80050aa:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ac:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <std+0x40>)
 80050ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <std+0x44>)
 80050b2:	6323      	str	r3, [r4, #48]	; 0x30
 80050b4:	bd10      	pop	{r4, pc}
 80050b6:	bf00      	nop
 80050b8:	080053dd 	.word	0x080053dd
 80050bc:	080053ff 	.word	0x080053ff
 80050c0:	08005437 	.word	0x08005437
 80050c4:	0800545b 	.word	0x0800545b

080050c8 <_cleanup_r>:
 80050c8:	4901      	ldr	r1, [pc, #4]	; (80050d0 <_cleanup_r+0x8>)
 80050ca:	f000 b8af 	b.w	800522c <_fwalk_reent>
 80050ce:	bf00      	nop
 80050d0:	08005009 	.word	0x08005009

080050d4 <__sfmoreglue>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	2568      	movs	r5, #104	; 0x68
 80050d8:	1e4a      	subs	r2, r1, #1
 80050da:	4355      	muls	r5, r2
 80050dc:	460e      	mov	r6, r1
 80050de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050e2:	f7ff f9c3 	bl	800446c <_malloc_r>
 80050e6:	4604      	mov	r4, r0
 80050e8:	b140      	cbz	r0, 80050fc <__sfmoreglue+0x28>
 80050ea:	2100      	movs	r1, #0
 80050ec:	e9c0 1600 	strd	r1, r6, [r0]
 80050f0:	300c      	adds	r0, #12
 80050f2:	60a0      	str	r0, [r4, #8]
 80050f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80050f8:	f7ff f964 	bl	80043c4 <memset>
 80050fc:	4620      	mov	r0, r4
 80050fe:	bd70      	pop	{r4, r5, r6, pc}

08005100 <__sfp_lock_acquire>:
 8005100:	4801      	ldr	r0, [pc, #4]	; (8005108 <__sfp_lock_acquire+0x8>)
 8005102:	f000 b8b3 	b.w	800526c <__retarget_lock_acquire_recursive>
 8005106:	bf00      	nop
 8005108:	20000368 	.word	0x20000368

0800510c <__sfp_lock_release>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__sfp_lock_release+0x8>)
 800510e:	f000 b8ae 	b.w	800526e <__retarget_lock_release_recursive>
 8005112:	bf00      	nop
 8005114:	20000368 	.word	0x20000368

08005118 <__sinit_lock_acquire>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__sinit_lock_acquire+0x8>)
 800511a:	f000 b8a7 	b.w	800526c <__retarget_lock_acquire_recursive>
 800511e:	bf00      	nop
 8005120:	20000363 	.word	0x20000363

08005124 <__sinit_lock_release>:
 8005124:	4801      	ldr	r0, [pc, #4]	; (800512c <__sinit_lock_release+0x8>)
 8005126:	f000 b8a2 	b.w	800526e <__retarget_lock_release_recursive>
 800512a:	bf00      	nop
 800512c:	20000363 	.word	0x20000363

08005130 <__sinit>:
 8005130:	b510      	push	{r4, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	f7ff fff0 	bl	8005118 <__sinit_lock_acquire>
 8005138:	69a3      	ldr	r3, [r4, #24]
 800513a:	b11b      	cbz	r3, 8005144 <__sinit+0x14>
 800513c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005140:	f7ff bff0 	b.w	8005124 <__sinit_lock_release>
 8005144:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005148:	6523      	str	r3, [r4, #80]	; 0x50
 800514a:	4b13      	ldr	r3, [pc, #76]	; (8005198 <__sinit+0x68>)
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <__sinit+0x6c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	62a2      	str	r2, [r4, #40]	; 0x28
 8005152:	42a3      	cmp	r3, r4
 8005154:	bf08      	it	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	4620      	mov	r0, r4
 800515a:	bf08      	it	eq
 800515c:	61a3      	streq	r3, [r4, #24]
 800515e:	f000 f81f 	bl	80051a0 <__sfp>
 8005162:	6060      	str	r0, [r4, #4]
 8005164:	4620      	mov	r0, r4
 8005166:	f000 f81b 	bl	80051a0 <__sfp>
 800516a:	60a0      	str	r0, [r4, #8]
 800516c:	4620      	mov	r0, r4
 800516e:	f000 f817 	bl	80051a0 <__sfp>
 8005172:	2200      	movs	r2, #0
 8005174:	2104      	movs	r1, #4
 8005176:	60e0      	str	r0, [r4, #12]
 8005178:	6860      	ldr	r0, [r4, #4]
 800517a:	f7ff ff81 	bl	8005080 <std>
 800517e:	2201      	movs	r2, #1
 8005180:	2109      	movs	r1, #9
 8005182:	68a0      	ldr	r0, [r4, #8]
 8005184:	f7ff ff7c 	bl	8005080 <std>
 8005188:	2202      	movs	r2, #2
 800518a:	2112      	movs	r1, #18
 800518c:	68e0      	ldr	r0, [r4, #12]
 800518e:	f7ff ff77 	bl	8005080 <std>
 8005192:	2301      	movs	r3, #1
 8005194:	61a3      	str	r3, [r4, #24]
 8005196:	e7d1      	b.n	800513c <__sinit+0xc>
 8005198:	08005590 	.word	0x08005590
 800519c:	080050c9 	.word	0x080050c9

080051a0 <__sfp>:
 80051a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a2:	4607      	mov	r7, r0
 80051a4:	f7ff ffac 	bl	8005100 <__sfp_lock_acquire>
 80051a8:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <__sfp+0x84>)
 80051aa:	681e      	ldr	r6, [r3, #0]
 80051ac:	69b3      	ldr	r3, [r6, #24]
 80051ae:	b913      	cbnz	r3, 80051b6 <__sfp+0x16>
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7ff ffbd 	bl	8005130 <__sinit>
 80051b6:	3648      	adds	r6, #72	; 0x48
 80051b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051bc:	3b01      	subs	r3, #1
 80051be:	d503      	bpl.n	80051c8 <__sfp+0x28>
 80051c0:	6833      	ldr	r3, [r6, #0]
 80051c2:	b30b      	cbz	r3, 8005208 <__sfp+0x68>
 80051c4:	6836      	ldr	r6, [r6, #0]
 80051c6:	e7f7      	b.n	80051b8 <__sfp+0x18>
 80051c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051cc:	b9d5      	cbnz	r5, 8005204 <__sfp+0x64>
 80051ce:	4b16      	ldr	r3, [pc, #88]	; (8005228 <__sfp+0x88>)
 80051d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051d4:	60e3      	str	r3, [r4, #12]
 80051d6:	6665      	str	r5, [r4, #100]	; 0x64
 80051d8:	f000 f847 	bl	800526a <__retarget_lock_init_recursive>
 80051dc:	f7ff ff96 	bl	800510c <__sfp_lock_release>
 80051e0:	2208      	movs	r2, #8
 80051e2:	4629      	mov	r1, r5
 80051e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051ec:	6025      	str	r5, [r4, #0]
 80051ee:	61a5      	str	r5, [r4, #24]
 80051f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051f4:	f7ff f8e6 	bl	80043c4 <memset>
 80051f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80051fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005200:	4620      	mov	r0, r4
 8005202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005204:	3468      	adds	r4, #104	; 0x68
 8005206:	e7d9      	b.n	80051bc <__sfp+0x1c>
 8005208:	2104      	movs	r1, #4
 800520a:	4638      	mov	r0, r7
 800520c:	f7ff ff62 	bl	80050d4 <__sfmoreglue>
 8005210:	4604      	mov	r4, r0
 8005212:	6030      	str	r0, [r6, #0]
 8005214:	2800      	cmp	r0, #0
 8005216:	d1d5      	bne.n	80051c4 <__sfp+0x24>
 8005218:	f7ff ff78 	bl	800510c <__sfp_lock_release>
 800521c:	230c      	movs	r3, #12
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	e7ee      	b.n	8005200 <__sfp+0x60>
 8005222:	bf00      	nop
 8005224:	08005590 	.word	0x08005590
 8005228:	ffff0001 	.word	0xffff0001

0800522c <_fwalk_reent>:
 800522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005230:	4606      	mov	r6, r0
 8005232:	4688      	mov	r8, r1
 8005234:	2700      	movs	r7, #0
 8005236:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800523a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800523e:	f1b9 0901 	subs.w	r9, r9, #1
 8005242:	d505      	bpl.n	8005250 <_fwalk_reent+0x24>
 8005244:	6824      	ldr	r4, [r4, #0]
 8005246:	2c00      	cmp	r4, #0
 8005248:	d1f7      	bne.n	800523a <_fwalk_reent+0xe>
 800524a:	4638      	mov	r0, r7
 800524c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005250:	89ab      	ldrh	r3, [r5, #12]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d907      	bls.n	8005266 <_fwalk_reent+0x3a>
 8005256:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800525a:	3301      	adds	r3, #1
 800525c:	d003      	beq.n	8005266 <_fwalk_reent+0x3a>
 800525e:	4629      	mov	r1, r5
 8005260:	4630      	mov	r0, r6
 8005262:	47c0      	blx	r8
 8005264:	4307      	orrs	r7, r0
 8005266:	3568      	adds	r5, #104	; 0x68
 8005268:	e7e9      	b.n	800523e <_fwalk_reent+0x12>

0800526a <__retarget_lock_init_recursive>:
 800526a:	4770      	bx	lr

0800526c <__retarget_lock_acquire_recursive>:
 800526c:	4770      	bx	lr

0800526e <__retarget_lock_release_recursive>:
 800526e:	4770      	bx	lr

08005270 <__swhatbuf_r>:
 8005270:	b570      	push	{r4, r5, r6, lr}
 8005272:	460e      	mov	r6, r1
 8005274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005278:	4614      	mov	r4, r2
 800527a:	2900      	cmp	r1, #0
 800527c:	461d      	mov	r5, r3
 800527e:	b096      	sub	sp, #88	; 0x58
 8005280:	da07      	bge.n	8005292 <__swhatbuf_r+0x22>
 8005282:	2300      	movs	r3, #0
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	89b3      	ldrh	r3, [r6, #12]
 8005288:	061a      	lsls	r2, r3, #24
 800528a:	d410      	bmi.n	80052ae <__swhatbuf_r+0x3e>
 800528c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005290:	e00e      	b.n	80052b0 <__swhatbuf_r+0x40>
 8005292:	466a      	mov	r2, sp
 8005294:	f000 f908 	bl	80054a8 <_fstat_r>
 8005298:	2800      	cmp	r0, #0
 800529a:	dbf2      	blt.n	8005282 <__swhatbuf_r+0x12>
 800529c:	9a01      	ldr	r2, [sp, #4]
 800529e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052a6:	425a      	negs	r2, r3
 80052a8:	415a      	adcs	r2, r3
 80052aa:	602a      	str	r2, [r5, #0]
 80052ac:	e7ee      	b.n	800528c <__swhatbuf_r+0x1c>
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	2000      	movs	r0, #0
 80052b2:	6023      	str	r3, [r4, #0]
 80052b4:	b016      	add	sp, #88	; 0x58
 80052b6:	bd70      	pop	{r4, r5, r6, pc}

080052b8 <__smakebuf_r>:
 80052b8:	898b      	ldrh	r3, [r1, #12]
 80052ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052bc:	079d      	lsls	r5, r3, #30
 80052be:	4606      	mov	r6, r0
 80052c0:	460c      	mov	r4, r1
 80052c2:	d507      	bpl.n	80052d4 <__smakebuf_r+0x1c>
 80052c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	6123      	str	r3, [r4, #16]
 80052cc:	2301      	movs	r3, #1
 80052ce:	6163      	str	r3, [r4, #20]
 80052d0:	b002      	add	sp, #8
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
 80052d4:	466a      	mov	r2, sp
 80052d6:	ab01      	add	r3, sp, #4
 80052d8:	f7ff ffca 	bl	8005270 <__swhatbuf_r>
 80052dc:	9900      	ldr	r1, [sp, #0]
 80052de:	4605      	mov	r5, r0
 80052e0:	4630      	mov	r0, r6
 80052e2:	f7ff f8c3 	bl	800446c <_malloc_r>
 80052e6:	b948      	cbnz	r0, 80052fc <__smakebuf_r+0x44>
 80052e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ec:	059a      	lsls	r2, r3, #22
 80052ee:	d4ef      	bmi.n	80052d0 <__smakebuf_r+0x18>
 80052f0:	f023 0303 	bic.w	r3, r3, #3
 80052f4:	f043 0302 	orr.w	r3, r3, #2
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	e7e3      	b.n	80052c4 <__smakebuf_r+0xc>
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <__smakebuf_r+0x7c>)
 80052fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	6020      	str	r0, [r4, #0]
 8005304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005308:	81a3      	strh	r3, [r4, #12]
 800530a:	9b00      	ldr	r3, [sp, #0]
 800530c:	6120      	str	r0, [r4, #16]
 800530e:	6163      	str	r3, [r4, #20]
 8005310:	9b01      	ldr	r3, [sp, #4]
 8005312:	b15b      	cbz	r3, 800532c <__smakebuf_r+0x74>
 8005314:	4630      	mov	r0, r6
 8005316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800531a:	f000 f8d7 	bl	80054cc <_isatty_r>
 800531e:	b128      	cbz	r0, 800532c <__smakebuf_r+0x74>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	f023 0303 	bic.w	r3, r3, #3
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	89a0      	ldrh	r0, [r4, #12]
 800532e:	4305      	orrs	r5, r0
 8005330:	81a5      	strh	r5, [r4, #12]
 8005332:	e7cd      	b.n	80052d0 <__smakebuf_r+0x18>
 8005334:	080050c9 	.word	0x080050c9

08005338 <memchr>:
 8005338:	4603      	mov	r3, r0
 800533a:	b510      	push	{r4, lr}
 800533c:	b2c9      	uxtb	r1, r1
 800533e:	4402      	add	r2, r0
 8005340:	4293      	cmp	r3, r2
 8005342:	4618      	mov	r0, r3
 8005344:	d101      	bne.n	800534a <memchr+0x12>
 8005346:	2000      	movs	r0, #0
 8005348:	e003      	b.n	8005352 <memchr+0x1a>
 800534a:	7804      	ldrb	r4, [r0, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	428c      	cmp	r4, r1
 8005350:	d1f6      	bne.n	8005340 <memchr+0x8>
 8005352:	bd10      	pop	{r4, pc}

08005354 <_raise_r>:
 8005354:	291f      	cmp	r1, #31
 8005356:	b538      	push	{r3, r4, r5, lr}
 8005358:	4604      	mov	r4, r0
 800535a:	460d      	mov	r5, r1
 800535c:	d904      	bls.n	8005368 <_raise_r+0x14>
 800535e:	2316      	movs	r3, #22
 8005360:	6003      	str	r3, [r0, #0]
 8005362:	f04f 30ff 	mov.w	r0, #4294967295
 8005366:	bd38      	pop	{r3, r4, r5, pc}
 8005368:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800536a:	b112      	cbz	r2, 8005372 <_raise_r+0x1e>
 800536c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005370:	b94b      	cbnz	r3, 8005386 <_raise_r+0x32>
 8005372:	4620      	mov	r0, r4
 8005374:	f000 f830 	bl	80053d8 <_getpid_r>
 8005378:	462a      	mov	r2, r5
 800537a:	4601      	mov	r1, r0
 800537c:	4620      	mov	r0, r4
 800537e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005382:	f000 b817 	b.w	80053b4 <_kill_r>
 8005386:	2b01      	cmp	r3, #1
 8005388:	d00a      	beq.n	80053a0 <_raise_r+0x4c>
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	d103      	bne.n	8005396 <_raise_r+0x42>
 800538e:	2316      	movs	r3, #22
 8005390:	6003      	str	r3, [r0, #0]
 8005392:	2001      	movs	r0, #1
 8005394:	e7e7      	b.n	8005366 <_raise_r+0x12>
 8005396:	2400      	movs	r4, #0
 8005398:	4628      	mov	r0, r5
 800539a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800539e:	4798      	blx	r3
 80053a0:	2000      	movs	r0, #0
 80053a2:	e7e0      	b.n	8005366 <_raise_r+0x12>

080053a4 <raise>:
 80053a4:	4b02      	ldr	r3, [pc, #8]	; (80053b0 <raise+0xc>)
 80053a6:	4601      	mov	r1, r0
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	f7ff bfd3 	b.w	8005354 <_raise_r>
 80053ae:	bf00      	nop
 80053b0:	2000000c 	.word	0x2000000c

080053b4 <_kill_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	2300      	movs	r3, #0
 80053b8:	4d06      	ldr	r5, [pc, #24]	; (80053d4 <_kill_r+0x20>)
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	602b      	str	r3, [r5, #0]
 80053c2:	f7fb fe08 	bl	8000fd6 <_kill>
 80053c6:	1c43      	adds	r3, r0, #1
 80053c8:	d102      	bne.n	80053d0 <_kill_r+0x1c>
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	b103      	cbz	r3, 80053d0 <_kill_r+0x1c>
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
 80053d2:	bf00      	nop
 80053d4:	2000035c 	.word	0x2000035c

080053d8 <_getpid_r>:
 80053d8:	f7fb bdf6 	b.w	8000fc8 <_getpid>

080053dc <__sread>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	460c      	mov	r4, r1
 80053e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e4:	f000 f894 	bl	8005510 <_read_r>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	bfab      	itete	ge
 80053ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053ee:	89a3      	ldrhlt	r3, [r4, #12]
 80053f0:	181b      	addge	r3, r3, r0
 80053f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053f6:	bfac      	ite	ge
 80053f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80053fa:	81a3      	strhlt	r3, [r4, #12]
 80053fc:	bd10      	pop	{r4, pc}

080053fe <__swrite>:
 80053fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005402:	461f      	mov	r7, r3
 8005404:	898b      	ldrh	r3, [r1, #12]
 8005406:	4605      	mov	r5, r0
 8005408:	05db      	lsls	r3, r3, #23
 800540a:	460c      	mov	r4, r1
 800540c:	4616      	mov	r6, r2
 800540e:	d505      	bpl.n	800541c <__swrite+0x1e>
 8005410:	2302      	movs	r3, #2
 8005412:	2200      	movs	r2, #0
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	f000 f868 	bl	80054ec <_lseek_r>
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	4632      	mov	r2, r6
 8005420:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005424:	81a3      	strh	r3, [r4, #12]
 8005426:	4628      	mov	r0, r5
 8005428:	463b      	mov	r3, r7
 800542a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005432:	f000 b817 	b.w	8005464 <_write_r>

08005436 <__sseek>:
 8005436:	b510      	push	{r4, lr}
 8005438:	460c      	mov	r4, r1
 800543a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800543e:	f000 f855 	bl	80054ec <_lseek_r>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	bf15      	itete	ne
 8005448:	6560      	strne	r0, [r4, #84]	; 0x54
 800544a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800544e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005452:	81a3      	strheq	r3, [r4, #12]
 8005454:	bf18      	it	ne
 8005456:	81a3      	strhne	r3, [r4, #12]
 8005458:	bd10      	pop	{r4, pc}

0800545a <__sclose>:
 800545a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545e:	f000 b813 	b.w	8005488 <_close_r>
	...

08005464 <_write_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4604      	mov	r4, r0
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	2200      	movs	r2, #0
 800546e:	4d05      	ldr	r5, [pc, #20]	; (8005484 <_write_r+0x20>)
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f7fb fde6 	bl	8001044 <_write>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_write_r+0x1e>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_write_r+0x1e>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	2000035c 	.word	0x2000035c

08005488 <_close_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	2300      	movs	r3, #0
 800548c:	4d05      	ldr	r5, [pc, #20]	; (80054a4 <_close_r+0x1c>)
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	602b      	str	r3, [r5, #0]
 8005494:	f7fb fdf2 	bl	800107c <_close>
 8005498:	1c43      	adds	r3, r0, #1
 800549a:	d102      	bne.n	80054a2 <_close_r+0x1a>
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	b103      	cbz	r3, 80054a2 <_close_r+0x1a>
 80054a0:	6023      	str	r3, [r4, #0]
 80054a2:	bd38      	pop	{r3, r4, r5, pc}
 80054a4:	2000035c 	.word	0x2000035c

080054a8 <_fstat_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	2300      	movs	r3, #0
 80054ac:	4d06      	ldr	r5, [pc, #24]	; (80054c8 <_fstat_r+0x20>)
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	4611      	mov	r1, r2
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	f7fb fdec 	bl	8001092 <_fstat>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	d102      	bne.n	80054c4 <_fstat_r+0x1c>
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	b103      	cbz	r3, 80054c4 <_fstat_r+0x1c>
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	bd38      	pop	{r3, r4, r5, pc}
 80054c6:	bf00      	nop
 80054c8:	2000035c 	.word	0x2000035c

080054cc <_isatty_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	2300      	movs	r3, #0
 80054d0:	4d05      	ldr	r5, [pc, #20]	; (80054e8 <_isatty_r+0x1c>)
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	602b      	str	r3, [r5, #0]
 80054d8:	f7fb fdea 	bl	80010b0 <_isatty>
 80054dc:	1c43      	adds	r3, r0, #1
 80054de:	d102      	bne.n	80054e6 <_isatty_r+0x1a>
 80054e0:	682b      	ldr	r3, [r5, #0]
 80054e2:	b103      	cbz	r3, 80054e6 <_isatty_r+0x1a>
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	bd38      	pop	{r3, r4, r5, pc}
 80054e8:	2000035c 	.word	0x2000035c

080054ec <_lseek_r>:
 80054ec:	b538      	push	{r3, r4, r5, lr}
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	2200      	movs	r2, #0
 80054f6:	4d05      	ldr	r5, [pc, #20]	; (800550c <_lseek_r+0x20>)
 80054f8:	602a      	str	r2, [r5, #0]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f7fb fde2 	bl	80010c4 <_lseek>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_lseek_r+0x1e>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_lseek_r+0x1e>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	2000035c 	.word	0x2000035c

08005510 <_read_r>:
 8005510:	b538      	push	{r3, r4, r5, lr}
 8005512:	4604      	mov	r4, r0
 8005514:	4608      	mov	r0, r1
 8005516:	4611      	mov	r1, r2
 8005518:	2200      	movs	r2, #0
 800551a:	4d05      	ldr	r5, [pc, #20]	; (8005530 <_read_r+0x20>)
 800551c:	602a      	str	r2, [r5, #0]
 800551e:	461a      	mov	r2, r3
 8005520:	f7fb fd73 	bl	800100a <_read>
 8005524:	1c43      	adds	r3, r0, #1
 8005526:	d102      	bne.n	800552e <_read_r+0x1e>
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	b103      	cbz	r3, 800552e <_read_r+0x1e>
 800552c:	6023      	str	r3, [r4, #0]
 800552e:	bd38      	pop	{r3, r4, r5, pc}
 8005530:	2000035c 	.word	0x2000035c

08005534 <_init>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr

08005540 <_fini>:
 8005540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005542:	bf00      	nop
 8005544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005546:	bc08      	pop	{r3}
 8005548:	469e      	mov	lr, r3
 800554a:	4770      	bx	lr
