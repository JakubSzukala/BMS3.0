
can_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f08  08004f08  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004f08  08004f08  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f08  08004f08  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000070  08004f80  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08004f80  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ea5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c39  00000000  00000000  00033f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00036b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  00037a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f23  00000000  00000000  00038800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010785  00000000  00000000  00052723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ea3c  00000000  00000000  00062ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f18e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  000f1938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c70 	.word	0x08004c70

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004c70 	.word	0x08004c70

0800014c <BqPack_StructInit>:
 *      Author: bursk
 */
#include "battery_pack.h"

void BqPack_StructInit(bq_pack *pack)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	pack -> voltage = 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
	pack -> temperature1 = 0;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	809a      	strh	r2, [r3, #4]
	pack -> temperature2 = 0;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	80da      	strh	r2, [r3, #6]
	pack -> lowest_cell_volts = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	811a      	strh	r2, [r3, #8]
	pack -> highest_cell_volts = 0;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	815a      	strh	r2, [r3, #10]
	pack -> op_mode = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	731a      	strb	r2, [r3, #12]
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
	...

08000184 <BqPack_StructUpdate>:

void BqPack_StructUpdate(bq_pack *pack, char *control)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b088      	sub	sp, #32
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	6039      	str	r1, [r7, #0]
	char *data;

	data = strtok(control, ";");
 800018e:	4941      	ldr	r1, [pc, #260]	; (8000294 <BqPack_StructUpdate+0x110>)
 8000190:	6838      	ldr	r0, [r7, #0]
 8000192:	f003 fcb5 	bl	8003b00 <strtok>
 8000196:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000198:	69fb      	ldr	r3, [r7, #28]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d00c      	beq.n	80001b8 <BqPack_StructUpdate+0x34>
	{
		uint32_t temp = (uint32_t)strtol(data, NULL, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2100      	movs	r1, #0
 80001a2:	69f8      	ldr	r0, [r7, #28]
 80001a4:	f003 fd8e 	bl	8003cc4 <strtol>
 80001a8:	4603      	mov	r3, r0
 80001aa:	61bb      	str	r3, [r7, #24]
		if(temp)
 80001ac:	69bb      	ldr	r3, [r7, #24]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d002      	beq.n	80001b8 <BqPack_StructUpdate+0x34>
		{
			pack -> voltage = temp;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	69ba      	ldr	r2, [r7, #24]
 80001b6:	601a      	str	r2, [r3, #0]
		}
	}

	data = strtok(NULL, ";");
 80001b8:	4936      	ldr	r1, [pc, #216]	; (8000294 <BqPack_StructUpdate+0x110>)
 80001ba:	2000      	movs	r0, #0
 80001bc:	f003 fca0 	bl	8003b00 <strtok>
 80001c0:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d00c      	beq.n	80001e2 <BqPack_StructUpdate+0x5e>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2100      	movs	r1, #0
 80001cc:	69f8      	ldr	r0, [r7, #28]
 80001ce:	f003 fd79 	bl	8003cc4 <strtol>
 80001d2:	4603      	mov	r3, r0
 80001d4:	82fb      	strh	r3, [r7, #22]
		if(temp)
 80001d6:	8afb      	ldrh	r3, [r7, #22]
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d002      	beq.n	80001e2 <BqPack_StructUpdate+0x5e>
		{
			pack -> temperature1 = temp;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	8afa      	ldrh	r2, [r7, #22]
 80001e0:	809a      	strh	r2, [r3, #4]
		}
	}

	data = strtok(NULL, ";");
 80001e2:	492c      	ldr	r1, [pc, #176]	; (8000294 <BqPack_StructUpdate+0x110>)
 80001e4:	2000      	movs	r0, #0
 80001e6:	f003 fc8b 	bl	8003b00 <strtok>
 80001ea:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 80001ec:	69fb      	ldr	r3, [r7, #28]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d00c      	beq.n	800020c <BqPack_StructUpdate+0x88>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	69f8      	ldr	r0, [r7, #28]
 80001f8:	f003 fd64 	bl	8003cc4 <strtol>
 80001fc:	4603      	mov	r3, r0
 80001fe:	82bb      	strh	r3, [r7, #20]
		if(temp)
 8000200:	8abb      	ldrh	r3, [r7, #20]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d002      	beq.n	800020c <BqPack_StructUpdate+0x88>
		{
			pack -> temperature2 = temp;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	8aba      	ldrh	r2, [r7, #20]
 800020a:	80da      	strh	r2, [r3, #6]
		}
	}

	data = strtok(NULL, ";");
 800020c:	4921      	ldr	r1, [pc, #132]	; (8000294 <BqPack_StructUpdate+0x110>)
 800020e:	2000      	movs	r0, #0
 8000210:	f003 fc76 	bl	8003b00 <strtok>
 8000214:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000216:	69fb      	ldr	r3, [r7, #28]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d00c      	beq.n	8000236 <BqPack_StructUpdate+0xb2>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 800021c:	2200      	movs	r2, #0
 800021e:	2100      	movs	r1, #0
 8000220:	69f8      	ldr	r0, [r7, #28]
 8000222:	f003 fd4f 	bl	8003cc4 <strtol>
 8000226:	4603      	mov	r3, r0
 8000228:	827b      	strh	r3, [r7, #18]
		if(temp)
 800022a:	8a7b      	ldrh	r3, [r7, #18]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d002      	beq.n	8000236 <BqPack_StructUpdate+0xb2>
		{
			pack -> lowest_cell_volts = temp;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	8a7a      	ldrh	r2, [r7, #18]
 8000234:	811a      	strh	r2, [r3, #8]
		}
	}

	data = strtok(NULL, ";");
 8000236:	4917      	ldr	r1, [pc, #92]	; (8000294 <BqPack_StructUpdate+0x110>)
 8000238:	2000      	movs	r0, #0
 800023a:	f003 fc61 	bl	8003b00 <strtok>
 800023e:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000240:	69fb      	ldr	r3, [r7, #28]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d00c      	beq.n	8000260 <BqPack_StructUpdate+0xdc>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000246:	2200      	movs	r2, #0
 8000248:	2100      	movs	r1, #0
 800024a:	69f8      	ldr	r0, [r7, #28]
 800024c:	f003 fd3a 	bl	8003cc4 <strtol>
 8000250:	4603      	mov	r3, r0
 8000252:	823b      	strh	r3, [r7, #16]
		if(temp)
 8000254:	8a3b      	ldrh	r3, [r7, #16]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d002      	beq.n	8000260 <BqPack_StructUpdate+0xdc>
		{
			pack -> highest_cell_volts = temp;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	8a3a      	ldrh	r2, [r7, #16]
 800025e:	815a      	strh	r2, [r3, #10]
		}
	}

	data = strtok(NULL, ";");
 8000260:	490c      	ldr	r1, [pc, #48]	; (8000294 <BqPack_StructUpdate+0x110>)
 8000262:	2000      	movs	r0, #0
 8000264:	f003 fc4c 	bl	8003b00 <strtok>
 8000268:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 800026a:	69fb      	ldr	r3, [r7, #28]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d00d      	beq.n	800028c <BqPack_StructUpdate+0x108>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	2100      	movs	r1, #0
 8000274:	69f8      	ldr	r0, [r7, #28]
 8000276:	f003 fd25 	bl	8003cc4 <strtol>
 800027a:	4603      	mov	r3, r0
 800027c:	81fb      	strh	r3, [r7, #14]
		if(temp)
 800027e:	89fb      	ldrh	r3, [r7, #14]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d003      	beq.n	800028c <BqPack_StructUpdate+0x108>
		{
			pack -> op_mode = temp;
 8000284:	89fb      	ldrh	r3, [r7, #14]
 8000286:	b2da      	uxtb	r2, r3
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800028c:	bf00      	nop
 800028e:	3720      	adds	r7, #32
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	08004c88 	.word	0x08004c88

08000298 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800029c:	4b18      	ldr	r3, [pc, #96]	; (8000300 <MX_CAN_Init+0x68>)
 800029e:	4a19      	ldr	r2, [pc, #100]	; (8000304 <MX_CAN_Init+0x6c>)
 80002a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <MX_CAN_Init+0x68>)
 80002a4:	2208      	movs	r2, #8
 80002a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <MX_CAN_Init+0x68>)
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ae:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <MX_CAN_Init+0x68>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_CAN_Init+0x68>)
 80002b8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80002bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_CAN_Init+0x68>)
 80002c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002c4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_CAN_Init+0x68>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_CAN_Init+0x68>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002d2:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <MX_CAN_Init+0x68>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002d8:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_CAN_Init+0x68>)
 80002da:	2200      	movs	r2, #0
 80002dc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <MX_CAN_Init+0x68>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_CAN_Init+0x68>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_CAN_Init+0x68>)
 80002ec:	f000 fddc 	bl	8000ea8 <HAL_CAN_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80002f6:	f000 fab6 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	2000019c 	.word	0x2000019c
 8000304:	40006400 	.word	0x40006400

08000308 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a35      	ldr	r2, [pc, #212]	; (80003f8 <HAL_CAN_MspInit+0xf0>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d163      	bne.n	80003f0 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000328:	4b34      	ldr	r3, [pc, #208]	; (80003fc <HAL_CAN_MspInit+0xf4>)
 800032a:	69db      	ldr	r3, [r3, #28]
 800032c:	4a33      	ldr	r2, [pc, #204]	; (80003fc <HAL_CAN_MspInit+0xf4>)
 800032e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000332:	61d3      	str	r3, [r2, #28]
 8000334:	4b31      	ldr	r3, [pc, #196]	; (80003fc <HAL_CAN_MspInit+0xf4>)
 8000336:	69db      	ldr	r3, [r3, #28]
 8000338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b2e      	ldr	r3, [pc, #184]	; (80003fc <HAL_CAN_MspInit+0xf4>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a2d      	ldr	r2, [pc, #180]	; (80003fc <HAL_CAN_MspInit+0xf4>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b2b      	ldr	r3, [pc, #172]	; (80003fc <HAL_CAN_MspInit+0xf4>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000358:	f44f 7380 	mov.w	r3, #256	; 0x100
 800035c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	4824      	ldr	r0, [pc, #144]	; (8000400 <HAL_CAN_MspInit+0xf8>)
 800036e:	f001 fdd1 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000378:	2302      	movs	r3, #2
 800037a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800037c:	2303      	movs	r3, #3
 800037e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000380:	f107 0314 	add.w	r3, r7, #20
 8000384:	4619      	mov	r1, r3
 8000386:	481e      	ldr	r0, [pc, #120]	; (8000400 <HAL_CAN_MspInit+0xf8>)
 8000388:	f001 fdc4 	bl	8001f14 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800038c:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <HAL_CAN_MspInit+0xfc>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	627b      	str	r3, [r7, #36]	; 0x24
 8000392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000394:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000398:	627b      	str	r3, [r7, #36]	; 0x24
 800039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800039c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003a0:	627b      	str	r3, [r7, #36]	; 0x24
 80003a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003a8:	627b      	str	r3, [r7, #36]	; 0x24
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <HAL_CAN_MspInit+0xfc>)
 80003ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ae:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 3, 0);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2103      	movs	r1, #3
 80003b4:	2013      	movs	r0, #19
 80003b6:	f001 fcc6 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80003ba:	2013      	movs	r0, #19
 80003bc:	f001 fcdf 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2103      	movs	r1, #3
 80003c4:	2014      	movs	r0, #20
 80003c6:	f001 fcbe 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003ca:	2014      	movs	r0, #20
 80003cc:	f001 fcd7 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2103      	movs	r1, #3
 80003d4:	2015      	movs	r0, #21
 80003d6:	f001 fcb6 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80003da:	2015      	movs	r0, #21
 80003dc:	f001 fccf 	bl	8001d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 3, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2103      	movs	r1, #3
 80003e4:	2016      	movs	r0, #22
 80003e6:	f001 fcae 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80003ea:	2016      	movs	r0, #22
 80003ec:	f001 fcc7 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80003f0:	bf00      	nop
 80003f2:	3728      	adds	r7, #40	; 0x28
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40006400 	.word	0x40006400
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010c00 	.word	0x40010c00
 8000404:	40010000 	.word	0x40010000

08000408 <CanInit>:
/**
 * @brief: Initialize CAN network
 * @param chosen_network
 *
 **/
void CanInit(CAN_HandleTypeDef chosen_network) {
 8000408:	b084      	sub	sp, #16
 800040a:	b580      	push	{r7, lr}
 800040c:	af00      	add	r7, sp, #0
 800040e:	f107 0c08 	add.w	ip, r7, #8
 8000412:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&chosen_network) != HAL_OK) {
 8000416:	f107 0008 	add.w	r0, r7, #8
 800041a:	f000 ff09 	bl	8001230 <HAL_CAN_Start>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <CanInit+0x20>
		Error_Handler();
 8000424:	f000 fa1f 	bl	8000866 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&chosen_network,
 8000428:	2103      	movs	r1, #3
 800042a:	f107 0008 	add.w	r0, r7, #8
 800042e:	f001 f962 	bl	80016f6 <HAL_CAN_ActivateNotification>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8000438:	f000 fa15 	bl	8000866 <Error_Handler>
	}
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000444:	b004      	add	sp, #16
 8000446:	4770      	bx	lr

08000448 <CanSaveReceivedData>:
/**
 * @brief: store received data from chosen network
 * @param chosen_network
 *
 **/
void CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 8000448:	b084      	sub	sp, #16
 800044a:	b580      	push	{r7, lr}
 800044c:	af00      	add	r7, sp, #0
 800044e:	f107 0c08 	add.w	ip, r7, #8
 8000452:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000458:	f103 0220 	add.w	r2, r3, #32
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
 800045c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800045e:	333c      	adds	r3, #60	; 0x3c
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000460:	2100      	movs	r1, #0
 8000462:	f107 0008 	add.w	r0, r7, #8
 8000466:	f001 f835 	bl	80014d4 <HAL_CAN_GetRxMessage>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <CanSaveReceivedData+0x2c>
		/* Reception Error */
		Error_Handler();
 8000470:	f000 f9f9 	bl	8000866 <Error_Handler>
	}
//	CanClearRxDataFrame(ptr_can_rx_frame_template);
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <CanConfigFilter>:
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 *
 **/
void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank,
		uint32_t can_filter_id_high, uint32_t can_filter_id_low,
		uint32_t can_filter_mask_id_high, uint32_t can_filter_mask_id_low) {
 8000480:	b084      	sub	sp, #16
 8000482:	b580      	push	{r7, lr}
 8000484:	af00      	add	r7, sp, #0
 8000486:	f107 0c08 	add.w	ip, r7, #8
 800048a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 800048e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000492:	4a16      	ldr	r2, [pc, #88]	; (80004ec <CanConfigFilter+0x6c>)
 8000494:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 8000496:	4b15      	ldr	r3, [pc, #84]	; (80004ec <CanConfigFilter+0x6c>)
 8000498:	2200      	movs	r2, #0
 800049a:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <CanConfigFilter+0x6c>)
 800049e:	2201      	movs	r2, #1
 80004a0:	61da      	str	r2, [r3, #28]
//	can_filter_template.FilterIdHigh = 0x290 << 5; //can_filter_id_high; //18FF;			//0x321 << 5;
//	can_filter_template.FilterIdLow = 0x00000000; //can_filter_id_low; //50E5;				//0x00000000;
	can_filter_template.FilterIdHigh = 0x0000;
 80004a2:	4b12      	ldr	r3, [pc, #72]	; (80004ec <CanConfigFilter+0x6c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
	can_filter_template.FilterIdLow = 0x0000;
 80004a8:	4b10      	ldr	r3, [pc, #64]	; (80004ec <CanConfigFilter+0x6c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <CanConfigFilter+0x6c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <CanConfigFilter+0x6c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
//	can_filter_template.FilterMaskIdHigh = 0x290 << 5;	//0x111 << 5;
//	can_filter_template.FilterMaskIdLow = 0x00000000;
	can_filter_template.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <CanConfigFilter+0x6c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <CanConfigFilter+0x6c>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <CanConfigFilter+0x6c>)
 80004c8:	220e      	movs	r2, #14
 80004ca:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 80004cc:	4907      	ldr	r1, [pc, #28]	; (80004ec <CanConfigFilter+0x6c>)
 80004ce:	f107 0008 	add.w	r0, r7, #8
 80004d2:	f000 fde4 	bl	800109e <HAL_CAN_ConfigFilter>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <CanConfigFilter+0x60>
		Error_Handler();
 80004dc:	f000 f9c3 	bl	8000866 <Error_Handler>
	}

}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004e8:	b004      	add	sp, #16
 80004ea:	4770      	bx	lr
 80004ec:	200001dc 	.word	0x200001dc

080004f0 <CanSendPdo>:
 *
 **/
void CanSendPdo(CAN_HandleTypeDef chosen_network, uint8_t frame_pdo_id,
		uint8_t number_of_bytes, CanDataFrameInit *ptr_can_frame_template,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 80004f0:	b084      	sub	sp, #16
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	f107 0c08 	add.w	ip, r7, #8
 80004fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_pdo_id;
 80004fe:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000504:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000508:	2200      	movs	r2, #0
 800050a:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 800050c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8000512:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000518:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 800051a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800051c:	2200      	movs	r2, #0
 800051e:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 8000520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000522:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000526:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8000528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800052a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800052e:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 8000530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000532:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000536:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 8000538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800053a:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800053e:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 8000540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000542:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000546:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 8000548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800054a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800054e:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 8000550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000552:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000556:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 8000558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800055a:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800055e:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000562:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000566:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000568:	4b0d      	ldr	r3, [pc, #52]	; (80005a0 <CanSendPdo+0xb0>)
 800056a:	f107 0008 	add.w	r0, r7, #8
 800056e:	f000 fea3 	bl	80012b8 <HAL_CAN_AddTxMessage>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <CanSendPdo+0x8c>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000578:	f000 f975 	bl	8000866 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 800057c:	bf00      	nop
 800057e:	f107 0008 	add.w	r0, r7, #8
 8000582:	f000 ff73 	bl	800146c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b03      	cmp	r3, #3
 800058a:	d1f8      	bne.n	800057e <CanSendPdo+0x8e>
	}

	CanClearTxDataFrame(ptr_can_frame_template);
 800058c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800058e:	f000 f809 	bl	80005a4 <CanClearTxDataFrame>

}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059a:	b004      	add	sp, #16
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000118 	.word	0x20000118

080005a4 <CanClearTxDataFrame>:
 * @brief: data sent over usb is not correctly shown when structure is not cleared
 *         after every message sent. Assigning zeros has no influence on the network
 * @param ptr_can_frame_template: chosen structure which helds all the data
 *
 **/
void CanClearTxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->tx_header.StdId = 0x00;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = 0x0;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = 0x0;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = 0x0;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = 0x0;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = 0x0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2200      	movs	r2, #0
 80005e6:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = 0x0;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2200      	movs	r2, #0
 80005ec:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = 0x0;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2200      	movs	r2, #0
 80005f2:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = 0x0;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	71da      	strb	r2, [r3, #7]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr

08000604 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000618:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_GPIO_Init+0xd0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a2d      	ldr	r2, [pc, #180]	; (80006d4 <MX_GPIO_Init+0xd0>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_GPIO_Init+0xd0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0310 	and.w	r3, r3, #16
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000630:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_GPIO_Init+0xd0>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <MX_GPIO_Init+0xd0>)
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_GPIO_Init+0xd0>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_GPIO_Init+0xd0>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <MX_GPIO_Init+0xd0>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_GPIO_Init+0xd0>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_GPIO_Init+0xd0>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <MX_GPIO_Init+0xd0>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_GPIO_Init+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <MX_GPIO_Init+0xd4>)
 8000680:	f001 fdcc 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_GPIO_Init+0xd8>)
 800068c:	f001 fdc6 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2302      	movs	r3, #2
 80006a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4619      	mov	r1, r3
 80006a8:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0xd4>)
 80006aa:	f001 fc33 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b4:	2301      	movs	r3, #1
 80006b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	4619      	mov	r1, r3
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_GPIO_Init+0xd8>)
 80006c8:	f001 fc24 	bl	8001f14 <HAL_GPIO_Init>

}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40011000 	.word	0x40011000
 80006dc:	40010800 	.word	0x40010800

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	b093      	sub	sp, #76	; 0x4c
 80006e4:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e6:	f000 fb59 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f877 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f7ff ff89 	bl	8000604 <MX_GPIO_Init>
  MX_CAN_Init();
 80006f2:	f7ff fdd1 	bl	8000298 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80006f6:	f000 fa89 	bl	8000c0c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80006fa:	f000 fa1f 	bl	8000b3c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CanConfigFilter(hcan, 0, 0x0000, 0x0000, 0x0000, 0x0000);
 80006fe:	4e30      	ldr	r6, [pc, #192]	; (80007c0 <main+0xe0>)
 8000700:	2300      	movs	r3, #0
 8000702:	930a      	str	r3, [sp, #40]	; 0x28
 8000704:	2300      	movs	r3, #0
 8000706:	9309      	str	r3, [sp, #36]	; 0x24
 8000708:	2300      	movs	r3, #0
 800070a:	9308      	str	r3, [sp, #32]
 800070c:	2300      	movs	r3, #0
 800070e:	9307      	str	r3, [sp, #28]
 8000710:	2300      	movs	r3, #0
 8000712:	9306      	str	r3, [sp, #24]
 8000714:	466d      	mov	r5, sp
 8000716:	f106 0410 	add.w	r4, r6, #16
 800071a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800071c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800071e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000722:	e885 0003 	stmia.w	r5, {r0, r1}
 8000726:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800072a:	f7ff fea9 	bl	8000480 <CanConfigFilter>
  CanInit(hcan);
 800072e:	4e24      	ldr	r6, [pc, #144]	; (80007c0 <main+0xe0>)
 8000730:	466d      	mov	r5, sp
 8000732:	f106 0410 	add.w	r4, r6, #16
 8000736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000738:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800073e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000742:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000746:	f7ff fe5f 	bl	8000408 <CanInit>

  BqPack_StructInit(&battery_pack);
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <main+0xe4>)
 800074c:	f7ff fcfe 	bl	800014c <BqPack_StructInit>
  /* Start the timer */
  HAL_TIM_Base_Start_IT(&htim2);
 8000750:	481d      	ldr	r0, [pc, #116]	; (80007c8 <main+0xe8>)
 8000752:	f002 f9ff 	bl	8002b54 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart1, "rqst\r", 5, 100);
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2205      	movs	r2, #5
 800075a:	491c      	ldr	r1, [pc, #112]	; (80007cc <main+0xec>)
 800075c:	481c      	ldr	r0, [pc, #112]	; (80007d0 <main+0xf0>)
 800075e:	f002 fcb2 	bl	80030c6 <HAL_UART_Transmit>
	  CanSendPdo(hcan, 0x127, 8, &can_frame_template, 0x13, 0xBB, 0x20, 0x16, 0, 0, 0, 0);
 8000762:	4e17      	ldr	r6, [pc, #92]	; (80007c0 <main+0xe0>)
 8000764:	2300      	movs	r3, #0
 8000766:	9310      	str	r3, [sp, #64]	; 0x40
 8000768:	2300      	movs	r3, #0
 800076a:	930f      	str	r3, [sp, #60]	; 0x3c
 800076c:	2300      	movs	r3, #0
 800076e:	930e      	str	r3, [sp, #56]	; 0x38
 8000770:	2300      	movs	r3, #0
 8000772:	930d      	str	r3, [sp, #52]	; 0x34
 8000774:	2316      	movs	r3, #22
 8000776:	930c      	str	r3, [sp, #48]	; 0x30
 8000778:	2320      	movs	r3, #32
 800077a:	930b      	str	r3, [sp, #44]	; 0x2c
 800077c:	23bb      	movs	r3, #187	; 0xbb
 800077e:	930a      	str	r3, [sp, #40]	; 0x28
 8000780:	2313      	movs	r3, #19
 8000782:	9309      	str	r3, [sp, #36]	; 0x24
 8000784:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <main+0xf4>)
 8000786:	9308      	str	r3, [sp, #32]
 8000788:	2308      	movs	r3, #8
 800078a:	9307      	str	r3, [sp, #28]
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	9306      	str	r3, [sp, #24]
 8000790:	466d      	mov	r5, sp
 8000792:	f106 0410 	add.w	r4, r6, #16
 8000796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800079a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800079e:	e885 0003 	stmia.w	r5, {r0, r1}
 80007a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007a6:	f7ff fea3 	bl	80004f0 <CanSendPdo>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80007aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <main+0xf8>)
 80007b0:	f001 fd4c 	bl	800224c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80007b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007b8:	f000 fb52 	bl	8000e60 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, "rqst\r", 5, 100);
 80007bc:	e7cb      	b.n	8000756 <main+0x76>
 80007be:	bf00      	nop
 80007c0:	2000019c 	.word	0x2000019c
 80007c4:	20000298 	.word	0x20000298
 80007c8:	20000250 	.word	0x20000250
 80007cc:	08004c8c 	.word	0x08004c8c
 80007d0:	200002a8 	.word	0x200002a8
 80007d4:	20000158 	.word	0x20000158
 80007d8:	40011000 	.word	0x40011000

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b090      	sub	sp, #64	; 0x40
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2228      	movs	r2, #40	; 0x28
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f003 f980 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000810:	2302      	movs	r3, #2
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800081a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fd2b 	bl	8002280 <HAL_RCC_OscConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000830:	f000 f819 	bl	8000866 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2102      	movs	r1, #2
 800084e:	4618      	mov	r0, r3
 8000850:	f001 ff96 	bl	8002780 <HAL_RCC_ClockConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800085a:	f000 f804 	bl	8000866 <Error_Handler>
  }
}
 800085e:	bf00      	nop
 8000860:	3740      	adds	r7, #64	; 0x40
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086a:	b672      	cpsid	i
}
 800086c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086e:	e7fe      	b.n	800086e <Error_Handler+0x8>

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_MspInit+0x5c>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <HAL_MspInit+0x5c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_MspInit+0x5c>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x5c>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <HAL_MspInit+0x5c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x5c>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_MspInit+0x60>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_MspInit+0x60>)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010000 	.word	0x40010000

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr

0800090a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 fa85 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000928:	4802      	ldr	r0, [pc, #8]	; (8000934 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 800092a:	f000 ff09 	bl	8001740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000019c 	.word	0x2000019c

08000938 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <USB_LP_CAN1_RX0_IRQHandler+0x34>)
 8000940:	f000 fefe 	bl	8001740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  /************************************************************************************************
  	 CAN_HIGH_SPEED RX INTERRUPT HANDLING
  	 ************************************************************************************************/
  	CanSaveReceivedData(hcan, &can_rx_frame_template);
 8000944:	4e09      	ldr	r6, [pc, #36]	; (800096c <USB_LP_CAN1_RX0_IRQHandler+0x34>)
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <USB_LP_CAN1_RX0_IRQHandler+0x38>)
 8000948:	9306      	str	r3, [sp, #24]
 800094a:	466d      	mov	r5, sp
 800094c:	f106 0410 	add.w	r4, r6, #16
 8000950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000954:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000958:	e885 0003 	stmia.w	r5, {r0, r1}
 800095c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000960:	f7ff fd72 	bl	8000448 <CanSaveReceivedData>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	3704      	adds	r7, #4
 8000968:	46bd      	mov	sp, r7
 800096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800096c:	2000019c 	.word	0x2000019c
 8000970:	20000204 	.word	0x20000204

08000974 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <CAN1_RX1_IRQHandler+0x10>)
 800097a:	f000 fee1 	bl	8001740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */


  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000019c 	.word	0x2000019c

08000988 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800098c:	4802      	ldr	r0, [pc, #8]	; (8000998 <CAN1_SCE_IRQHandler+0x10>)
 800098e:	f000 fed7 	bl	8001740 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000019c 	.word	0x2000019c

0800099c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009a0:	4802      	ldr	r0, [pc, #8]	; (80009ac <USART1_IRQHandler+0x10>)
 80009a2:	f002 fc53 	bl	800324c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200002a8 	.word	0x200002a8

080009b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	return 1;
 80009b4:	2301      	movs	r3, #1
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <_kill>:

int _kill(int pid, int sig)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009c8:	f003 f868 	bl	8003a9c <__errno>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2216      	movs	r2, #22
 80009d0:	601a      	str	r2, [r3, #0]
	return -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_exit>:

void _exit (int status)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009e6:	f04f 31ff 	mov.w	r1, #4294967295
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ffe7 	bl	80009be <_kill>
	while (1) {}		/* Make sure we hang here */
 80009f0:	e7fe      	b.n	80009f0 <_exit+0x12>

080009f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e00a      	b.n	8000a1a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a04:	f3af 8000 	nop.w
 8000a08:	4601      	mov	r1, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1c5a      	adds	r2, r3, #1
 8000a0e:	60ba      	str	r2, [r7, #8]
 8000a10:	b2ca      	uxtb	r2, r1
 8000a12:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	3301      	adds	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dbf0      	blt.n	8000a04 <_read+0x12>
	}

return len;
 8000a22:	687b      	ldr	r3, [r7, #4]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e009      	b.n	8000a52 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	60ba      	str	r2, [r7, #8]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	dbf1      	blt.n	8000a3e <_write+0x12>
	}
	return len;
 8000a5a:	687b      	ldr	r3, [r7, #4]
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3718      	adds	r7, #24
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_close>:

int _close(int file)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	return -1;
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <_isatty>:

int _isatty(int file)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	return 1;
 8000aa0:	2301      	movs	r3, #1
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
	return 0;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f002 ffd2 	bl	8003a9c <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20005000 	.word	0x20005000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	2000008c 	.word	0x2000008c
 8000b2c:	20000300 	.word	0x20000300

08000b30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	f107 0308 	add.w	r3, r7, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b6c:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b80:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b82:	f001 ff97 	bl	8002ab4 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b8c:	f7ff fe6b 	bl	8000866 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000b9e:	f002 f82b 	bl	8002bf8 <HAL_TIM_ConfigClockSource>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ba8:	f7ff fe5d 	bl	8000866 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bac:	2300      	movs	r3, #0
 8000bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_TIM2_Init+0x94>)
 8000bba:	f002 f9d9 	bl	8002f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bc4:	f7ff fe4f 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000250 	.word	0x20000250

08000bd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000be4:	d10b      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_TIM_Base_MspInit+0x34>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_TIM_Base_MspInit+0x34>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	61d3      	str	r3, [r2, #28]
 8000bf2:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <HAL_TIM_Base_MspInit+0x34>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000

08000c0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <MX_USART1_UART_Init+0x58>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c42:	4807      	ldr	r0, [pc, #28]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c44:	f002 f9f2 	bl	800302c <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f7ff fe0a 	bl	8000866 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  // Immediately start receiving
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8000c52:	2280      	movs	r2, #128	; 0x80
 8000c54:	4904      	ldr	r1, [pc, #16]	; (8000c68 <MX_USART1_UART_Init+0x5c>)
 8000c56:	4802      	ldr	r0, [pc, #8]	; (8000c60 <MX_USART1_UART_Init+0x54>)
 8000c58:	f002 fac7 	bl	80031ea <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200002a8 	.word	0x200002a8
 8000c64:	40013800 	.word	0x40013800
 8000c68:	20000090 	.word	0x20000090

08000c6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <HAL_UART_MspInit+0x9c>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d139      	bne.n	8000d00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_UART_MspInit+0xa0>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a1e      	ldr	r2, [pc, #120]	; (8000d0c <HAL_UART_MspInit+0xa0>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <HAL_UART_MspInit+0xa0>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_UART_MspInit+0xa0>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <HAL_UART_MspInit+0xa0>)
 8000caa:	f043 0304 	orr.w	r3, r3, #4
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_UART_MspInit+0xa0>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f003 0304 	and.w	r3, r3, #4
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480f      	ldr	r0, [pc, #60]	; (8000d10 <HAL_UART_MspInit+0xa4>)
 8000cd2:	f001 f91f 	bl	8001f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4809      	ldr	r0, [pc, #36]	; (8000d10 <HAL_UART_MspInit+0xa4>)
 8000cec:	f001 f912 	bl	8001f14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	2025      	movs	r0, #37	; 0x25
 8000cf6:	f001 f826 	bl	8001d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cfa:	2025      	movs	r0, #37	; 0x25
 8000cfc:	f001 f83f 	bl	8001d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40013800 	.word	0x40013800
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800

08000d14 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_UART_RxCpltCallback+0x2c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d108      	bne.n	8000d38 <HAL_UART_RxCpltCallback+0x24>
	{
		BqPack_StructUpdate(&battery_pack, rx_buffer);
 8000d26:	4907      	ldr	r1, [pc, #28]	; (8000d44 <HAL_UART_RxCpltCallback+0x30>)
 8000d28:	4807      	ldr	r0, [pc, #28]	; (8000d48 <HAL_UART_RxCpltCallback+0x34>)
 8000d2a:	f7ff fa2b 	bl	8000184 <BqPack_StructUpdate>
		// here update struct with data from current sensor
		HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <HAL_UART_RxCpltCallback+0x30>)
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <HAL_UART_RxCpltCallback+0x38>)
 8000d34:	f002 fa59 	bl	80031ea <HAL_UART_Receive_IT>
	}
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40013800 	.word	0x40013800
 8000d44:	20000090 	.word	0x20000090
 8000d48:	20000298 	.word	0x20000298
 8000d4c:	200002a8 	.word	0x200002a8

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d52:	490d      	ldr	r1, [pc, #52]	; (8000d88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d68:	4c0a      	ldr	r4, [pc, #40]	; (8000d94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d76:	f7ff fedb 	bl	8000b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f002 fe95 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fcaf 	bl	80006e0 <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d8c:	08004f10 	.word	0x08004f10
  ldr r2, =_sbss
 8000d90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d94:	20000300 	.word	0x20000300

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_Init+0x28>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_Init+0x28>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 ffbf 	bl	8001d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fd5a 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 ffd7 	bl	8001d9a <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 ff9f 	bl	8001d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200002ec 	.word	0x200002ec

08000e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	200002ec 	.word	0x200002ec

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffe0 	bl	8000e4c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e0ed      	b.n	8001096 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fa1e 	bl	8000308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0201 	orr.w	r2, r2, #1
 8000eda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000edc:	f7ff ffb6 	bl	8000e4c <HAL_GetTick>
 8000ee0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ee2:	e012      	b.n	8000f0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ee4:	f7ff ffb2 	bl	8000e4c <HAL_GetTick>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	2b0a      	cmp	r3, #10
 8000ef0:	d90b      	bls.n	8000f0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2205      	movs	r2, #5
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e0c5      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0e5      	beq.n	8000ee4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0202 	bic.w	r2, r2, #2
 8000f26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f28:	f7ff ff90 	bl	8000e4c <HAL_GetTick>
 8000f2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f2e:	e012      	b.n	8000f56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f30:	f7ff ff8c 	bl	8000e4c <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	2b0a      	cmp	r3, #10
 8000f3c:	d90b      	bls.n	8000f56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e09f      	b.n	8001096 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e5      	bne.n	8000f30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7e1b      	ldrb	r3, [r3, #24]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d108      	bne.n	8000f7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e007      	b.n	8000f8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7e5b      	ldrb	r3, [r3, #25]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d108      	bne.n	8000fa8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e007      	b.n	8000fb8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e9b      	ldrb	r3, [r3, #26]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d108      	bne.n	8000fd2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0220 	orr.w	r2, r2, #32
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0220 	bic.w	r2, r2, #32
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7edb      	ldrb	r3, [r3, #27]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d108      	bne.n	8000ffc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0210 	bic.w	r2, r2, #16
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e007      	b.n	800100c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0210 	orr.w	r2, r2, #16
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7f1b      	ldrb	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0208 	orr.w	r2, r2, #8
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7f5b      	ldrb	r3, [r3, #29]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0204 	orr.w	r2, r2, #4
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0204 	bic.w	r2, r2, #4
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	ea42 0103 	orr.w	r1, r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800109e:	b480      	push	{r7}
 80010a0:	b087      	sub	sp, #28
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80010b6:	7cfb      	ldrb	r3, [r7, #19]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d003      	beq.n	80010c4 <HAL_CAN_ConfigFilter+0x26>
 80010bc:	7cfb      	ldrb	r3, [r7, #19]
 80010be:	2b02      	cmp	r3, #2
 80010c0:	f040 80aa 	bne.w	8001218 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010ca:	f043 0201 	orr.w	r2, r3, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2201      	movs	r2, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d123      	bne.n	8001146 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	401a      	ands	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001120:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3248      	adds	r2, #72	; 0x48
 8001126:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800113a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800113c:	6979      	ldr	r1, [r7, #20]
 800113e:	3348      	adds	r3, #72	; 0x48
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	440b      	add	r3, r1
 8001144:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d122      	bne.n	8001194 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800116e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3248      	adds	r2, #72	; 0x48
 8001174:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001188:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118a:	6979      	ldr	r1, [r7, #20]
 800118c:	3348      	adds	r3, #72	; 0x48
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d109      	bne.n	80011b0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80011ae:	e007      	b.n	80011c0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	431a      	orrs	r2, r3
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d109      	bne.n	80011dc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80011da:	e007      	b.n	80011ec <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d107      	bne.n	8001204 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800120a:	f023 0201 	bic.w	r2, r3, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	e006      	b.n	8001226 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
  }
}
 8001226:	4618      	mov	r0, r3
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d12e      	bne.n	80012a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fdf6 	bl	8000e4c <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001262:	e012      	b.n	800128a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001264:	f7ff fdf2 	bl	8000e4c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b0a      	cmp	r3, #10
 8001270:	d90b      	bls.n	800128a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2205      	movs	r2, #5
 8001282:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e012      	b.n	80012b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e5      	bne.n	8001264 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e006      	b.n	80012b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
  }
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	; 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d003      	beq.n	80012e4 <HAL_CAN_AddTxMessage+0x2c>
 80012dc:	7ffb      	ldrb	r3, [r7, #31]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	f040 80b8 	bne.w	8001454 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10a      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 80a0 	beq.w	8001444 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	0e1b      	lsrs	r3, r3, #24
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d907      	bls.n	8001324 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e09e      	b.n	8001462 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001324:	2201      	movs	r2, #1
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	409a      	lsls	r2, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	6809      	ldr	r1, [r1, #0]
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3318      	adds	r3, #24
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	440b      	add	r3, r1
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	e00f      	b.n	8001372 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800135c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001362:	68f9      	ldr	r1, [r7, #12]
 8001364:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001366:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3318      	adds	r3, #24
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	440b      	add	r3, r1
 8001370:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6819      	ldr	r1, [r3, #0]
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3318      	adds	r3, #24
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	440b      	add	r3, r1
 8001382:	3304      	adds	r3, #4
 8001384:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	7d1b      	ldrb	r3, [r3, #20]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d111      	bne.n	80013b2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	3318      	adds	r3, #24
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	3304      	adds	r3, #4
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	6811      	ldr	r1, [r2, #0]
 80013a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3318      	adds	r3, #24
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	440b      	add	r3, r1
 80013ae:	3304      	adds	r3, #4
 80013b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3307      	adds	r3, #7
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	061a      	lsls	r2, r3, #24
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3306      	adds	r3, #6
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	041b      	lsls	r3, r3, #16
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3305      	adds	r3, #5
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	4313      	orrs	r3, r2
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	3204      	adds	r2, #4
 80013d2:	7812      	ldrb	r2, [r2, #0]
 80013d4:	4610      	mov	r0, r2
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	6811      	ldr	r1, [r2, #0]
 80013da:	ea43 0200 	orr.w	r2, r3, r0
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	440b      	add	r3, r1
 80013e4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80013e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3303      	adds	r3, #3
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	061a      	lsls	r2, r3, #24
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3302      	adds	r3, #2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3301      	adds	r3, #1
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	4313      	orrs	r3, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	7812      	ldrb	r2, [r2, #0]
 800140a:	4610      	mov	r0, r2
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	6811      	ldr	r1, [r2, #0]
 8001410:	ea43 0200 	orr.w	r2, r3, r0
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	440b      	add	r3, r1
 800141a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800141e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3318      	adds	r3, #24
 8001428:	011b      	lsls	r3, r3, #4
 800142a:	4413      	add	r3, r2
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	6811      	ldr	r1, [r2, #0]
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3318      	adds	r3, #24
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	440b      	add	r3, r1
 800143e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001440:	2300      	movs	r3, #0
 8001442:	e00e      	b.n	8001462 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e006      	b.n	8001462 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
  }
}
 8001462:	4618      	mov	r0, r3
 8001464:	3724      	adds	r7, #36	; 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001480:	7afb      	ldrb	r3, [r7, #11]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d002      	beq.n	800148c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d11d      	bne.n	80014c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	3301      	adds	r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d002      	beq.n	80014b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <HAL_CAN_GetRxMessage+0x24>
 80014f0:	7dfb      	ldrb	r3, [r7, #23]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	f040 80f3 	bne.w	80016de <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d116      	bne.n	800153a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0e7      	b.n	80016ec <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d107      	bne.n	800153a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0d8      	b.n	80016ec <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	331b      	adds	r3, #27
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4413      	add	r3, r2
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0204 	and.w	r2, r3, #4
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10c      	bne.n	8001572 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	331b      	adds	r3, #27
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4413      	add	r3, r2
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	0d5b      	lsrs	r3, r3, #21
 8001568:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e00b      	b.n	800158a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	331b      	adds	r3, #27
 800157a:	011b      	lsls	r3, r3, #4
 800157c:	4413      	add	r3, r2
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	08db      	lsrs	r3, r3, #3
 8001582:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	331b      	adds	r3, #27
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0202 	and.w	r2, r3, #2
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	331b      	adds	r3, #27
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	4413      	add	r3, r2
 80015ac:	3304      	adds	r3, #4
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 020f 	and.w	r2, r3, #15
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	331b      	adds	r3, #27
 80015c0:	011b      	lsls	r3, r3, #4
 80015c2:	4413      	add	r3, r2
 80015c4:	3304      	adds	r3, #4
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	331b      	adds	r3, #27
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4413      	add	r3, r2
 80015dc:	3304      	adds	r3, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	0c1b      	lsrs	r3, r3, #16
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0a1a      	lsrs	r2, r3, #8
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	3301      	adds	r3, #1
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	0c1a      	lsrs	r2, r3, #16
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3302      	adds	r3, #2
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	0e1a      	lsrs	r2, r3, #24
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	3303      	adds	r3, #3
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4413      	add	r3, r2
 8001656:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3304      	adds	r3, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	4413      	add	r3, r2
 800166e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	0a1a      	lsrs	r2, r3, #8
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3305      	adds	r3, #5
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4413      	add	r3, r2
 8001688:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	0c1a      	lsrs	r2, r3, #16
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3306      	adds	r3, #6
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0e1a      	lsrs	r2, r3, #24
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	3307      	adds	r3, #7
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d108      	bne.n	80016ca <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0220 	orr.w	r2, r2, #32
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	e007      	b.n	80016da <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	691a      	ldr	r2, [r3, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0220 	orr.w	r2, r2, #32
 80016d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e006      	b.n	80016ec <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
  }
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr

080016f6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001706:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d002      	beq.n	8001714 <HAL_CAN_ActivateNotification+0x1e>
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d109      	bne.n	8001728 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6959      	ldr	r1, [r3, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	e006      	b.n	8001736 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr

08001740 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d07c      	beq.n	8001880 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d023      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2201      	movs	r2, #1
 8001796:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f983 	bl	8001aae <HAL_CAN_TxMailbox0CompleteCallback>
 80017a8:	e016      	b.n	80017d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	e00c      	b.n	80017d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24
 80017d0:	e002      	b.n	80017d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f986 	bl	8001ae4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d024      	beq.n	800182c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 f962 	bl	8001ac0 <HAL_CAN_TxMailbox1CompleteCallback>
 80017fc:	e016      	b.n	800182c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
 8001810:	e00c      	b.n	800182c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	e002      	b.n	800182c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f965 	bl	8001af6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d024      	beq.n	8001880 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800183e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f941 	bl	8001ad2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001850:	e016      	b.n	8001880 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
 8001864:	e00c      	b.n	8001880 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
 8001878:	e002      	b.n	8001880 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f944 	bl	8001b08 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00c      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f003 0310 	and.w	r3, r3, #16
 8001890:	2b00      	cmp	r3, #0
 8001892:	d007      	beq.n	80018a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80018a4:	6a3b      	ldr	r3, [r7, #32]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00b      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2208      	movs	r2, #8
 80018be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f933 	bl	8001b2c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f91b 	bl	8001b1a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00c      	beq.n	8001908 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2210      	movs	r2, #16
 8001906:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d006      	beq.n	800192a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2208      	movs	r2, #8
 8001922:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f913 	bl	8001b50 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800192a:	6a3b      	ldr	r3, [r7, #32]
 800192c:	f003 0310 	and.w	r3, r3, #16
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f8fb 	bl	8001b3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00b      	beq.n	800196a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f8fc 	bl	8001b62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00b      	beq.n	800198c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2208      	movs	r2, #8
 8001984:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f8f4 	bl	8001b74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d07b      	beq.n	8001a8e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d072      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d008      	beq.n	80019bc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d008      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d043      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d03e      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a0e:	2b60      	cmp	r3, #96	; 0x60
 8001a10:	d02b      	beq.n	8001a6a <HAL_CAN_IRQHandler+0x32a>
 8001a12:	2b60      	cmp	r3, #96	; 0x60
 8001a14:	d82e      	bhi.n	8001a74 <HAL_CAN_IRQHandler+0x334>
 8001a16:	2b50      	cmp	r3, #80	; 0x50
 8001a18:	d022      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x320>
 8001a1a:	2b50      	cmp	r3, #80	; 0x50
 8001a1c:	d82a      	bhi.n	8001a74 <HAL_CAN_IRQHandler+0x334>
 8001a1e:	2b40      	cmp	r3, #64	; 0x40
 8001a20:	d019      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x316>
 8001a22:	2b40      	cmp	r3, #64	; 0x40
 8001a24:	d826      	bhi.n	8001a74 <HAL_CAN_IRQHandler+0x334>
 8001a26:	2b30      	cmp	r3, #48	; 0x30
 8001a28:	d010      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x30c>
 8001a2a:	2b30      	cmp	r3, #48	; 0x30
 8001a2c:	d822      	bhi.n	8001a74 <HAL_CAN_IRQHandler+0x334>
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d002      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x2f8>
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d005      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a36:	e01d      	b.n	8001a74 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	f043 0308 	orr.w	r3, r3, #8
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a40:	e019      	b.n	8001a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	f043 0310 	orr.w	r3, r3, #16
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a4a:	e014      	b.n	8001a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	f043 0320 	orr.w	r3, r3, #32
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a54:	e00f      	b.n	8001a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a5e:	e00a      	b.n	8001a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a68:	e005      	b.n	8001a76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a72:	e000      	b.n	8001a76 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a74:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699a      	ldr	r2, [r3, #24]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d008      	beq.n	8001aa6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f870 	bl	8001b86 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	; 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bca:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <__NVIC_SetPriorityGrouping+0x44>)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	60d3      	str	r3, [r2, #12]
}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	f003 0307 	and.w	r3, r3, #7
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	db0b      	blt.n	8001c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	f003 021f 	and.w	r2, r3, #31
 8001c14:	4906      	ldr	r1, [pc, #24]	; (8001c30 <__NVIC_EnableIRQ+0x34>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cfc:	d301      	bcc.n	8001d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00f      	b.n	8001d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <SysTick_Config+0x40>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0a:	210f      	movs	r1, #15
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f7ff ff90 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <SysTick_Config+0x40>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <SysTick_Config+0x40>)
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff2d 	bl	8001b98 <__NVIC_SetPriorityGrouping>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d58:	f7ff ff42 	bl	8001be0 <__NVIC_GetPriorityGrouping>
 8001d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	6978      	ldr	r0, [r7, #20]
 8001d64:	f7ff ff90 	bl	8001c88 <NVIC_EncodePriority>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff5f 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff35 	bl	8001bfc <__NVIC_EnableIRQ>
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffa2 	bl	8001cec <SysTick_Config>
 8001da8:	4603      	mov	r3, r0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d008      	beq.n	8001dda <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2204      	movs	r2, #4
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e020      	b.n	8001e1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 020e 	bic.w	r2, r2, #14
 8001de8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d005      	beq.n	8001e4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e051      	b.n	8001eee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 020e 	bic.w	r2, r2, #14
 8001e58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_DMA_Abort_IT+0xd0>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d029      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0xa0>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a20      	ldr	r2, [pc, #128]	; (8001efc <HAL_DMA_Abort_IT+0xd4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x9c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_DMA_Abort_IT+0xd8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d01a      	beq.n	8001ebe <HAL_DMA_Abort_IT+0x96>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	; (8001f04 <HAL_DMA_Abort_IT+0xdc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d012      	beq.n	8001eb8 <HAL_DMA_Abort_IT+0x90>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_DMA_Abort_IT+0xe0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x8a>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_DMA_Abort_IT+0xe4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d102      	bne.n	8001eac <HAL_DMA_Abort_IT+0x84>
 8001ea6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eaa:	e00e      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb0:	e00b      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001eb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb6:	e008      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ebc:	e005      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001ebe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec2:	e002      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001ec4:	2310      	movs	r3, #16
 8001ec6:	e000      	b.n	8001eca <HAL_DMA_Abort_IT+0xa2>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_DMA_Abort_IT+0xe8>)
 8001ecc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	4798      	blx	r3
    } 
  }
  return status;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40020008 	.word	0x40020008
 8001efc:	4002001c 	.word	0x4002001c
 8001f00:	40020030 	.word	0x40020030
 8001f04:	40020044 	.word	0x40020044
 8001f08:	40020058 	.word	0x40020058
 8001f0c:	4002006c 	.word	0x4002006c
 8001f10:	40020000 	.word	0x40020000

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b08b      	sub	sp, #44	; 0x2c
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f22:	2300      	movs	r3, #0
 8001f24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	e169      	b.n	80021fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	f040 8158 	bne.w	80021f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a9a      	ldr	r2, [pc, #616]	; (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d05e      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f50:	4a98      	ldr	r2, [pc, #608]	; (80021b4 <HAL_GPIO_Init+0x2a0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d875      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f56:	4a98      	ldr	r2, [pc, #608]	; (80021b8 <HAL_GPIO_Init+0x2a4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d058      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f5c:	4a96      	ldr	r2, [pc, #600]	; (80021b8 <HAL_GPIO_Init+0x2a4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d86f      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f62:	4a96      	ldr	r2, [pc, #600]	; (80021bc <HAL_GPIO_Init+0x2a8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d052      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f68:	4a94      	ldr	r2, [pc, #592]	; (80021bc <HAL_GPIO_Init+0x2a8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d869      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a94      	ldr	r2, [pc, #592]	; (80021c0 <HAL_GPIO_Init+0x2ac>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d04c      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f74:	4a92      	ldr	r2, [pc, #584]	; (80021c0 <HAL_GPIO_Init+0x2ac>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d863      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f7a:	4a92      	ldr	r2, [pc, #584]	; (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d046      	beq.n	800200e <HAL_GPIO_Init+0xfa>
 8001f80:	4a90      	ldr	r2, [pc, #576]	; (80021c4 <HAL_GPIO_Init+0x2b0>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d85d      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f86:	2b12      	cmp	r3, #18
 8001f88:	d82a      	bhi.n	8001fe0 <HAL_GPIO_Init+0xcc>
 8001f8a:	2b12      	cmp	r3, #18
 8001f8c:	d859      	bhi.n	8002042 <HAL_GPIO_Init+0x12e>
 8001f8e:	a201      	add	r2, pc, #4	; (adr r2, 8001f94 <HAL_GPIO_Init+0x80>)
 8001f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f94:	0800200f 	.word	0x0800200f
 8001f98:	08001fe9 	.word	0x08001fe9
 8001f9c:	08001ffb 	.word	0x08001ffb
 8001fa0:	0800203d 	.word	0x0800203d
 8001fa4:	08002043 	.word	0x08002043
 8001fa8:	08002043 	.word	0x08002043
 8001fac:	08002043 	.word	0x08002043
 8001fb0:	08002043 	.word	0x08002043
 8001fb4:	08002043 	.word	0x08002043
 8001fb8:	08002043 	.word	0x08002043
 8001fbc:	08002043 	.word	0x08002043
 8001fc0:	08002043 	.word	0x08002043
 8001fc4:	08002043 	.word	0x08002043
 8001fc8:	08002043 	.word	0x08002043
 8001fcc:	08002043 	.word	0x08002043
 8001fd0:	08002043 	.word	0x08002043
 8001fd4:	08002043 	.word	0x08002043
 8001fd8:	08001ff1 	.word	0x08001ff1
 8001fdc:	08002005 	.word	0x08002005
 8001fe0:	4a79      	ldr	r2, [pc, #484]	; (80021c8 <HAL_GPIO_Init+0x2b4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d013      	beq.n	800200e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fe6:	e02c      	b.n	8002042 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	623b      	str	r3, [r7, #32]
          break;
 8001fee:	e029      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e024      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	3308      	adds	r3, #8
 8002000:	623b      	str	r3, [r7, #32]
          break;
 8002002:	e01f      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	330c      	adds	r3, #12
 800200a:	623b      	str	r3, [r7, #32]
          break;
 800200c:	e01a      	b.n	8002044 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002016:	2304      	movs	r3, #4
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e013      	b.n	8002044 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	611a      	str	r2, [r3, #16]
          break;
 800202e:	e009      	b.n	8002044 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002030:	2308      	movs	r3, #8
 8002032:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	615a      	str	r2, [r3, #20]
          break;
 800203a:	e003      	b.n	8002044 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
          break;
 8002040:	e000      	b.n	8002044 <HAL_GPIO_Init+0x130>
          break;
 8002042:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d801      	bhi.n	800204e <HAL_GPIO_Init+0x13a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	e001      	b.n	8002052 <HAL_GPIO_Init+0x13e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3304      	adds	r3, #4
 8002052:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2bff      	cmp	r3, #255	; 0xff
 8002058:	d802      	bhi.n	8002060 <HAL_GPIO_Init+0x14c>
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	e002      	b.n	8002066 <HAL_GPIO_Init+0x152>
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	3b08      	subs	r3, #8
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	210f      	movs	r1, #15
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	fa01 f303 	lsl.w	r3, r1, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80b1 	beq.w	80021f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002094:	4b4d      	ldr	r3, [pc, #308]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <HAL_GPIO_Init+0x2b8>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020ac:	4a48      	ldr	r2, [pc, #288]	; (80021d0 <HAL_GPIO_Init+0x2bc>)
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	089b      	lsrs	r3, r3, #2
 80020b2:	3302      	adds	r3, #2
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	220f      	movs	r2, #15
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a40      	ldr	r2, [pc, #256]	; (80021d4 <HAL_GPIO_Init+0x2c0>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <HAL_GPIO_Init+0x1ec>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3f      	ldr	r2, [pc, #252]	; (80021d8 <HAL_GPIO_Init+0x2c4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00d      	beq.n	80020fc <HAL_GPIO_Init+0x1e8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3e      	ldr	r2, [pc, #248]	; (80021dc <HAL_GPIO_Init+0x2c8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <HAL_GPIO_Init+0x1e4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3d      	ldr	r2, [pc, #244]	; (80021e0 <HAL_GPIO_Init+0x2cc>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d101      	bne.n	80020f4 <HAL_GPIO_Init+0x1e0>
 80020f0:	2303      	movs	r3, #3
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f4:	2304      	movs	r3, #4
 80020f6:	e004      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <HAL_GPIO_Init+0x1ee>
 8002100:	2300      	movs	r3, #0
 8002102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4093      	lsls	r3, r2
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002112:	492f      	ldr	r1, [pc, #188]	; (80021d0 <HAL_GPIO_Init+0x2bc>)
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	089b      	lsrs	r3, r3, #2
 8002118:	3302      	adds	r3, #2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d006      	beq.n	800213a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	492c      	ldr	r1, [pc, #176]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e006      	b.n	8002148 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	43db      	mvns	r3, r3
 8002142:	4928      	ldr	r1, [pc, #160]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002144:	4013      	ands	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d006      	beq.n	8002162 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	4922      	ldr	r1, [pc, #136]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	e006      	b.n	8002170 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	43db      	mvns	r3, r3
 800216a:	491e      	ldr	r1, [pc, #120]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800216c:	4013      	ands	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	4918      	ldr	r1, [pc, #96]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
 8002188:	e006      	b.n	8002198 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800218a:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	43db      	mvns	r3, r3
 8002192:	4914      	ldr	r1, [pc, #80]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 8002194:	4013      	ands	r3, r2
 8002196:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d021      	beq.n	80021e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	490e      	ldr	r1, [pc, #56]	; (80021e4 <HAL_GPIO_Init+0x2d0>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60cb      	str	r3, [r1, #12]
 80021b0:	e021      	b.n	80021f6 <HAL_GPIO_Init+0x2e2>
 80021b2:	bf00      	nop
 80021b4:	10320000 	.word	0x10320000
 80021b8:	10310000 	.word	0x10310000
 80021bc:	10220000 	.word	0x10220000
 80021c0:	10210000 	.word	0x10210000
 80021c4:	10120000 	.word	0x10120000
 80021c8:	10110000 	.word	0x10110000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40010800 	.word	0x40010800
 80021d8:	40010c00 	.word	0x40010c00
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40011400 	.word	0x40011400
 80021e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_GPIO_Init+0x304>)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	4909      	ldr	r1, [pc, #36]	; (8002218 <HAL_GPIO_Init+0x304>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	3301      	adds	r3, #1
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	f47f ae8e 	bne.w	8001f28 <HAL_GPIO_Init+0x14>
  }
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	372c      	adds	r7, #44	; 0x2c
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr
 8002218:	40010400 	.word	0x40010400

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002238:	e003      	b.n	8002242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	041a      	lsls	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43d9      	mvns	r1, r3
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	400b      	ands	r3, r1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	611a      	str	r2, [r3, #16]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
	...

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e26c      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8087 	beq.w	80023ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a0:	4b92      	ldr	r3, [pc, #584]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b04      	cmp	r3, #4
 80022aa:	d00c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ac:	4b8f      	ldr	r3, [pc, #572]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d112      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
 80022b8:	4b8c      	ldr	r3, [pc, #560]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c4:	d10b      	bne.n	80022de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c6:	4b89      	ldr	r3, [pc, #548]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d06c      	beq.n	80023ac <HAL_RCC_OscConfig+0x12c>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d168      	bne.n	80023ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e246      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x76>
 80022e8:	4b80      	ldr	r3, [pc, #512]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a7f      	ldr	r2, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80022ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	e02e      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_RCC_OscConfig+0x98>
 80022fe:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7a      	ldr	r2, [pc, #488]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a77      	ldr	r2, [pc, #476]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002314:	6013      	str	r3, [r2, #0]
 8002316:	e01d      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0xbc>
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a71      	ldr	r2, [pc, #452]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	e00b      	b.n	8002354 <HAL_RCC_OscConfig+0xd4>
 800233c:	4b6b      	ldr	r3, [pc, #428]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b68      	ldr	r3, [pc, #416]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a67      	ldr	r2, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 800234e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d013      	beq.n	8002384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7fe fd76 	bl	8000e4c <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe fd72 	bl	8000e4c <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1fa      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002376:	4b5d      	ldr	r3, [pc, #372]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0xe4>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe fd62 	bl	8000e4c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800238c:	f7fe fd5e 	bl	8000e4c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b64      	cmp	r3, #100	; 0x64
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1e6      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239e:	4b53      	ldr	r3, [pc, #332]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x10c>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d063      	beq.n	8002482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ba:	4b4c      	ldr	r3, [pc, #304]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 030c 	and.w	r3, r3, #12
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00b      	beq.n	80023de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023c6:	4b49      	ldr	r3, [pc, #292]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d11c      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
 80023d2:	4b46      	ldr	r3, [pc, #280]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d116      	bne.n	800240c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e1ba      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	4b3d      	ldr	r3, [pc, #244]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4939      	ldr	r1, [pc, #228]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240a:	e03a      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002416:	2201      	movs	r2, #1
 8002418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241a:	f7fe fd17 	bl	8000e4c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7fe fd13 	bl	8000e4c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e19b      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002434:	4b2d      	ldr	r3, [pc, #180]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4927      	ldr	r1, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]
 8002454:	e015      	b.n	8002482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_OscConfig+0x270>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fcf6 	bl	8000e4c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fcf2 	bl	8000e4c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e17a      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b00      	cmp	r3, #0
 800248c:	d03a      	beq.n	8002504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d019      	beq.n	80024ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 8002498:	2201      	movs	r2, #1
 800249a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249c:	f7fe fcd6 	bl	8000e4c <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a4:	f7fe fcd2 	bl	8000e4c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e15a      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCC_OscConfig+0x26c>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f000 fad8 	bl	8002a78 <RCC_Delay>
 80024c8:	e01c      	b.n	8002504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <HAL_RCC_OscConfig+0x274>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe fcbc 	bl	8000e4c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d6:	e00f      	b.n	80024f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe fcb8 	bl	8000e4c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d908      	bls.n	80024f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e140      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	42420000 	.word	0x42420000
 80024f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b9e      	ldr	r3, [pc, #632]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e9      	bne.n	80024d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80a6 	beq.w	800265e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b97      	ldr	r3, [pc, #604]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10d      	bne.n	800253e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	4b94      	ldr	r3, [pc, #592]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a93      	ldr	r2, [pc, #588]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b91      	ldr	r3, [pc, #580]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253a:	2301      	movs	r3, #1
 800253c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253e:	4b8e      	ldr	r3, [pc, #568]	; (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d118      	bne.n	800257c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254a:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <HAL_RCC_OscConfig+0x4f8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a8a      	ldr	r2, [pc, #552]	; (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002556:	f7fe fc79 	bl	8000e4c <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7fe fc75 	bl	8000e4c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b64      	cmp	r3, #100	; 0x64
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0fd      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	4b81      	ldr	r3, [pc, #516]	; (8002778 <HAL_RCC_OscConfig+0x4f8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x312>
 8002584:	4b7b      	ldr	r3, [pc, #492]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	4a7a      	ldr	r2, [pc, #488]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	6213      	str	r3, [r2, #32]
 8002590:	e02d      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x334>
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a75      	ldr	r2, [pc, #468]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b73      	ldr	r3, [pc, #460]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a72      	ldr	r2, [pc, #456]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	e01c      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_OscConfig+0x356>
 80025bc:	4b6d      	ldr	r3, [pc, #436]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4a6c      	ldr	r2, [pc, #432]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6213      	str	r3, [r2, #32]
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a69      	ldr	r2, [pc, #420]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e00b      	b.n	80025ee <HAL_RCC_OscConfig+0x36e>
 80025d6:	4b67      	ldr	r3, [pc, #412]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4a66      	ldr	r2, [pc, #408]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	f023 0301 	bic.w	r3, r3, #1
 80025e0:	6213      	str	r3, [r2, #32]
 80025e2:	4b64      	ldr	r3, [pc, #400]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	4a63      	ldr	r2, [pc, #396]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	f023 0304 	bic.w	r3, r3, #4
 80025ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d015      	beq.n	8002622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7fe fc29 	bl	8000e4c <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fc25 	bl	8000e4c <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0ab      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	4b57      	ldr	r3, [pc, #348]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ee      	beq.n	80025fe <HAL_RCC_OscConfig+0x37e>
 8002620:	e014      	b.n	800264c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe fc13 	bl	8000e4c <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7fe fc0f 	bl	8000e4c <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e095      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002640:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ee      	bne.n	800262a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d105      	bne.n	800265e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002652:	4b48      	ldr	r3, [pc, #288]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a47      	ldr	r2, [pc, #284]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8081 	beq.w	800276a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002668:	4b42      	ldr	r3, [pc, #264]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b08      	cmp	r3, #8
 8002672:	d061      	beq.n	8002738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b02      	cmp	r3, #2
 800267a:	d146      	bne.n	800270a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267c:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_RCC_OscConfig+0x4fc>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fbe3 	bl	8000e4c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fbdf 	bl	8000e4c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e067      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269c:	4b35      	ldr	r3, [pc, #212]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b0:	d108      	bne.n	80026c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b2:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	492d      	ldr	r1, [pc, #180]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a19      	ldr	r1, [r3, #32]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	430b      	orrs	r3, r1
 80026d6:	4927      	ldr	r1, [pc, #156]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <HAL_RCC_OscConfig+0x4fc>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fbb3 	bl	8000e4c <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fbaf 	bl	8000e4c <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e037      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x46a>
 8002708:	e02f      	b.n	800276a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_RCC_OscConfig+0x4fc>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe fb9c 	bl	8000e4c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fb98 	bl	8000e4c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e020      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x498>
 8002736:	e018      	b.n	800276a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e013      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_OscConfig+0x4f4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	40007000 	.word	0x40007000
 800277c:	42420060 	.word	0x42420060

08002780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0d0      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002794:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d910      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 0207 	bic.w	r2, r3, #7
 80027aa:	4965      	ldr	r1, [pc, #404]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a58      	ldr	r2, [pc, #352]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a52      	ldr	r2, [pc, #328]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d040      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d115      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e073      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e06b      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285e:	4b39      	ldr	r3, [pc, #228]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	4936      	ldr	r1, [pc, #216]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002870:	f7fe faec 	bl	8000e4c <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	e00a      	b.n	800288e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002878:	f7fe fae8 	bl	8000e4c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e053      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 020c 	and.w	r2, r3, #12
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	429a      	cmp	r2, r3
 800289e:	d1eb      	bne.n	8002878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a0:	4b27      	ldr	r3, [pc, #156]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d210      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0207 	bic.w	r2, r3, #7
 80028b6:	4922      	ldr	r1, [pc, #136]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_RCC_ClockConfig+0x1c0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f821 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_ClockConfig+0x1c4>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	; (8002948 <HAL_RCC_ClockConfig+0x1c8>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1cc>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_ClockConfig+0x1d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fa4a 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40022000 	.word	0x40022000
 8002944:	40021000 	.word	0x40021000
 8002948:	08004ca4 	.word	0x08004ca4
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b490      	push	{r4, r7}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800295a:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb0>)
 800295c:	1d3c      	adds	r4, r7, #4
 800295e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002964:	f240 2301 	movw	r3, #513	; 0x201
 8002968:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800297a:	2300      	movs	r3, #0
 800297c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800297e:	4b22      	ldr	r3, [pc, #136]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	2b04      	cmp	r3, #4
 800298c:	d002      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x40>
 800298e:	2b08      	cmp	r3, #8
 8002990:	d003      	beq.n	800299a <HAL_RCC_GetSysClockFreq+0x46>
 8002992:	e02d      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002996:	623b      	str	r3, [r7, #32]
      break;
 8002998:	e02d      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	0c9b      	lsrs	r3, r3, #18
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029a6:	4413      	add	r3, r2
 80029a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d013      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	0c5b      	lsrs	r3, r3, #17
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029c6:	4413      	add	r3, r2
 80029c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d2:	fb02 f203 	mul.w	r2, r2, r3
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	e004      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	623b      	str	r3, [r7, #32]
      break;
 80029ee:	e002      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f2:	623b      	str	r3, [r7, #32]
      break;
 80029f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f6:	6a3b      	ldr	r3, [r7, #32]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc90      	pop	{r4, r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	08004c94 	.word	0x08004c94
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	007a1200 	.word	0x007a1200
 8002a10:	003d0900 	.word	0x003d0900

08002a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a18:	4b02      	ldr	r3, [pc, #8]	; (8002a24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000000 	.word	0x20000000

08002a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a2c:	f7ff fff2 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	; (8002a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08004cb4 	.word	0x08004cb4

08002a50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a54:	f7ff ffde 	bl	8002a14 <HAL_RCC_GetHCLKFreq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0adb      	lsrs	r3, r3, #11
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	4903      	ldr	r1, [pc, #12]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a66:	5ccb      	ldrb	r3, [r1, r3]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08004cb4 	.word	0x08004cb4

08002a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <RCC_Delay+0x34>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <RCC_Delay+0x38>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0a5b      	lsrs	r3, r3, #9
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	fb02 f303 	mul.w	r3, r2, r3
 8002a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a94:	bf00      	nop
  }
  while (Delay --);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1e5a      	subs	r2, r3, #1
 8002a9a:	60fa      	str	r2, [r7, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1f9      	bne.n	8002a94 <RCC_Delay+0x1c>
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e041      	b.n	8002b4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7fe f87a 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4610      	mov	r0, r2
 8002af4:	f000 f944 	bl	8002d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d001      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e03a      	b.n	8002be2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_TIM_Base_Start_IT+0x98>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x58>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b96:	d009      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x58>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x58>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d111      	bne.n	8002bd0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d010      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0201 	orr.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bce:	e007      	b.n	8002be0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800

08002bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_ConfigClockSource+0x18>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0b3      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x180>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c48:	d03e      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0xd0>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4e:	f200 8087 	bhi.w	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	f000 8085 	beq.w	8002d64 <HAL_TIM_ConfigClockSource+0x16c>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c5e:	d87f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c60:	2b70      	cmp	r3, #112	; 0x70
 8002c62:	d01a      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0xa2>
 8002c64:	2b70      	cmp	r3, #112	; 0x70
 8002c66:	d87b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c68:	2b60      	cmp	r3, #96	; 0x60
 8002c6a:	d050      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x116>
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d877      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c70:	2b50      	cmp	r3, #80	; 0x50
 8002c72:	d03c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xf6>
 8002c74:	2b50      	cmp	r3, #80	; 0x50
 8002c76:	d873      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d058      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x136>
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d86f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c80:	2b30      	cmp	r3, #48	; 0x30
 8002c82:	d064      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
 8002c84:	2b30      	cmp	r3, #48	; 0x30
 8002c86:	d86b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d060      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d867      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d05a      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c98:	e062      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f000 f942 	bl	8002f32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	609a      	str	r2, [r3, #8]
      break;
 8002cc6:	e04e      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f000 f92b 	bl	8002f32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e03b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 f8a2 	bl	8002e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2150      	movs	r1, #80	; 0x50
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f8f9 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e02b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 f8c0 	bl	8002ea0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2160      	movs	r1, #96	; 0x60
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f8e9 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e01b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 f882 	bl	8002e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	; 0x40
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f8d9 	bl	8002efe <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e00b      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 f8d0 	bl	8002efe <TIM_ITRx_SetConfig>
        break;
 8002d5e:	e002      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d60:	bf00      	nop
 8002d62:	e000      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002d64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <TIM_Base_SetConfig+0xb8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <TIM_Base_SetConfig+0x30>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9e:	d007      	beq.n	8002db0 <TIM_Base_SetConfig+0x30>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <TIM_Base_SetConfig+0xbc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d003      	beq.n	8002db0 <TIM_Base_SetConfig+0x30>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a25      	ldr	r2, [pc, #148]	; (8002e40 <TIM_Base_SetConfig+0xc0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d108      	bne.n	8002dc2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <TIM_Base_SetConfig+0xb8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd0:	d007      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <TIM_Base_SetConfig+0xbc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_Base_SetConfig+0x62>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <TIM_Base_SetConfig+0xc0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d108      	bne.n	8002df4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <TIM_Base_SetConfig+0xb8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d103      	bne.n	8002e28 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	615a      	str	r2, [r3, #20]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800

08002e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	f023 0201 	bic.w	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	011b      	lsls	r3, r3, #4
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f023 030a 	bic.w	r3, r3, #10
 8002e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	621a      	str	r2, [r3, #32]
}
 8002e96:	bf00      	nop
 8002e98:	371c      	adds	r7, #28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f023 0210 	bic.w	r2, r3, #16
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	031b      	lsls	r3, r3, #12
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002edc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	621a      	str	r2, [r3, #32]
}
 8002ef4:	bf00      	nop
 8002ef6:	371c      	adds	r7, #28
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f043 0307 	orr.w	r3, r3, #7
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b087      	sub	sp, #28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	021a      	lsls	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	609a      	str	r2, [r3, #8]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e046      	b.n	8003016 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a16      	ldr	r2, [pc, #88]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00e      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d009      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d004      	beq.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a10      	ldr	r2, [pc, #64]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10c      	bne.n	8003004 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	40012c00 	.word	0x40012c00
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800

0800302c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e03f      	b.n	80030be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd fe0a 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800306e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fc85 	bl	8003980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b08a      	sub	sp, #40	; 0x28
 80030ca:	af02      	add	r7, sp, #8
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d17c      	bne.n	80031e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_UART_Transmit+0x2c>
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e075      	b.n	80031e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_UART_Transmit+0x3e>
 8003100:	2302      	movs	r3, #2
 8003102:	e06e      	b.n	80031e2 <HAL_UART_Transmit+0x11c>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2221      	movs	r2, #33	; 0x21
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800311a:	f7fd fe97 	bl	8000e4c <HAL_GetTick>
 800311e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	88fa      	ldrh	r2, [r7, #6]
 8003124:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	d108      	bne.n	8003148 <HAL_UART_Transmit+0x82>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d104      	bne.n	8003148 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	e003      	b.n	8003150 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003158:	e02a      	b.n	80031b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	2200      	movs	r2, #0
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa38 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e036      	b.n	80031e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003188:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	3302      	adds	r3, #2
 800318e:	61bb      	str	r3, [r7, #24]
 8003190:	e007      	b.n	80031a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	3301      	adds	r3, #1
 80031a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1cf      	bne.n	800315a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2200      	movs	r2, #0
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fa08 	bl	80035da <UART_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e006      	b.n	80031e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	4613      	mov	r3, r2
 80031f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	d11d      	bne.n	8003240 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_UART_Receive_IT+0x26>
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e016      	b.n	8003242 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_UART_Receive_IT+0x38>
 800321e:	2302      	movs	r3, #2
 8003220:	e00f      	b.n	8003242 <HAL_UART_Receive_IT+0x58>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	461a      	mov	r2, r3
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fa19 	bl	800366e <UART_Start_Receive_IT>
 800323c:	4603      	mov	r3, r0
 800323e:	e000      	b.n	8003242 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003240:	2302      	movs	r3, #2
  }
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b08a      	sub	sp, #40	; 0x28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_UART_IRQHandler+0x52>
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fac9 	bl	800382e <UART_Receive_IT>
      return;
 800329c:	e17b      	b.n	8003596 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80b1 	beq.w	8003408 <HAL_UART_IRQHandler+0x1bc>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <HAL_UART_IRQHandler+0x70>
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80a6 	beq.w	8003408 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_UART_IRQHandler+0x90>
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f043 0201 	orr.w	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_UART_IRQHandler+0xb0>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	f043 0202 	orr.w	r2, r3, #2
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_UART_IRQHandler+0xd0>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d005      	beq.n	800331c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	f043 0204 	orr.w	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00f      	beq.n	8003346 <HAL_UART_IRQHandler+0xfa>
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d104      	bne.n	800333a <HAL_UART_IRQHandler+0xee>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0208 	orr.w	r2, r3, #8
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 811e 	beq.w	800358c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d007      	beq.n	800336a <HAL_UART_IRQHandler+0x11e>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f003 0320 	and.w	r3, r3, #32
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fa62 	bl	800382e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <HAL_UART_IRQHandler+0x146>
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d031      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9a4 	bl	80036e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d023      	beq.n	80033ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d013      	beq.n	80033e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	4a76      	ldr	r2, [pc, #472]	; (800359c <HAL_UART_IRQHandler+0x350>)
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fd2c 	bl	8001e28 <HAL_DMA_Abort_IT>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d016      	beq.n	8003404 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033e0:	4610      	mov	r0, r2
 80033e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	e00e      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8e3 	bl	80035b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ec:	e00a      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8df 	bl	80035b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e006      	b.n	8003404 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8db 	bl	80035b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003402:	e0c3      	b.n	800358c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003404:	bf00      	nop
    return;
 8003406:	e0c1      	b.n	800358c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	2b01      	cmp	r3, #1
 800340e:	f040 80a1 	bne.w	8003554 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 809b 	beq.w	8003554 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8095 	beq.w	8003554 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04e      	beq.n	80034ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003458:	8a3b      	ldrh	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 8098 	beq.w	8003590 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003464:	8a3a      	ldrh	r2, [r7, #16]
 8003466:	429a      	cmp	r2, r3
 8003468:	f080 8092 	bcs.w	8003590 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	8a3a      	ldrh	r2, [r7, #16]
 8003470:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b20      	cmp	r3, #32
 800347a:	d02b      	beq.n	80034d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0210 	bic.w	r2, r2, #16
 80034c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fc6f 	bl	8001db2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f86d 	bl	80035c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80034ea:	e051      	b.n	8003590 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d047      	beq.n	8003594 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003504:	8a7b      	ldrh	r3, [r7, #18]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d044      	beq.n	8003594 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003518:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0210 	bic.w	r2, r2, #16
 8003546:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003548:	8a7b      	ldrh	r3, [r7, #18]
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f839 	bl	80035c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003552:	e01f      	b.n	8003594 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_UART_IRQHandler+0x324>
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f8f9 	bl	8003760 <UART_Transmit_IT>
    return;
 800356e:	e012      	b.n	8003596 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <HAL_UART_IRQHandler+0x34a>
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f93a 	bl	80037fe <UART_EndTransmit_IT>
    return;
 800358a:	e004      	b.n	8003596 <HAL_UART_IRQHandler+0x34a>
    return;
 800358c:	bf00      	nop
 800358e:	e002      	b.n	8003596 <HAL_UART_IRQHandler+0x34a>
      return;
 8003590:	bf00      	nop
 8003592:	e000      	b.n	8003596 <HAL_UART_IRQHandler+0x34a>
      return;
 8003594:	bf00      	nop
  }
}
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	08003739 	.word	0x08003739

080035a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ea:	e02c      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f2:	d028      	beq.n	8003646 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x30>
 80035fa:	f7fd fc27 	bl	8000e4c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	429a      	cmp	r2, r3
 8003608:	d21d      	bcs.n	8003646 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003618:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e00f      	b.n	8003666 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4013      	ands	r3, r2
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	429a      	cmp	r2, r3
 8003654:	bf0c      	ite	eq
 8003656:	2301      	moveq	r3, #1
 8003658:	2300      	movne	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	79fb      	ldrb	r3, [r7, #7]
 8003660:	429a      	cmp	r2, r3
 8003662:	d0c3      	beq.n	80035ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	4613      	mov	r3, r2
 800367a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	88fa      	ldrh	r2, [r7, #6]
 800368c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2222      	movs	r2, #34	; 0x22
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0220 	orr.w	r2, r2, #32
 80036d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0201 	bic.w	r2, r2, #1
 8003706:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	d107      	bne.n	8003720 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0210 	bic.w	r2, r2, #16
 800371e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2220      	movs	r2, #32
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f7ff ff2d 	bl	80035b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b21      	cmp	r3, #33	; 0x21
 8003772:	d13e      	bne.n	80037f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d114      	bne.n	80037a8 <UART_Transmit_IT+0x48>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d110      	bne.n	80037a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800379a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	1c9a      	adds	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]
 80037a6:	e008      	b.n	80037ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6211      	str	r1, [r2, #32]
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4619      	mov	r1, r3
 80037c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e000      	b.n	80037f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
  }
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff febe 	bl	80035a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b22      	cmp	r3, #34	; 0x22
 8003840:	f040 8099 	bne.w	8003976 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d117      	bne.n	800387e <UART_Receive_IT+0x50>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d113      	bne.n	800387e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	b29b      	uxth	r3, r3
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	b29a      	uxth	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	1c9a      	adds	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
 800387c:	e026      	b.n	80038cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d007      	beq.n	80038a2 <UART_Receive_IT+0x74>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <UART_Receive_IT+0x82>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e008      	b.n	80038c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d148      	bne.n	8003972 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0220 	bic.w	r2, r2, #32
 80038ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	2b01      	cmp	r3, #1
 800391e:	d123      	bne.n	8003968 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0210 	bic.w	r2, r2, #16
 8003934:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b10      	cmp	r3, #16
 8003942:	d10a      	bne.n	800395a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fe2f 	bl	80035c4 <HAL_UARTEx_RxEventCallback>
 8003966:	e002      	b.n	800396e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fd f9d3 	bl	8000d14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e002      	b.n	8003978 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039ba:	f023 030c 	bic.w	r3, r3, #12
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6812      	ldr	r2, [r2, #0]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	430b      	orrs	r3, r1
 80039c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699a      	ldr	r2, [r3, #24]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2c      	ldr	r2, [pc, #176]	; (8003a94 <UART_SetConfig+0x114>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d103      	bne.n	80039f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7ff f832 	bl	8002a50 <HAL_RCC_GetPCLK2Freq>
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	e002      	b.n	80039f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039f0:	f7ff f81a 	bl	8002a28 <HAL_RCC_GetPCLK1Freq>
 80039f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009a      	lsls	r2, r3, #2
 8003a00:	441a      	add	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	4a22      	ldr	r2, [pc, #136]	; (8003a98 <UART_SetConfig+0x118>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	0119      	lsls	r1, r3, #4
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009a      	lsls	r2, r3, #2
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <UART_SetConfig+0x118>)
 8003a2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2064      	movs	r0, #100	; 0x64
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	3332      	adds	r3, #50	; 0x32
 8003a40:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <UART_SetConfig+0x118>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	095b      	lsrs	r3, r3, #5
 8003a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a4c:	4419      	add	r1, r3
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	009a      	lsls	r2, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <UART_SetConfig+0x118>)
 8003a66:	fba3 0302 	umull	r0, r3, r3, r2
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2064      	movs	r0, #100	; 0x64
 8003a6e:	fb00 f303 	mul.w	r3, r0, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	3332      	adds	r3, #50	; 0x32
 8003a78:	4a07      	ldr	r2, [pc, #28]	; (8003a98 <UART_SetConfig+0x118>)
 8003a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	f003 020f 	and.w	r2, r3, #15
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	440a      	add	r2, r1
 8003a8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40013800 	.word	0x40013800
 8003a98:	51eb851f 	.word	0x51eb851f

08003a9c <__errno>:
 8003a9c:	4b01      	ldr	r3, [pc, #4]	; (8003aa4 <__errno+0x8>)
 8003a9e:	6818      	ldr	r0, [r3, #0]
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	2000000c 	.word	0x2000000c

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	2600      	movs	r6, #0
 8003aac:	4d0c      	ldr	r5, [pc, #48]	; (8003ae0 <__libc_init_array+0x38>)
 8003aae:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003ab0:	1b64      	subs	r4, r4, r5
 8003ab2:	10a4      	asrs	r4, r4, #2
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	f001 f8da 	bl	8004c70 <_init>
 8003abc:	2600      	movs	r6, #0
 8003abe:	4d0a      	ldr	r5, [pc, #40]	; (8003ae8 <__libc_init_array+0x40>)
 8003ac0:	4c0a      	ldr	r4, [pc, #40]	; (8003aec <__libc_init_array+0x44>)
 8003ac2:	1b64      	subs	r4, r4, r5
 8003ac4:	10a4      	asrs	r4, r4, #2
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08004f08 	.word	0x08004f08
 8003ae4:	08004f08 	.word	0x08004f08
 8003ae8:	08004f08 	.word	0x08004f08
 8003aec:	08004f0c 	.word	0x08004f0c

08003af0 <memset>:
 8003af0:	4603      	mov	r3, r0
 8003af2:	4402      	add	r2, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	f803 1b01 	strb.w	r1, [r3], #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <strtok>:
 8003b00:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <strtok+0x5c>)
 8003b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b06:	681f      	ldr	r7, [r3, #0]
 8003b08:	4605      	mov	r5, r0
 8003b0a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003b0c:	460e      	mov	r6, r1
 8003b0e:	b9ec      	cbnz	r4, 8003b4c <strtok+0x4c>
 8003b10:	2050      	movs	r0, #80	; 0x50
 8003b12:	f000 f911 	bl	8003d38 <malloc>
 8003b16:	4602      	mov	r2, r0
 8003b18:	65b8      	str	r0, [r7, #88]	; 0x58
 8003b1a:	b920      	cbnz	r0, 8003b26 <strtok+0x26>
 8003b1c:	2157      	movs	r1, #87	; 0x57
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <strtok+0x60>)
 8003b20:	4810      	ldr	r0, [pc, #64]	; (8003b64 <strtok+0x64>)
 8003b22:	f000 f8d9 	bl	8003cd8 <__assert_func>
 8003b26:	e9c0 4400 	strd	r4, r4, [r0]
 8003b2a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003b2e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003b32:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003b36:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003b3a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003b3e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003b42:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003b46:	6184      	str	r4, [r0, #24]
 8003b48:	7704      	strb	r4, [r0, #28]
 8003b4a:	6244      	str	r4, [r0, #36]	; 0x24
 8003b4c:	4631      	mov	r1, r6
 8003b4e:	4628      	mov	r0, r5
 8003b50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b52:	2301      	movs	r3, #1
 8003b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	f000 b806 	b.w	8003b68 <__strtok_r>
 8003b5c:	2000000c 	.word	0x2000000c
 8003b60:	08004cc0 	.word	0x08004cc0
 8003b64:	08004cd7 	.word	0x08004cd7

08003b68 <__strtok_r>:
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b908      	cbnz	r0, 8003b70 <__strtok_r+0x8>
 8003b6c:	6810      	ldr	r0, [r2, #0]
 8003b6e:	b188      	cbz	r0, 8003b94 <__strtok_r+0x2c>
 8003b70:	4604      	mov	r4, r0
 8003b72:	460f      	mov	r7, r1
 8003b74:	4620      	mov	r0, r4
 8003b76:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003b7a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003b7e:	b91e      	cbnz	r6, 8003b88 <__strtok_r+0x20>
 8003b80:	b965      	cbnz	r5, 8003b9c <__strtok_r+0x34>
 8003b82:	4628      	mov	r0, r5
 8003b84:	6015      	str	r5, [r2, #0]
 8003b86:	e005      	b.n	8003b94 <__strtok_r+0x2c>
 8003b88:	42b5      	cmp	r5, r6
 8003b8a:	d1f6      	bne.n	8003b7a <__strtok_r+0x12>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <__strtok_r+0xa>
 8003b90:	6014      	str	r4, [r2, #0]
 8003b92:	7003      	strb	r3, [r0, #0]
 8003b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b96:	461c      	mov	r4, r3
 8003b98:	e00c      	b.n	8003bb4 <__strtok_r+0x4c>
 8003b9a:	b915      	cbnz	r5, 8003ba2 <__strtok_r+0x3a>
 8003b9c:	460e      	mov	r6, r1
 8003b9e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003ba2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003ba6:	42ab      	cmp	r3, r5
 8003ba8:	d1f7      	bne.n	8003b9a <__strtok_r+0x32>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f3      	beq.n	8003b96 <__strtok_r+0x2e>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003bb4:	6014      	str	r4, [r2, #0]
 8003bb6:	e7ed      	b.n	8003b94 <__strtok_r+0x2c>

08003bb8 <_strtol_l.isra.0>:
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbe:	4686      	mov	lr, r0
 8003bc0:	d001      	beq.n	8003bc6 <_strtol_l.isra.0+0xe>
 8003bc2:	2b24      	cmp	r3, #36	; 0x24
 8003bc4:	d906      	bls.n	8003bd4 <_strtol_l.isra.0+0x1c>
 8003bc6:	f7ff ff69 	bl	8003a9c <__errno>
 8003bca:	2316      	movs	r3, #22
 8003bcc:	6003      	str	r3, [r0, #0]
 8003bce:	2000      	movs	r0, #0
 8003bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd4:	468c      	mov	ip, r1
 8003bd6:	4e3a      	ldr	r6, [pc, #232]	; (8003cc0 <_strtol_l.isra.0+0x108>)
 8003bd8:	4660      	mov	r0, ip
 8003bda:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003bde:	5da5      	ldrb	r5, [r4, r6]
 8003be0:	f015 0508 	ands.w	r5, r5, #8
 8003be4:	d1f8      	bne.n	8003bd8 <_strtol_l.isra.0+0x20>
 8003be6:	2c2d      	cmp	r4, #45	; 0x2d
 8003be8:	d133      	bne.n	8003c52 <_strtol_l.isra.0+0x9a>
 8003bea:	f04f 0801 	mov.w	r8, #1
 8003bee:	f89c 4000 	ldrb.w	r4, [ip]
 8003bf2:	f100 0c02 	add.w	ip, r0, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d05d      	beq.n	8003cb6 <_strtol_l.isra.0+0xfe>
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d10c      	bne.n	8003c18 <_strtol_l.isra.0+0x60>
 8003bfe:	2c30      	cmp	r4, #48	; 0x30
 8003c00:	d10a      	bne.n	8003c18 <_strtol_l.isra.0+0x60>
 8003c02:	f89c 0000 	ldrb.w	r0, [ip]
 8003c06:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003c0a:	2858      	cmp	r0, #88	; 0x58
 8003c0c:	d14e      	bne.n	8003cac <_strtol_l.isra.0+0xf4>
 8003c0e:	2310      	movs	r3, #16
 8003c10:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003c14:	f10c 0c02 	add.w	ip, ip, #2
 8003c18:	2500      	movs	r5, #0
 8003c1a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8003c1e:	3f01      	subs	r7, #1
 8003c20:	fbb7 f9f3 	udiv	r9, r7, r3
 8003c24:	4628      	mov	r0, r5
 8003c26:	fb03 7a19 	mls	sl, r3, r9, r7
 8003c2a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003c2e:	2e09      	cmp	r6, #9
 8003c30:	d818      	bhi.n	8003c64 <_strtol_l.isra.0+0xac>
 8003c32:	4634      	mov	r4, r6
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	dd24      	ble.n	8003c82 <_strtol_l.isra.0+0xca>
 8003c38:	2d00      	cmp	r5, #0
 8003c3a:	db1f      	blt.n	8003c7c <_strtol_l.isra.0+0xc4>
 8003c3c:	4581      	cmp	r9, r0
 8003c3e:	d31d      	bcc.n	8003c7c <_strtol_l.isra.0+0xc4>
 8003c40:	d101      	bne.n	8003c46 <_strtol_l.isra.0+0x8e>
 8003c42:	45a2      	cmp	sl, r4
 8003c44:	db1a      	blt.n	8003c7c <_strtol_l.isra.0+0xc4>
 8003c46:	2501      	movs	r5, #1
 8003c48:	fb00 4003 	mla	r0, r0, r3, r4
 8003c4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003c50:	e7eb      	b.n	8003c2a <_strtol_l.isra.0+0x72>
 8003c52:	2c2b      	cmp	r4, #43	; 0x2b
 8003c54:	bf08      	it	eq
 8003c56:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003c5a:	46a8      	mov	r8, r5
 8003c5c:	bf08      	it	eq
 8003c5e:	f100 0c02 	addeq.w	ip, r0, #2
 8003c62:	e7c8      	b.n	8003bf6 <_strtol_l.isra.0+0x3e>
 8003c64:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003c68:	2e19      	cmp	r6, #25
 8003c6a:	d801      	bhi.n	8003c70 <_strtol_l.isra.0+0xb8>
 8003c6c:	3c37      	subs	r4, #55	; 0x37
 8003c6e:	e7e1      	b.n	8003c34 <_strtol_l.isra.0+0x7c>
 8003c70:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003c74:	2e19      	cmp	r6, #25
 8003c76:	d804      	bhi.n	8003c82 <_strtol_l.isra.0+0xca>
 8003c78:	3c57      	subs	r4, #87	; 0x57
 8003c7a:	e7db      	b.n	8003c34 <_strtol_l.isra.0+0x7c>
 8003c7c:	f04f 35ff 	mov.w	r5, #4294967295
 8003c80:	e7e4      	b.n	8003c4c <_strtol_l.isra.0+0x94>
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	da08      	bge.n	8003c98 <_strtol_l.isra.0+0xe0>
 8003c86:	2322      	movs	r3, #34	; 0x22
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f8ce 3000 	str.w	r3, [lr]
 8003c8e:	2a00      	cmp	r2, #0
 8003c90:	d09e      	beq.n	8003bd0 <_strtol_l.isra.0+0x18>
 8003c92:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003c96:	e007      	b.n	8003ca8 <_strtol_l.isra.0+0xf0>
 8003c98:	f1b8 0f00 	cmp.w	r8, #0
 8003c9c:	d000      	beq.n	8003ca0 <_strtol_l.isra.0+0xe8>
 8003c9e:	4240      	negs	r0, r0
 8003ca0:	2a00      	cmp	r2, #0
 8003ca2:	d095      	beq.n	8003bd0 <_strtol_l.isra.0+0x18>
 8003ca4:	2d00      	cmp	r5, #0
 8003ca6:	d1f4      	bne.n	8003c92 <_strtol_l.isra.0+0xda>
 8003ca8:	6011      	str	r1, [r2, #0]
 8003caa:	e791      	b.n	8003bd0 <_strtol_l.isra.0+0x18>
 8003cac:	2430      	movs	r4, #48	; 0x30
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1b2      	bne.n	8003c18 <_strtol_l.isra.0+0x60>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	e7b0      	b.n	8003c18 <_strtol_l.isra.0+0x60>
 8003cb6:	2c30      	cmp	r4, #48	; 0x30
 8003cb8:	d0a3      	beq.n	8003c02 <_strtol_l.isra.0+0x4a>
 8003cba:	230a      	movs	r3, #10
 8003cbc:	e7ac      	b.n	8003c18 <_strtol_l.isra.0+0x60>
 8003cbe:	bf00      	nop
 8003cc0:	08004d75 	.word	0x08004d75

08003cc4 <strtol>:
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	460a      	mov	r2, r1
 8003cc8:	4601      	mov	r1, r0
 8003cca:	4802      	ldr	r0, [pc, #8]	; (8003cd4 <strtol+0x10>)
 8003ccc:	6800      	ldr	r0, [r0, #0]
 8003cce:	f7ff bf73 	b.w	8003bb8 <_strtol_l.isra.0>
 8003cd2:	bf00      	nop
 8003cd4:	2000000c 	.word	0x2000000c

08003cd8 <__assert_func>:
 8003cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cda:	4614      	mov	r4, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b09      	ldr	r3, [pc, #36]	; (8003d04 <__assert_func+0x2c>)
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68d8      	ldr	r0, [r3, #12]
 8003ce6:	b14c      	cbz	r4, 8003cfc <__assert_func+0x24>
 8003ce8:	4b07      	ldr	r3, [pc, #28]	; (8003d08 <__assert_func+0x30>)
 8003cea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003cee:	9100      	str	r1, [sp, #0]
 8003cf0:	462b      	mov	r3, r5
 8003cf2:	4906      	ldr	r1, [pc, #24]	; (8003d0c <__assert_func+0x34>)
 8003cf4:	f000 f80e 	bl	8003d14 <fiprintf>
 8003cf8:	f000 fc8a 	bl	8004610 <abort>
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <__assert_func+0x38>)
 8003cfe:	461c      	mov	r4, r3
 8003d00:	e7f3      	b.n	8003cea <__assert_func+0x12>
 8003d02:	bf00      	nop
 8003d04:	2000000c 	.word	0x2000000c
 8003d08:	08004d38 	.word	0x08004d38
 8003d0c:	08004d45 	.word	0x08004d45
 8003d10:	08004d73 	.word	0x08004d73

08003d14 <fiprintf>:
 8003d14:	b40e      	push	{r1, r2, r3}
 8003d16:	b503      	push	{r0, r1, lr}
 8003d18:	4601      	mov	r1, r0
 8003d1a:	ab03      	add	r3, sp, #12
 8003d1c:	4805      	ldr	r0, [pc, #20]	; (8003d34 <fiprintf+0x20>)
 8003d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d22:	6800      	ldr	r0, [r0, #0]
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	f000 f8dd 	bl	8003ee4 <_vfiprintf_r>
 8003d2a:	b002      	add	sp, #8
 8003d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d30:	b003      	add	sp, #12
 8003d32:	4770      	bx	lr
 8003d34:	2000000c 	.word	0x2000000c

08003d38 <malloc>:
 8003d38:	4b02      	ldr	r3, [pc, #8]	; (8003d44 <malloc+0xc>)
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	f000 b84f 	b.w	8003de0 <_malloc_r>
 8003d42:	bf00      	nop
 8003d44:	2000000c 	.word	0x2000000c

08003d48 <_free_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	d043      	beq.n	8003dd8 <_free_r+0x90>
 8003d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d54:	1f0c      	subs	r4, r1, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	bfb8      	it	lt
 8003d5a:	18e4      	addlt	r4, r4, r3
 8003d5c:	f000 fe8c 	bl	8004a78 <__malloc_lock>
 8003d60:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <_free_r+0x94>)
 8003d62:	6813      	ldr	r3, [r2, #0]
 8003d64:	4610      	mov	r0, r2
 8003d66:	b933      	cbnz	r3, 8003d76 <_free_r+0x2e>
 8003d68:	6063      	str	r3, [r4, #4]
 8003d6a:	6014      	str	r4, [r2, #0]
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d72:	f000 be87 	b.w	8004a84 <__malloc_unlock>
 8003d76:	42a3      	cmp	r3, r4
 8003d78:	d90a      	bls.n	8003d90 <_free_r+0x48>
 8003d7a:	6821      	ldr	r1, [r4, #0]
 8003d7c:	1862      	adds	r2, r4, r1
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	bf01      	itttt	eq
 8003d82:	681a      	ldreq	r2, [r3, #0]
 8003d84:	685b      	ldreq	r3, [r3, #4]
 8003d86:	1852      	addeq	r2, r2, r1
 8003d88:	6022      	streq	r2, [r4, #0]
 8003d8a:	6063      	str	r3, [r4, #4]
 8003d8c:	6004      	str	r4, [r0, #0]
 8003d8e:	e7ed      	b.n	8003d6c <_free_r+0x24>
 8003d90:	461a      	mov	r2, r3
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	b10b      	cbz	r3, 8003d9a <_free_r+0x52>
 8003d96:	42a3      	cmp	r3, r4
 8003d98:	d9fa      	bls.n	8003d90 <_free_r+0x48>
 8003d9a:	6811      	ldr	r1, [r2, #0]
 8003d9c:	1850      	adds	r0, r2, r1
 8003d9e:	42a0      	cmp	r0, r4
 8003da0:	d10b      	bne.n	8003dba <_free_r+0x72>
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	4401      	add	r1, r0
 8003da6:	1850      	adds	r0, r2, r1
 8003da8:	4283      	cmp	r3, r0
 8003daa:	6011      	str	r1, [r2, #0]
 8003dac:	d1de      	bne.n	8003d6c <_free_r+0x24>
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4401      	add	r1, r0
 8003db4:	6011      	str	r1, [r2, #0]
 8003db6:	6053      	str	r3, [r2, #4]
 8003db8:	e7d8      	b.n	8003d6c <_free_r+0x24>
 8003dba:	d902      	bls.n	8003dc2 <_free_r+0x7a>
 8003dbc:	230c      	movs	r3, #12
 8003dbe:	602b      	str	r3, [r5, #0]
 8003dc0:	e7d4      	b.n	8003d6c <_free_r+0x24>
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	1821      	adds	r1, r4, r0
 8003dc6:	428b      	cmp	r3, r1
 8003dc8:	bf01      	itttt	eq
 8003dca:	6819      	ldreq	r1, [r3, #0]
 8003dcc:	685b      	ldreq	r3, [r3, #4]
 8003dce:	1809      	addeq	r1, r1, r0
 8003dd0:	6021      	streq	r1, [r4, #0]
 8003dd2:	6063      	str	r3, [r4, #4]
 8003dd4:	6054      	str	r4, [r2, #4]
 8003dd6:	e7c9      	b.n	8003d6c <_free_r+0x24>
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000110 	.word	0x20000110

08003de0 <_malloc_r>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	1ccd      	adds	r5, r1, #3
 8003de4:	f025 0503 	bic.w	r5, r5, #3
 8003de8:	3508      	adds	r5, #8
 8003dea:	2d0c      	cmp	r5, #12
 8003dec:	bf38      	it	cc
 8003dee:	250c      	movcc	r5, #12
 8003df0:	2d00      	cmp	r5, #0
 8003df2:	4606      	mov	r6, r0
 8003df4:	db01      	blt.n	8003dfa <_malloc_r+0x1a>
 8003df6:	42a9      	cmp	r1, r5
 8003df8:	d903      	bls.n	8003e02 <_malloc_r+0x22>
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	6033      	str	r3, [r6, #0]
 8003dfe:	2000      	movs	r0, #0
 8003e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e02:	f000 fe39 	bl	8004a78 <__malloc_lock>
 8003e06:	4921      	ldr	r1, [pc, #132]	; (8003e8c <_malloc_r+0xac>)
 8003e08:	680a      	ldr	r2, [r1, #0]
 8003e0a:	4614      	mov	r4, r2
 8003e0c:	b99c      	cbnz	r4, 8003e36 <_malloc_r+0x56>
 8003e0e:	4f20      	ldr	r7, [pc, #128]	; (8003e90 <_malloc_r+0xb0>)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	b923      	cbnz	r3, 8003e1e <_malloc_r+0x3e>
 8003e14:	4621      	mov	r1, r4
 8003e16:	4630      	mov	r0, r6
 8003e18:	f000 fb2a 	bl	8004470 <_sbrk_r>
 8003e1c:	6038      	str	r0, [r7, #0]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	4630      	mov	r0, r6
 8003e22:	f000 fb25 	bl	8004470 <_sbrk_r>
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	d123      	bne.n	8003e72 <_malloc_r+0x92>
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	4630      	mov	r0, r6
 8003e2e:	6033      	str	r3, [r6, #0]
 8003e30:	f000 fe28 	bl	8004a84 <__malloc_unlock>
 8003e34:	e7e3      	b.n	8003dfe <_malloc_r+0x1e>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	1b5b      	subs	r3, r3, r5
 8003e3a:	d417      	bmi.n	8003e6c <_malloc_r+0x8c>
 8003e3c:	2b0b      	cmp	r3, #11
 8003e3e:	d903      	bls.n	8003e48 <_malloc_r+0x68>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	441c      	add	r4, r3
 8003e44:	6025      	str	r5, [r4, #0]
 8003e46:	e004      	b.n	8003e52 <_malloc_r+0x72>
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	42a2      	cmp	r2, r4
 8003e4c:	bf0c      	ite	eq
 8003e4e:	600b      	streq	r3, [r1, #0]
 8003e50:	6053      	strne	r3, [r2, #4]
 8003e52:	4630      	mov	r0, r6
 8003e54:	f000 fe16 	bl	8004a84 <__malloc_unlock>
 8003e58:	f104 000b 	add.w	r0, r4, #11
 8003e5c:	1d23      	adds	r3, r4, #4
 8003e5e:	f020 0007 	bic.w	r0, r0, #7
 8003e62:	1ac2      	subs	r2, r0, r3
 8003e64:	d0cc      	beq.n	8003e00 <_malloc_r+0x20>
 8003e66:	1a1b      	subs	r3, r3, r0
 8003e68:	50a3      	str	r3, [r4, r2]
 8003e6a:	e7c9      	b.n	8003e00 <_malloc_r+0x20>
 8003e6c:	4622      	mov	r2, r4
 8003e6e:	6864      	ldr	r4, [r4, #4]
 8003e70:	e7cc      	b.n	8003e0c <_malloc_r+0x2c>
 8003e72:	1cc4      	adds	r4, r0, #3
 8003e74:	f024 0403 	bic.w	r4, r4, #3
 8003e78:	42a0      	cmp	r0, r4
 8003e7a:	d0e3      	beq.n	8003e44 <_malloc_r+0x64>
 8003e7c:	1a21      	subs	r1, r4, r0
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f000 faf6 	bl	8004470 <_sbrk_r>
 8003e84:	3001      	adds	r0, #1
 8003e86:	d1dd      	bne.n	8003e44 <_malloc_r+0x64>
 8003e88:	e7cf      	b.n	8003e2a <_malloc_r+0x4a>
 8003e8a:	bf00      	nop
 8003e8c:	20000110 	.word	0x20000110
 8003e90:	20000114 	.word	0x20000114

08003e94 <__sfputc_r>:
 8003e94:	6893      	ldr	r3, [r2, #8]
 8003e96:	b410      	push	{r4}
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	6093      	str	r3, [r2, #8]
 8003e9e:	da07      	bge.n	8003eb0 <__sfputc_r+0x1c>
 8003ea0:	6994      	ldr	r4, [r2, #24]
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	db01      	blt.n	8003eaa <__sfputc_r+0x16>
 8003ea6:	290a      	cmp	r1, #10
 8003ea8:	d102      	bne.n	8003eb0 <__sfputc_r+0x1c>
 8003eaa:	bc10      	pop	{r4}
 8003eac:	f000 baf0 	b.w	8004490 <__swbuf_r>
 8003eb0:	6813      	ldr	r3, [r2, #0]
 8003eb2:	1c58      	adds	r0, r3, #1
 8003eb4:	6010      	str	r0, [r2, #0]
 8003eb6:	7019      	strb	r1, [r3, #0]
 8003eb8:	4608      	mov	r0, r1
 8003eba:	bc10      	pop	{r4}
 8003ebc:	4770      	bx	lr

08003ebe <__sfputs_r>:
 8003ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec0:	4606      	mov	r6, r0
 8003ec2:	460f      	mov	r7, r1
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	18d5      	adds	r5, r2, r3
 8003ec8:	42ac      	cmp	r4, r5
 8003eca:	d101      	bne.n	8003ed0 <__sfputs_r+0x12>
 8003ecc:	2000      	movs	r0, #0
 8003ece:	e007      	b.n	8003ee0 <__sfputs_r+0x22>
 8003ed0:	463a      	mov	r2, r7
 8003ed2:	4630      	mov	r0, r6
 8003ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ed8:	f7ff ffdc 	bl	8003e94 <__sfputc_r>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d1f3      	bne.n	8003ec8 <__sfputs_r+0xa>
 8003ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ee4 <_vfiprintf_r>:
 8003ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee8:	460d      	mov	r5, r1
 8003eea:	4614      	mov	r4, r2
 8003eec:	4698      	mov	r8, r3
 8003eee:	4606      	mov	r6, r0
 8003ef0:	b09d      	sub	sp, #116	; 0x74
 8003ef2:	b118      	cbz	r0, 8003efc <_vfiprintf_r+0x18>
 8003ef4:	6983      	ldr	r3, [r0, #24]
 8003ef6:	b90b      	cbnz	r3, 8003efc <_vfiprintf_r+0x18>
 8003ef8:	f000 fcac 	bl	8004854 <__sinit>
 8003efc:	4b89      	ldr	r3, [pc, #548]	; (8004124 <_vfiprintf_r+0x240>)
 8003efe:	429d      	cmp	r5, r3
 8003f00:	d11b      	bne.n	8003f3a <_vfiprintf_r+0x56>
 8003f02:	6875      	ldr	r5, [r6, #4]
 8003f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f06:	07d9      	lsls	r1, r3, #31
 8003f08:	d405      	bmi.n	8003f16 <_vfiprintf_r+0x32>
 8003f0a:	89ab      	ldrh	r3, [r5, #12]
 8003f0c:	059a      	lsls	r2, r3, #22
 8003f0e:	d402      	bmi.n	8003f16 <_vfiprintf_r+0x32>
 8003f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f12:	f000 fd3d 	bl	8004990 <__retarget_lock_acquire_recursive>
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	071b      	lsls	r3, r3, #28
 8003f1a:	d501      	bpl.n	8003f20 <_vfiprintf_r+0x3c>
 8003f1c:	692b      	ldr	r3, [r5, #16]
 8003f1e:	b9eb      	cbnz	r3, 8003f5c <_vfiprintf_r+0x78>
 8003f20:	4629      	mov	r1, r5
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 fb06 	bl	8004534 <__swsetup_r>
 8003f28:	b1c0      	cbz	r0, 8003f5c <_vfiprintf_r+0x78>
 8003f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f2c:	07dc      	lsls	r4, r3, #31
 8003f2e:	d50e      	bpl.n	8003f4e <_vfiprintf_r+0x6a>
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	b01d      	add	sp, #116	; 0x74
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3a:	4b7b      	ldr	r3, [pc, #492]	; (8004128 <_vfiprintf_r+0x244>)
 8003f3c:	429d      	cmp	r5, r3
 8003f3e:	d101      	bne.n	8003f44 <_vfiprintf_r+0x60>
 8003f40:	68b5      	ldr	r5, [r6, #8]
 8003f42:	e7df      	b.n	8003f04 <_vfiprintf_r+0x20>
 8003f44:	4b79      	ldr	r3, [pc, #484]	; (800412c <_vfiprintf_r+0x248>)
 8003f46:	429d      	cmp	r5, r3
 8003f48:	bf08      	it	eq
 8003f4a:	68f5      	ldreq	r5, [r6, #12]
 8003f4c:	e7da      	b.n	8003f04 <_vfiprintf_r+0x20>
 8003f4e:	89ab      	ldrh	r3, [r5, #12]
 8003f50:	0598      	lsls	r0, r3, #22
 8003f52:	d4ed      	bmi.n	8003f30 <_vfiprintf_r+0x4c>
 8003f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f56:	f000 fd1c 	bl	8004992 <__retarget_lock_release_recursive>
 8003f5a:	e7e9      	b.n	8003f30 <_vfiprintf_r+0x4c>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f60:	2320      	movs	r3, #32
 8003f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f66:	2330      	movs	r3, #48	; 0x30
 8003f68:	f04f 0901 	mov.w	r9, #1
 8003f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004130 <_vfiprintf_r+0x24c>
 8003f74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f78:	4623      	mov	r3, r4
 8003f7a:	469a      	mov	sl, r3
 8003f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f80:	b10a      	cbz	r2, 8003f86 <_vfiprintf_r+0xa2>
 8003f82:	2a25      	cmp	r2, #37	; 0x25
 8003f84:	d1f9      	bne.n	8003f7a <_vfiprintf_r+0x96>
 8003f86:	ebba 0b04 	subs.w	fp, sl, r4
 8003f8a:	d00b      	beq.n	8003fa4 <_vfiprintf_r+0xc0>
 8003f8c:	465b      	mov	r3, fp
 8003f8e:	4622      	mov	r2, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	4630      	mov	r0, r6
 8003f94:	f7ff ff93 	bl	8003ebe <__sfputs_r>
 8003f98:	3001      	adds	r0, #1
 8003f9a:	f000 80aa 	beq.w	80040f2 <_vfiprintf_r+0x20e>
 8003f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fa0:	445a      	add	r2, fp
 8003fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8003fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a2 	beq.w	80040f2 <_vfiprintf_r+0x20e>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fb8:	f10a 0a01 	add.w	sl, sl, #1
 8003fbc:	9304      	str	r3, [sp, #16]
 8003fbe:	9307      	str	r3, [sp, #28]
 8003fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8003fc6:	4654      	mov	r4, sl
 8003fc8:	2205      	movs	r2, #5
 8003fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fce:	4858      	ldr	r0, [pc, #352]	; (8004130 <_vfiprintf_r+0x24c>)
 8003fd0:	f000 fd44 	bl	8004a5c <memchr>
 8003fd4:	9a04      	ldr	r2, [sp, #16]
 8003fd6:	b9d8      	cbnz	r0, 8004010 <_vfiprintf_r+0x12c>
 8003fd8:	06d1      	lsls	r1, r2, #27
 8003fda:	bf44      	itt	mi
 8003fdc:	2320      	movmi	r3, #32
 8003fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fe2:	0713      	lsls	r3, r2, #28
 8003fe4:	bf44      	itt	mi
 8003fe6:	232b      	movmi	r3, #43	; 0x2b
 8003fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003fec:	f89a 3000 	ldrb.w	r3, [sl]
 8003ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff2:	d015      	beq.n	8004020 <_vfiprintf_r+0x13c>
 8003ff4:	4654      	mov	r4, sl
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	f04f 0c0a 	mov.w	ip, #10
 8003ffc:	9a07      	ldr	r2, [sp, #28]
 8003ffe:	4621      	mov	r1, r4
 8004000:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004004:	3b30      	subs	r3, #48	; 0x30
 8004006:	2b09      	cmp	r3, #9
 8004008:	d94e      	bls.n	80040a8 <_vfiprintf_r+0x1c4>
 800400a:	b1b0      	cbz	r0, 800403a <_vfiprintf_r+0x156>
 800400c:	9207      	str	r2, [sp, #28]
 800400e:	e014      	b.n	800403a <_vfiprintf_r+0x156>
 8004010:	eba0 0308 	sub.w	r3, r0, r8
 8004014:	fa09 f303 	lsl.w	r3, r9, r3
 8004018:	4313      	orrs	r3, r2
 800401a:	46a2      	mov	sl, r4
 800401c:	9304      	str	r3, [sp, #16]
 800401e:	e7d2      	b.n	8003fc6 <_vfiprintf_r+0xe2>
 8004020:	9b03      	ldr	r3, [sp, #12]
 8004022:	1d19      	adds	r1, r3, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9103      	str	r1, [sp, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	bfbb      	ittet	lt
 800402c:	425b      	neglt	r3, r3
 800402e:	f042 0202 	orrlt.w	r2, r2, #2
 8004032:	9307      	strge	r3, [sp, #28]
 8004034:	9307      	strlt	r3, [sp, #28]
 8004036:	bfb8      	it	lt
 8004038:	9204      	strlt	r2, [sp, #16]
 800403a:	7823      	ldrb	r3, [r4, #0]
 800403c:	2b2e      	cmp	r3, #46	; 0x2e
 800403e:	d10c      	bne.n	800405a <_vfiprintf_r+0x176>
 8004040:	7863      	ldrb	r3, [r4, #1]
 8004042:	2b2a      	cmp	r3, #42	; 0x2a
 8004044:	d135      	bne.n	80040b2 <_vfiprintf_r+0x1ce>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	3402      	adds	r4, #2
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	9203      	str	r2, [sp, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	bfb8      	it	lt
 8004054:	f04f 33ff 	movlt.w	r3, #4294967295
 8004058:	9305      	str	r3, [sp, #20]
 800405a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004140 <_vfiprintf_r+0x25c>
 800405e:	2203      	movs	r2, #3
 8004060:	4650      	mov	r0, sl
 8004062:	7821      	ldrb	r1, [r4, #0]
 8004064:	f000 fcfa 	bl	8004a5c <memchr>
 8004068:	b140      	cbz	r0, 800407c <_vfiprintf_r+0x198>
 800406a:	2340      	movs	r3, #64	; 0x40
 800406c:	eba0 000a 	sub.w	r0, r0, sl
 8004070:	fa03 f000 	lsl.w	r0, r3, r0
 8004074:	9b04      	ldr	r3, [sp, #16]
 8004076:	3401      	adds	r4, #1
 8004078:	4303      	orrs	r3, r0
 800407a:	9304      	str	r3, [sp, #16]
 800407c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004080:	2206      	movs	r2, #6
 8004082:	482c      	ldr	r0, [pc, #176]	; (8004134 <_vfiprintf_r+0x250>)
 8004084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004088:	f000 fce8 	bl	8004a5c <memchr>
 800408c:	2800      	cmp	r0, #0
 800408e:	d03f      	beq.n	8004110 <_vfiprintf_r+0x22c>
 8004090:	4b29      	ldr	r3, [pc, #164]	; (8004138 <_vfiprintf_r+0x254>)
 8004092:	bb1b      	cbnz	r3, 80040dc <_vfiprintf_r+0x1f8>
 8004094:	9b03      	ldr	r3, [sp, #12]
 8004096:	3307      	adds	r3, #7
 8004098:	f023 0307 	bic.w	r3, r3, #7
 800409c:	3308      	adds	r3, #8
 800409e:	9303      	str	r3, [sp, #12]
 80040a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040a2:	443b      	add	r3, r7
 80040a4:	9309      	str	r3, [sp, #36]	; 0x24
 80040a6:	e767      	b.n	8003f78 <_vfiprintf_r+0x94>
 80040a8:	460c      	mov	r4, r1
 80040aa:	2001      	movs	r0, #1
 80040ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80040b0:	e7a5      	b.n	8003ffe <_vfiprintf_r+0x11a>
 80040b2:	2300      	movs	r3, #0
 80040b4:	f04f 0c0a 	mov.w	ip, #10
 80040b8:	4619      	mov	r1, r3
 80040ba:	3401      	adds	r4, #1
 80040bc:	9305      	str	r3, [sp, #20]
 80040be:	4620      	mov	r0, r4
 80040c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040c4:	3a30      	subs	r2, #48	; 0x30
 80040c6:	2a09      	cmp	r2, #9
 80040c8:	d903      	bls.n	80040d2 <_vfiprintf_r+0x1ee>
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0c5      	beq.n	800405a <_vfiprintf_r+0x176>
 80040ce:	9105      	str	r1, [sp, #20]
 80040d0:	e7c3      	b.n	800405a <_vfiprintf_r+0x176>
 80040d2:	4604      	mov	r4, r0
 80040d4:	2301      	movs	r3, #1
 80040d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040da:	e7f0      	b.n	80040be <_vfiprintf_r+0x1da>
 80040dc:	ab03      	add	r3, sp, #12
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	462a      	mov	r2, r5
 80040e2:	4630      	mov	r0, r6
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <_vfiprintf_r+0x258>)
 80040e6:	a904      	add	r1, sp, #16
 80040e8:	f3af 8000 	nop.w
 80040ec:	4607      	mov	r7, r0
 80040ee:	1c78      	adds	r0, r7, #1
 80040f0:	d1d6      	bne.n	80040a0 <_vfiprintf_r+0x1bc>
 80040f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80040f4:	07d9      	lsls	r1, r3, #31
 80040f6:	d405      	bmi.n	8004104 <_vfiprintf_r+0x220>
 80040f8:	89ab      	ldrh	r3, [r5, #12]
 80040fa:	059a      	lsls	r2, r3, #22
 80040fc:	d402      	bmi.n	8004104 <_vfiprintf_r+0x220>
 80040fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004100:	f000 fc47 	bl	8004992 <__retarget_lock_release_recursive>
 8004104:	89ab      	ldrh	r3, [r5, #12]
 8004106:	065b      	lsls	r3, r3, #25
 8004108:	f53f af12 	bmi.w	8003f30 <_vfiprintf_r+0x4c>
 800410c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800410e:	e711      	b.n	8003f34 <_vfiprintf_r+0x50>
 8004110:	ab03      	add	r3, sp, #12
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	462a      	mov	r2, r5
 8004116:	4630      	mov	r0, r6
 8004118:	4b08      	ldr	r3, [pc, #32]	; (800413c <_vfiprintf_r+0x258>)
 800411a:	a904      	add	r1, sp, #16
 800411c:	f000 f882 	bl	8004224 <_printf_i>
 8004120:	e7e4      	b.n	80040ec <_vfiprintf_r+0x208>
 8004122:	bf00      	nop
 8004124:	08004ec8 	.word	0x08004ec8
 8004128:	08004ee8 	.word	0x08004ee8
 800412c:	08004ea8 	.word	0x08004ea8
 8004130:	08004e75 	.word	0x08004e75
 8004134:	08004e7f 	.word	0x08004e7f
 8004138:	00000000 	.word	0x00000000
 800413c:	08003ebf 	.word	0x08003ebf
 8004140:	08004e7b 	.word	0x08004e7b

08004144 <_printf_common>:
 8004144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004148:	4616      	mov	r6, r2
 800414a:	4699      	mov	r9, r3
 800414c:	688a      	ldr	r2, [r1, #8]
 800414e:	690b      	ldr	r3, [r1, #16]
 8004150:	4607      	mov	r7, r0
 8004152:	4293      	cmp	r3, r2
 8004154:	bfb8      	it	lt
 8004156:	4613      	movlt	r3, r2
 8004158:	6033      	str	r3, [r6, #0]
 800415a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800415e:	460c      	mov	r4, r1
 8004160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004164:	b10a      	cbz	r2, 800416a <_printf_common+0x26>
 8004166:	3301      	adds	r3, #1
 8004168:	6033      	str	r3, [r6, #0]
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	0699      	lsls	r1, r3, #26
 800416e:	bf42      	ittt	mi
 8004170:	6833      	ldrmi	r3, [r6, #0]
 8004172:	3302      	addmi	r3, #2
 8004174:	6033      	strmi	r3, [r6, #0]
 8004176:	6825      	ldr	r5, [r4, #0]
 8004178:	f015 0506 	ands.w	r5, r5, #6
 800417c:	d106      	bne.n	800418c <_printf_common+0x48>
 800417e:	f104 0a19 	add.w	sl, r4, #25
 8004182:	68e3      	ldr	r3, [r4, #12]
 8004184:	6832      	ldr	r2, [r6, #0]
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	42ab      	cmp	r3, r5
 800418a:	dc28      	bgt.n	80041de <_printf_common+0x9a>
 800418c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004190:	1e13      	subs	r3, r2, #0
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	bf18      	it	ne
 8004196:	2301      	movne	r3, #1
 8004198:	0692      	lsls	r2, r2, #26
 800419a:	d42d      	bmi.n	80041f8 <_printf_common+0xb4>
 800419c:	4649      	mov	r1, r9
 800419e:	4638      	mov	r0, r7
 80041a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041a4:	47c0      	blx	r8
 80041a6:	3001      	adds	r0, #1
 80041a8:	d020      	beq.n	80041ec <_printf_common+0xa8>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	68e5      	ldr	r5, [r4, #12]
 80041ae:	f003 0306 	and.w	r3, r3, #6
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	bf18      	it	ne
 80041b6:	2500      	movne	r5, #0
 80041b8:	6832      	ldr	r2, [r6, #0]
 80041ba:	f04f 0600 	mov.w	r6, #0
 80041be:	68a3      	ldr	r3, [r4, #8]
 80041c0:	bf08      	it	eq
 80041c2:	1aad      	subeq	r5, r5, r2
 80041c4:	6922      	ldr	r2, [r4, #16]
 80041c6:	bf08      	it	eq
 80041c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041cc:	4293      	cmp	r3, r2
 80041ce:	bfc4      	itt	gt
 80041d0:	1a9b      	subgt	r3, r3, r2
 80041d2:	18ed      	addgt	r5, r5, r3
 80041d4:	341a      	adds	r4, #26
 80041d6:	42b5      	cmp	r5, r6
 80041d8:	d11a      	bne.n	8004210 <_printf_common+0xcc>
 80041da:	2000      	movs	r0, #0
 80041dc:	e008      	b.n	80041f0 <_printf_common+0xac>
 80041de:	2301      	movs	r3, #1
 80041e0:	4652      	mov	r2, sl
 80041e2:	4649      	mov	r1, r9
 80041e4:	4638      	mov	r0, r7
 80041e6:	47c0      	blx	r8
 80041e8:	3001      	adds	r0, #1
 80041ea:	d103      	bne.n	80041f4 <_printf_common+0xb0>
 80041ec:	f04f 30ff 	mov.w	r0, #4294967295
 80041f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f4:	3501      	adds	r5, #1
 80041f6:	e7c4      	b.n	8004182 <_printf_common+0x3e>
 80041f8:	2030      	movs	r0, #48	; 0x30
 80041fa:	18e1      	adds	r1, r4, r3
 80041fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004206:	4422      	add	r2, r4
 8004208:	3302      	adds	r3, #2
 800420a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800420e:	e7c5      	b.n	800419c <_printf_common+0x58>
 8004210:	2301      	movs	r3, #1
 8004212:	4622      	mov	r2, r4
 8004214:	4649      	mov	r1, r9
 8004216:	4638      	mov	r0, r7
 8004218:	47c0      	blx	r8
 800421a:	3001      	adds	r0, #1
 800421c:	d0e6      	beq.n	80041ec <_printf_common+0xa8>
 800421e:	3601      	adds	r6, #1
 8004220:	e7d9      	b.n	80041d6 <_printf_common+0x92>
	...

08004224 <_printf_i>:
 8004224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004228:	460c      	mov	r4, r1
 800422a:	7e27      	ldrb	r7, [r4, #24]
 800422c:	4691      	mov	r9, r2
 800422e:	2f78      	cmp	r7, #120	; 0x78
 8004230:	4680      	mov	r8, r0
 8004232:	469a      	mov	sl, r3
 8004234:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800423a:	d807      	bhi.n	800424c <_printf_i+0x28>
 800423c:	2f62      	cmp	r7, #98	; 0x62
 800423e:	d80a      	bhi.n	8004256 <_printf_i+0x32>
 8004240:	2f00      	cmp	r7, #0
 8004242:	f000 80d9 	beq.w	80043f8 <_printf_i+0x1d4>
 8004246:	2f58      	cmp	r7, #88	; 0x58
 8004248:	f000 80a4 	beq.w	8004394 <_printf_i+0x170>
 800424c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004254:	e03a      	b.n	80042cc <_printf_i+0xa8>
 8004256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800425a:	2b15      	cmp	r3, #21
 800425c:	d8f6      	bhi.n	800424c <_printf_i+0x28>
 800425e:	a001      	add	r0, pc, #4	; (adr r0, 8004264 <_printf_i+0x40>)
 8004260:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004264:	080042bd 	.word	0x080042bd
 8004268:	080042d1 	.word	0x080042d1
 800426c:	0800424d 	.word	0x0800424d
 8004270:	0800424d 	.word	0x0800424d
 8004274:	0800424d 	.word	0x0800424d
 8004278:	0800424d 	.word	0x0800424d
 800427c:	080042d1 	.word	0x080042d1
 8004280:	0800424d 	.word	0x0800424d
 8004284:	0800424d 	.word	0x0800424d
 8004288:	0800424d 	.word	0x0800424d
 800428c:	0800424d 	.word	0x0800424d
 8004290:	080043df 	.word	0x080043df
 8004294:	08004301 	.word	0x08004301
 8004298:	080043c1 	.word	0x080043c1
 800429c:	0800424d 	.word	0x0800424d
 80042a0:	0800424d 	.word	0x0800424d
 80042a4:	08004401 	.word	0x08004401
 80042a8:	0800424d 	.word	0x0800424d
 80042ac:	08004301 	.word	0x08004301
 80042b0:	0800424d 	.word	0x0800424d
 80042b4:	0800424d 	.word	0x0800424d
 80042b8:	080043c9 	.word	0x080043c9
 80042bc:	680b      	ldr	r3, [r1, #0]
 80042be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	600a      	str	r2, [r1, #0]
 80042c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042cc:	2301      	movs	r3, #1
 80042ce:	e0a4      	b.n	800441a <_printf_i+0x1f6>
 80042d0:	6825      	ldr	r5, [r4, #0]
 80042d2:	6808      	ldr	r0, [r1, #0]
 80042d4:	062e      	lsls	r6, r5, #24
 80042d6:	f100 0304 	add.w	r3, r0, #4
 80042da:	d50a      	bpl.n	80042f2 <_printf_i+0xce>
 80042dc:	6805      	ldr	r5, [r0, #0]
 80042de:	600b      	str	r3, [r1, #0]
 80042e0:	2d00      	cmp	r5, #0
 80042e2:	da03      	bge.n	80042ec <_printf_i+0xc8>
 80042e4:	232d      	movs	r3, #45	; 0x2d
 80042e6:	426d      	negs	r5, r5
 80042e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042ec:	230a      	movs	r3, #10
 80042ee:	485e      	ldr	r0, [pc, #376]	; (8004468 <_printf_i+0x244>)
 80042f0:	e019      	b.n	8004326 <_printf_i+0x102>
 80042f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042f6:	6805      	ldr	r5, [r0, #0]
 80042f8:	600b      	str	r3, [r1, #0]
 80042fa:	bf18      	it	ne
 80042fc:	b22d      	sxthne	r5, r5
 80042fe:	e7ef      	b.n	80042e0 <_printf_i+0xbc>
 8004300:	680b      	ldr	r3, [r1, #0]
 8004302:	6825      	ldr	r5, [r4, #0]
 8004304:	1d18      	adds	r0, r3, #4
 8004306:	6008      	str	r0, [r1, #0]
 8004308:	0628      	lsls	r0, r5, #24
 800430a:	d501      	bpl.n	8004310 <_printf_i+0xec>
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	e002      	b.n	8004316 <_printf_i+0xf2>
 8004310:	0669      	lsls	r1, r5, #25
 8004312:	d5fb      	bpl.n	800430c <_printf_i+0xe8>
 8004314:	881d      	ldrh	r5, [r3, #0]
 8004316:	2f6f      	cmp	r7, #111	; 0x6f
 8004318:	bf0c      	ite	eq
 800431a:	2308      	moveq	r3, #8
 800431c:	230a      	movne	r3, #10
 800431e:	4852      	ldr	r0, [pc, #328]	; (8004468 <_printf_i+0x244>)
 8004320:	2100      	movs	r1, #0
 8004322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004326:	6866      	ldr	r6, [r4, #4]
 8004328:	2e00      	cmp	r6, #0
 800432a:	bfa8      	it	ge
 800432c:	6821      	ldrge	r1, [r4, #0]
 800432e:	60a6      	str	r6, [r4, #8]
 8004330:	bfa4      	itt	ge
 8004332:	f021 0104 	bicge.w	r1, r1, #4
 8004336:	6021      	strge	r1, [r4, #0]
 8004338:	b90d      	cbnz	r5, 800433e <_printf_i+0x11a>
 800433a:	2e00      	cmp	r6, #0
 800433c:	d04d      	beq.n	80043da <_printf_i+0x1b6>
 800433e:	4616      	mov	r6, r2
 8004340:	fbb5 f1f3 	udiv	r1, r5, r3
 8004344:	fb03 5711 	mls	r7, r3, r1, r5
 8004348:	5dc7      	ldrb	r7, [r0, r7]
 800434a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800434e:	462f      	mov	r7, r5
 8004350:	42bb      	cmp	r3, r7
 8004352:	460d      	mov	r5, r1
 8004354:	d9f4      	bls.n	8004340 <_printf_i+0x11c>
 8004356:	2b08      	cmp	r3, #8
 8004358:	d10b      	bne.n	8004372 <_printf_i+0x14e>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	07df      	lsls	r7, r3, #31
 800435e:	d508      	bpl.n	8004372 <_printf_i+0x14e>
 8004360:	6923      	ldr	r3, [r4, #16]
 8004362:	6861      	ldr	r1, [r4, #4]
 8004364:	4299      	cmp	r1, r3
 8004366:	bfde      	ittt	le
 8004368:	2330      	movle	r3, #48	; 0x30
 800436a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800436e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004372:	1b92      	subs	r2, r2, r6
 8004374:	6122      	str	r2, [r4, #16]
 8004376:	464b      	mov	r3, r9
 8004378:	4621      	mov	r1, r4
 800437a:	4640      	mov	r0, r8
 800437c:	f8cd a000 	str.w	sl, [sp]
 8004380:	aa03      	add	r2, sp, #12
 8004382:	f7ff fedf 	bl	8004144 <_printf_common>
 8004386:	3001      	adds	r0, #1
 8004388:	d14c      	bne.n	8004424 <_printf_i+0x200>
 800438a:	f04f 30ff 	mov.w	r0, #4294967295
 800438e:	b004      	add	sp, #16
 8004390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004394:	4834      	ldr	r0, [pc, #208]	; (8004468 <_printf_i+0x244>)
 8004396:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800439a:	680e      	ldr	r6, [r1, #0]
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	f856 5b04 	ldr.w	r5, [r6], #4
 80043a2:	061f      	lsls	r7, r3, #24
 80043a4:	600e      	str	r6, [r1, #0]
 80043a6:	d514      	bpl.n	80043d2 <_printf_i+0x1ae>
 80043a8:	07d9      	lsls	r1, r3, #31
 80043aa:	bf44      	itt	mi
 80043ac:	f043 0320 	orrmi.w	r3, r3, #32
 80043b0:	6023      	strmi	r3, [r4, #0]
 80043b2:	b91d      	cbnz	r5, 80043bc <_printf_i+0x198>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	f023 0320 	bic.w	r3, r3, #32
 80043ba:	6023      	str	r3, [r4, #0]
 80043bc:	2310      	movs	r3, #16
 80043be:	e7af      	b.n	8004320 <_printf_i+0xfc>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	f043 0320 	orr.w	r3, r3, #32
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	2378      	movs	r3, #120	; 0x78
 80043ca:	4828      	ldr	r0, [pc, #160]	; (800446c <_printf_i+0x248>)
 80043cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043d0:	e7e3      	b.n	800439a <_printf_i+0x176>
 80043d2:	065e      	lsls	r6, r3, #25
 80043d4:	bf48      	it	mi
 80043d6:	b2ad      	uxthmi	r5, r5
 80043d8:	e7e6      	b.n	80043a8 <_printf_i+0x184>
 80043da:	4616      	mov	r6, r2
 80043dc:	e7bb      	b.n	8004356 <_printf_i+0x132>
 80043de:	680b      	ldr	r3, [r1, #0]
 80043e0:	6826      	ldr	r6, [r4, #0]
 80043e2:	1d1d      	adds	r5, r3, #4
 80043e4:	6960      	ldr	r0, [r4, #20]
 80043e6:	600d      	str	r5, [r1, #0]
 80043e8:	0635      	lsls	r5, r6, #24
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	d501      	bpl.n	80043f2 <_printf_i+0x1ce>
 80043ee:	6018      	str	r0, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <_printf_i+0x1d4>
 80043f2:	0671      	lsls	r1, r6, #25
 80043f4:	d5fb      	bpl.n	80043ee <_printf_i+0x1ca>
 80043f6:	8018      	strh	r0, [r3, #0]
 80043f8:	2300      	movs	r3, #0
 80043fa:	4616      	mov	r6, r2
 80043fc:	6123      	str	r3, [r4, #16]
 80043fe:	e7ba      	b.n	8004376 <_printf_i+0x152>
 8004400:	680b      	ldr	r3, [r1, #0]
 8004402:	1d1a      	adds	r2, r3, #4
 8004404:	600a      	str	r2, [r1, #0]
 8004406:	681e      	ldr	r6, [r3, #0]
 8004408:	2100      	movs	r1, #0
 800440a:	4630      	mov	r0, r6
 800440c:	6862      	ldr	r2, [r4, #4]
 800440e:	f000 fb25 	bl	8004a5c <memchr>
 8004412:	b108      	cbz	r0, 8004418 <_printf_i+0x1f4>
 8004414:	1b80      	subs	r0, r0, r6
 8004416:	6060      	str	r0, [r4, #4]
 8004418:	6863      	ldr	r3, [r4, #4]
 800441a:	6123      	str	r3, [r4, #16]
 800441c:	2300      	movs	r3, #0
 800441e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004422:	e7a8      	b.n	8004376 <_printf_i+0x152>
 8004424:	4632      	mov	r2, r6
 8004426:	4649      	mov	r1, r9
 8004428:	4640      	mov	r0, r8
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	47d0      	blx	sl
 800442e:	3001      	adds	r0, #1
 8004430:	d0ab      	beq.n	800438a <_printf_i+0x166>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	079b      	lsls	r3, r3, #30
 8004436:	d413      	bmi.n	8004460 <_printf_i+0x23c>
 8004438:	68e0      	ldr	r0, [r4, #12]
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	4298      	cmp	r0, r3
 800443e:	bfb8      	it	lt
 8004440:	4618      	movlt	r0, r3
 8004442:	e7a4      	b.n	800438e <_printf_i+0x16a>
 8004444:	2301      	movs	r3, #1
 8004446:	4632      	mov	r2, r6
 8004448:	4649      	mov	r1, r9
 800444a:	4640      	mov	r0, r8
 800444c:	47d0      	blx	sl
 800444e:	3001      	adds	r0, #1
 8004450:	d09b      	beq.n	800438a <_printf_i+0x166>
 8004452:	3501      	adds	r5, #1
 8004454:	68e3      	ldr	r3, [r4, #12]
 8004456:	9903      	ldr	r1, [sp, #12]
 8004458:	1a5b      	subs	r3, r3, r1
 800445a:	42ab      	cmp	r3, r5
 800445c:	dcf2      	bgt.n	8004444 <_printf_i+0x220>
 800445e:	e7eb      	b.n	8004438 <_printf_i+0x214>
 8004460:	2500      	movs	r5, #0
 8004462:	f104 0619 	add.w	r6, r4, #25
 8004466:	e7f5      	b.n	8004454 <_printf_i+0x230>
 8004468:	08004e86 	.word	0x08004e86
 800446c:	08004e97 	.word	0x08004e97

08004470 <_sbrk_r>:
 8004470:	b538      	push	{r3, r4, r5, lr}
 8004472:	2300      	movs	r3, #0
 8004474:	4d05      	ldr	r5, [pc, #20]	; (800448c <_sbrk_r+0x1c>)
 8004476:	4604      	mov	r4, r0
 8004478:	4608      	mov	r0, r1
 800447a:	602b      	str	r3, [r5, #0]
 800447c:	f7fc fb22 	bl	8000ac4 <_sbrk>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d102      	bne.n	800448a <_sbrk_r+0x1a>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	b103      	cbz	r3, 800448a <_sbrk_r+0x1a>
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	bd38      	pop	{r3, r4, r5, pc}
 800448c:	200002fc 	.word	0x200002fc

08004490 <__swbuf_r>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	460e      	mov	r6, r1
 8004494:	4614      	mov	r4, r2
 8004496:	4605      	mov	r5, r0
 8004498:	b118      	cbz	r0, 80044a2 <__swbuf_r+0x12>
 800449a:	6983      	ldr	r3, [r0, #24]
 800449c:	b90b      	cbnz	r3, 80044a2 <__swbuf_r+0x12>
 800449e:	f000 f9d9 	bl	8004854 <__sinit>
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <__swbuf_r+0x98>)
 80044a4:	429c      	cmp	r4, r3
 80044a6:	d12b      	bne.n	8004500 <__swbuf_r+0x70>
 80044a8:	686c      	ldr	r4, [r5, #4]
 80044aa:	69a3      	ldr	r3, [r4, #24]
 80044ac:	60a3      	str	r3, [r4, #8]
 80044ae:	89a3      	ldrh	r3, [r4, #12]
 80044b0:	071a      	lsls	r2, r3, #28
 80044b2:	d52f      	bpl.n	8004514 <__swbuf_r+0x84>
 80044b4:	6923      	ldr	r3, [r4, #16]
 80044b6:	b36b      	cbz	r3, 8004514 <__swbuf_r+0x84>
 80044b8:	6923      	ldr	r3, [r4, #16]
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	b2f6      	uxtb	r6, r6
 80044be:	1ac0      	subs	r0, r0, r3
 80044c0:	6963      	ldr	r3, [r4, #20]
 80044c2:	4637      	mov	r7, r6
 80044c4:	4283      	cmp	r3, r0
 80044c6:	dc04      	bgt.n	80044d2 <__swbuf_r+0x42>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f92e 	bl	800472c <_fflush_r>
 80044d0:	bb30      	cbnz	r0, 8004520 <__swbuf_r+0x90>
 80044d2:	68a3      	ldr	r3, [r4, #8]
 80044d4:	3001      	adds	r0, #1
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60a3      	str	r3, [r4, #8]
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	6022      	str	r2, [r4, #0]
 80044e0:	701e      	strb	r6, [r3, #0]
 80044e2:	6963      	ldr	r3, [r4, #20]
 80044e4:	4283      	cmp	r3, r0
 80044e6:	d004      	beq.n	80044f2 <__swbuf_r+0x62>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	07db      	lsls	r3, r3, #31
 80044ec:	d506      	bpl.n	80044fc <__swbuf_r+0x6c>
 80044ee:	2e0a      	cmp	r6, #10
 80044f0:	d104      	bne.n	80044fc <__swbuf_r+0x6c>
 80044f2:	4621      	mov	r1, r4
 80044f4:	4628      	mov	r0, r5
 80044f6:	f000 f919 	bl	800472c <_fflush_r>
 80044fa:	b988      	cbnz	r0, 8004520 <__swbuf_r+0x90>
 80044fc:	4638      	mov	r0, r7
 80044fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <__swbuf_r+0x9c>)
 8004502:	429c      	cmp	r4, r3
 8004504:	d101      	bne.n	800450a <__swbuf_r+0x7a>
 8004506:	68ac      	ldr	r4, [r5, #8]
 8004508:	e7cf      	b.n	80044aa <__swbuf_r+0x1a>
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <__swbuf_r+0xa0>)
 800450c:	429c      	cmp	r4, r3
 800450e:	bf08      	it	eq
 8004510:	68ec      	ldreq	r4, [r5, #12]
 8004512:	e7ca      	b.n	80044aa <__swbuf_r+0x1a>
 8004514:	4621      	mov	r1, r4
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f80c 	bl	8004534 <__swsetup_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	d0cb      	beq.n	80044b8 <__swbuf_r+0x28>
 8004520:	f04f 37ff 	mov.w	r7, #4294967295
 8004524:	e7ea      	b.n	80044fc <__swbuf_r+0x6c>
 8004526:	bf00      	nop
 8004528:	08004ec8 	.word	0x08004ec8
 800452c:	08004ee8 	.word	0x08004ee8
 8004530:	08004ea8 	.word	0x08004ea8

08004534 <__swsetup_r>:
 8004534:	4b32      	ldr	r3, [pc, #200]	; (8004600 <__swsetup_r+0xcc>)
 8004536:	b570      	push	{r4, r5, r6, lr}
 8004538:	681d      	ldr	r5, [r3, #0]
 800453a:	4606      	mov	r6, r0
 800453c:	460c      	mov	r4, r1
 800453e:	b125      	cbz	r5, 800454a <__swsetup_r+0x16>
 8004540:	69ab      	ldr	r3, [r5, #24]
 8004542:	b913      	cbnz	r3, 800454a <__swsetup_r+0x16>
 8004544:	4628      	mov	r0, r5
 8004546:	f000 f985 	bl	8004854 <__sinit>
 800454a:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <__swsetup_r+0xd0>)
 800454c:	429c      	cmp	r4, r3
 800454e:	d10f      	bne.n	8004570 <__swsetup_r+0x3c>
 8004550:	686c      	ldr	r4, [r5, #4]
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004558:	0719      	lsls	r1, r3, #28
 800455a:	d42c      	bmi.n	80045b6 <__swsetup_r+0x82>
 800455c:	06dd      	lsls	r5, r3, #27
 800455e:	d411      	bmi.n	8004584 <__swsetup_r+0x50>
 8004560:	2309      	movs	r3, #9
 8004562:	6033      	str	r3, [r6, #0]
 8004564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	e03e      	b.n	80045ee <__swsetup_r+0xba>
 8004570:	4b25      	ldr	r3, [pc, #148]	; (8004608 <__swsetup_r+0xd4>)
 8004572:	429c      	cmp	r4, r3
 8004574:	d101      	bne.n	800457a <__swsetup_r+0x46>
 8004576:	68ac      	ldr	r4, [r5, #8]
 8004578:	e7eb      	b.n	8004552 <__swsetup_r+0x1e>
 800457a:	4b24      	ldr	r3, [pc, #144]	; (800460c <__swsetup_r+0xd8>)
 800457c:	429c      	cmp	r4, r3
 800457e:	bf08      	it	eq
 8004580:	68ec      	ldreq	r4, [r5, #12]
 8004582:	e7e6      	b.n	8004552 <__swsetup_r+0x1e>
 8004584:	0758      	lsls	r0, r3, #29
 8004586:	d512      	bpl.n	80045ae <__swsetup_r+0x7a>
 8004588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800458a:	b141      	cbz	r1, 800459e <__swsetup_r+0x6a>
 800458c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004590:	4299      	cmp	r1, r3
 8004592:	d002      	beq.n	800459a <__swsetup_r+0x66>
 8004594:	4630      	mov	r0, r6
 8004596:	f7ff fbd7 	bl	8003d48 <_free_r>
 800459a:	2300      	movs	r3, #0
 800459c:	6363      	str	r3, [r4, #52]	; 0x34
 800459e:	89a3      	ldrh	r3, [r4, #12]
 80045a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80045a4:	81a3      	strh	r3, [r4, #12]
 80045a6:	2300      	movs	r3, #0
 80045a8:	6063      	str	r3, [r4, #4]
 80045aa:	6923      	ldr	r3, [r4, #16]
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	f043 0308 	orr.w	r3, r3, #8
 80045b4:	81a3      	strh	r3, [r4, #12]
 80045b6:	6923      	ldr	r3, [r4, #16]
 80045b8:	b94b      	cbnz	r3, 80045ce <__swsetup_r+0x9a>
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c4:	d003      	beq.n	80045ce <__swsetup_r+0x9a>
 80045c6:	4621      	mov	r1, r4
 80045c8:	4630      	mov	r0, r6
 80045ca:	f000 fa07 	bl	80049dc <__smakebuf_r>
 80045ce:	89a0      	ldrh	r0, [r4, #12]
 80045d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045d4:	f010 0301 	ands.w	r3, r0, #1
 80045d8:	d00a      	beq.n	80045f0 <__swsetup_r+0xbc>
 80045da:	2300      	movs	r3, #0
 80045dc:	60a3      	str	r3, [r4, #8]
 80045de:	6963      	ldr	r3, [r4, #20]
 80045e0:	425b      	negs	r3, r3
 80045e2:	61a3      	str	r3, [r4, #24]
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	b943      	cbnz	r3, 80045fa <__swsetup_r+0xc6>
 80045e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045ec:	d1ba      	bne.n	8004564 <__swsetup_r+0x30>
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	0781      	lsls	r1, r0, #30
 80045f2:	bf58      	it	pl
 80045f4:	6963      	ldrpl	r3, [r4, #20]
 80045f6:	60a3      	str	r3, [r4, #8]
 80045f8:	e7f4      	b.n	80045e4 <__swsetup_r+0xb0>
 80045fa:	2000      	movs	r0, #0
 80045fc:	e7f7      	b.n	80045ee <__swsetup_r+0xba>
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
 8004604:	08004ec8 	.word	0x08004ec8
 8004608:	08004ee8 	.word	0x08004ee8
 800460c:	08004ea8 	.word	0x08004ea8

08004610 <abort>:
 8004610:	2006      	movs	r0, #6
 8004612:	b508      	push	{r3, lr}
 8004614:	f000 fa64 	bl	8004ae0 <raise>
 8004618:	2001      	movs	r0, #1
 800461a:	f7fc f9e0 	bl	80009de <_exit>
	...

08004620 <__sflush_r>:
 8004620:	898a      	ldrh	r2, [r1, #12]
 8004622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004626:	4605      	mov	r5, r0
 8004628:	0710      	lsls	r0, r2, #28
 800462a:	460c      	mov	r4, r1
 800462c:	d458      	bmi.n	80046e0 <__sflush_r+0xc0>
 800462e:	684b      	ldr	r3, [r1, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	dc05      	bgt.n	8004640 <__sflush_r+0x20>
 8004634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	dc02      	bgt.n	8004640 <__sflush_r+0x20>
 800463a:	2000      	movs	r0, #0
 800463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004642:	2e00      	cmp	r6, #0
 8004644:	d0f9      	beq.n	800463a <__sflush_r+0x1a>
 8004646:	2300      	movs	r3, #0
 8004648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800464c:	682f      	ldr	r7, [r5, #0]
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	d032      	beq.n	80046b8 <__sflush_r+0x98>
 8004652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004654:	89a3      	ldrh	r3, [r4, #12]
 8004656:	075a      	lsls	r2, r3, #29
 8004658:	d505      	bpl.n	8004666 <__sflush_r+0x46>
 800465a:	6863      	ldr	r3, [r4, #4]
 800465c:	1ac0      	subs	r0, r0, r3
 800465e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004660:	b10b      	cbz	r3, 8004666 <__sflush_r+0x46>
 8004662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004664:	1ac0      	subs	r0, r0, r3
 8004666:	2300      	movs	r3, #0
 8004668:	4602      	mov	r2, r0
 800466a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800466c:	4628      	mov	r0, r5
 800466e:	6a21      	ldr	r1, [r4, #32]
 8004670:	47b0      	blx	r6
 8004672:	1c43      	adds	r3, r0, #1
 8004674:	89a3      	ldrh	r3, [r4, #12]
 8004676:	d106      	bne.n	8004686 <__sflush_r+0x66>
 8004678:	6829      	ldr	r1, [r5, #0]
 800467a:	291d      	cmp	r1, #29
 800467c:	d82c      	bhi.n	80046d8 <__sflush_r+0xb8>
 800467e:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <__sflush_r+0x108>)
 8004680:	40ca      	lsrs	r2, r1
 8004682:	07d6      	lsls	r6, r2, #31
 8004684:	d528      	bpl.n	80046d8 <__sflush_r+0xb8>
 8004686:	2200      	movs	r2, #0
 8004688:	6062      	str	r2, [r4, #4]
 800468a:	6922      	ldr	r2, [r4, #16]
 800468c:	04d9      	lsls	r1, r3, #19
 800468e:	6022      	str	r2, [r4, #0]
 8004690:	d504      	bpl.n	800469c <__sflush_r+0x7c>
 8004692:	1c42      	adds	r2, r0, #1
 8004694:	d101      	bne.n	800469a <__sflush_r+0x7a>
 8004696:	682b      	ldr	r3, [r5, #0]
 8004698:	b903      	cbnz	r3, 800469c <__sflush_r+0x7c>
 800469a:	6560      	str	r0, [r4, #84]	; 0x54
 800469c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800469e:	602f      	str	r7, [r5, #0]
 80046a0:	2900      	cmp	r1, #0
 80046a2:	d0ca      	beq.n	800463a <__sflush_r+0x1a>
 80046a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046a8:	4299      	cmp	r1, r3
 80046aa:	d002      	beq.n	80046b2 <__sflush_r+0x92>
 80046ac:	4628      	mov	r0, r5
 80046ae:	f7ff fb4b 	bl	8003d48 <_free_r>
 80046b2:	2000      	movs	r0, #0
 80046b4:	6360      	str	r0, [r4, #52]	; 0x34
 80046b6:	e7c1      	b.n	800463c <__sflush_r+0x1c>
 80046b8:	6a21      	ldr	r1, [r4, #32]
 80046ba:	2301      	movs	r3, #1
 80046bc:	4628      	mov	r0, r5
 80046be:	47b0      	blx	r6
 80046c0:	1c41      	adds	r1, r0, #1
 80046c2:	d1c7      	bne.n	8004654 <__sflush_r+0x34>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0c4      	beq.n	8004654 <__sflush_r+0x34>
 80046ca:	2b1d      	cmp	r3, #29
 80046cc:	d001      	beq.n	80046d2 <__sflush_r+0xb2>
 80046ce:	2b16      	cmp	r3, #22
 80046d0:	d101      	bne.n	80046d6 <__sflush_r+0xb6>
 80046d2:	602f      	str	r7, [r5, #0]
 80046d4:	e7b1      	b.n	800463a <__sflush_r+0x1a>
 80046d6:	89a3      	ldrh	r3, [r4, #12]
 80046d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046dc:	81a3      	strh	r3, [r4, #12]
 80046de:	e7ad      	b.n	800463c <__sflush_r+0x1c>
 80046e0:	690f      	ldr	r7, [r1, #16]
 80046e2:	2f00      	cmp	r7, #0
 80046e4:	d0a9      	beq.n	800463a <__sflush_r+0x1a>
 80046e6:	0793      	lsls	r3, r2, #30
 80046e8:	bf18      	it	ne
 80046ea:	2300      	movne	r3, #0
 80046ec:	680e      	ldr	r6, [r1, #0]
 80046ee:	bf08      	it	eq
 80046f0:	694b      	ldreq	r3, [r1, #20]
 80046f2:	eba6 0807 	sub.w	r8, r6, r7
 80046f6:	600f      	str	r7, [r1, #0]
 80046f8:	608b      	str	r3, [r1, #8]
 80046fa:	f1b8 0f00 	cmp.w	r8, #0
 80046fe:	dd9c      	ble.n	800463a <__sflush_r+0x1a>
 8004700:	4643      	mov	r3, r8
 8004702:	463a      	mov	r2, r7
 8004704:	4628      	mov	r0, r5
 8004706:	6a21      	ldr	r1, [r4, #32]
 8004708:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800470a:	47b0      	blx	r6
 800470c:	2800      	cmp	r0, #0
 800470e:	dc06      	bgt.n	800471e <__sflush_r+0xfe>
 8004710:	89a3      	ldrh	r3, [r4, #12]
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471a:	81a3      	strh	r3, [r4, #12]
 800471c:	e78e      	b.n	800463c <__sflush_r+0x1c>
 800471e:	4407      	add	r7, r0
 8004720:	eba8 0800 	sub.w	r8, r8, r0
 8004724:	e7e9      	b.n	80046fa <__sflush_r+0xda>
 8004726:	bf00      	nop
 8004728:	20400001 	.word	0x20400001

0800472c <_fflush_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	690b      	ldr	r3, [r1, #16]
 8004730:	4605      	mov	r5, r0
 8004732:	460c      	mov	r4, r1
 8004734:	b913      	cbnz	r3, 800473c <_fflush_r+0x10>
 8004736:	2500      	movs	r5, #0
 8004738:	4628      	mov	r0, r5
 800473a:	bd38      	pop	{r3, r4, r5, pc}
 800473c:	b118      	cbz	r0, 8004746 <_fflush_r+0x1a>
 800473e:	6983      	ldr	r3, [r0, #24]
 8004740:	b90b      	cbnz	r3, 8004746 <_fflush_r+0x1a>
 8004742:	f000 f887 	bl	8004854 <__sinit>
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <_fflush_r+0x6c>)
 8004748:	429c      	cmp	r4, r3
 800474a:	d11b      	bne.n	8004784 <_fflush_r+0x58>
 800474c:	686c      	ldr	r4, [r5, #4]
 800474e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0ef      	beq.n	8004736 <_fflush_r+0xa>
 8004756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004758:	07d0      	lsls	r0, r2, #31
 800475a:	d404      	bmi.n	8004766 <_fflush_r+0x3a>
 800475c:	0599      	lsls	r1, r3, #22
 800475e:	d402      	bmi.n	8004766 <_fflush_r+0x3a>
 8004760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004762:	f000 f915 	bl	8004990 <__retarget_lock_acquire_recursive>
 8004766:	4628      	mov	r0, r5
 8004768:	4621      	mov	r1, r4
 800476a:	f7ff ff59 	bl	8004620 <__sflush_r>
 800476e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004770:	4605      	mov	r5, r0
 8004772:	07da      	lsls	r2, r3, #31
 8004774:	d4e0      	bmi.n	8004738 <_fflush_r+0xc>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	059b      	lsls	r3, r3, #22
 800477a:	d4dd      	bmi.n	8004738 <_fflush_r+0xc>
 800477c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800477e:	f000 f908 	bl	8004992 <__retarget_lock_release_recursive>
 8004782:	e7d9      	b.n	8004738 <_fflush_r+0xc>
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <_fflush_r+0x70>)
 8004786:	429c      	cmp	r4, r3
 8004788:	d101      	bne.n	800478e <_fflush_r+0x62>
 800478a:	68ac      	ldr	r4, [r5, #8]
 800478c:	e7df      	b.n	800474e <_fflush_r+0x22>
 800478e:	4b04      	ldr	r3, [pc, #16]	; (80047a0 <_fflush_r+0x74>)
 8004790:	429c      	cmp	r4, r3
 8004792:	bf08      	it	eq
 8004794:	68ec      	ldreq	r4, [r5, #12]
 8004796:	e7da      	b.n	800474e <_fflush_r+0x22>
 8004798:	08004ec8 	.word	0x08004ec8
 800479c:	08004ee8 	.word	0x08004ee8
 80047a0:	08004ea8 	.word	0x08004ea8

080047a4 <std>:
 80047a4:	2300      	movs	r3, #0
 80047a6:	b510      	push	{r4, lr}
 80047a8:	4604      	mov	r4, r0
 80047aa:	e9c0 3300 	strd	r3, r3, [r0]
 80047ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047b2:	6083      	str	r3, [r0, #8]
 80047b4:	8181      	strh	r1, [r0, #12]
 80047b6:	6643      	str	r3, [r0, #100]	; 0x64
 80047b8:	81c2      	strh	r2, [r0, #14]
 80047ba:	6183      	str	r3, [r0, #24]
 80047bc:	4619      	mov	r1, r3
 80047be:	2208      	movs	r2, #8
 80047c0:	305c      	adds	r0, #92	; 0x5c
 80047c2:	f7ff f995 	bl	8003af0 <memset>
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <std+0x38>)
 80047c8:	6224      	str	r4, [r4, #32]
 80047ca:	6263      	str	r3, [r4, #36]	; 0x24
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <std+0x3c>)
 80047ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <std+0x40>)
 80047d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <std+0x44>)
 80047d6:	6323      	str	r3, [r4, #48]	; 0x30
 80047d8:	bd10      	pop	{r4, pc}
 80047da:	bf00      	nop
 80047dc:	08004b19 	.word	0x08004b19
 80047e0:	08004b3b 	.word	0x08004b3b
 80047e4:	08004b73 	.word	0x08004b73
 80047e8:	08004b97 	.word	0x08004b97

080047ec <_cleanup_r>:
 80047ec:	4901      	ldr	r1, [pc, #4]	; (80047f4 <_cleanup_r+0x8>)
 80047ee:	f000 b8af 	b.w	8004950 <_fwalk_reent>
 80047f2:	bf00      	nop
 80047f4:	0800472d 	.word	0x0800472d

080047f8 <__sfmoreglue>:
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	2568      	movs	r5, #104	; 0x68
 80047fc:	1e4a      	subs	r2, r1, #1
 80047fe:	4355      	muls	r5, r2
 8004800:	460e      	mov	r6, r1
 8004802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004806:	f7ff faeb 	bl	8003de0 <_malloc_r>
 800480a:	4604      	mov	r4, r0
 800480c:	b140      	cbz	r0, 8004820 <__sfmoreglue+0x28>
 800480e:	2100      	movs	r1, #0
 8004810:	e9c0 1600 	strd	r1, r6, [r0]
 8004814:	300c      	adds	r0, #12
 8004816:	60a0      	str	r0, [r4, #8]
 8004818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800481c:	f7ff f968 	bl	8003af0 <memset>
 8004820:	4620      	mov	r0, r4
 8004822:	bd70      	pop	{r4, r5, r6, pc}

08004824 <__sfp_lock_acquire>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__sfp_lock_acquire+0x8>)
 8004826:	f000 b8b3 	b.w	8004990 <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	200002f8 	.word	0x200002f8

08004830 <__sfp_lock_release>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__sfp_lock_release+0x8>)
 8004832:	f000 b8ae 	b.w	8004992 <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	200002f8 	.word	0x200002f8

0800483c <__sinit_lock_acquire>:
 800483c:	4801      	ldr	r0, [pc, #4]	; (8004844 <__sinit_lock_acquire+0x8>)
 800483e:	f000 b8a7 	b.w	8004990 <__retarget_lock_acquire_recursive>
 8004842:	bf00      	nop
 8004844:	200002f3 	.word	0x200002f3

08004848 <__sinit_lock_release>:
 8004848:	4801      	ldr	r0, [pc, #4]	; (8004850 <__sinit_lock_release+0x8>)
 800484a:	f000 b8a2 	b.w	8004992 <__retarget_lock_release_recursive>
 800484e:	bf00      	nop
 8004850:	200002f3 	.word	0x200002f3

08004854 <__sinit>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4604      	mov	r4, r0
 8004858:	f7ff fff0 	bl	800483c <__sinit_lock_acquire>
 800485c:	69a3      	ldr	r3, [r4, #24]
 800485e:	b11b      	cbz	r3, 8004868 <__sinit+0x14>
 8004860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004864:	f7ff bff0 	b.w	8004848 <__sinit_lock_release>
 8004868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800486c:	6523      	str	r3, [r4, #80]	; 0x50
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <__sinit+0x68>)
 8004870:	4a13      	ldr	r2, [pc, #76]	; (80048c0 <__sinit+0x6c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	62a2      	str	r2, [r4, #40]	; 0x28
 8004876:	42a3      	cmp	r3, r4
 8004878:	bf08      	it	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	4620      	mov	r0, r4
 800487e:	bf08      	it	eq
 8004880:	61a3      	streq	r3, [r4, #24]
 8004882:	f000 f81f 	bl	80048c4 <__sfp>
 8004886:	6060      	str	r0, [r4, #4]
 8004888:	4620      	mov	r0, r4
 800488a:	f000 f81b 	bl	80048c4 <__sfp>
 800488e:	60a0      	str	r0, [r4, #8]
 8004890:	4620      	mov	r0, r4
 8004892:	f000 f817 	bl	80048c4 <__sfp>
 8004896:	2200      	movs	r2, #0
 8004898:	2104      	movs	r1, #4
 800489a:	60e0      	str	r0, [r4, #12]
 800489c:	6860      	ldr	r0, [r4, #4]
 800489e:	f7ff ff81 	bl	80047a4 <std>
 80048a2:	2201      	movs	r2, #1
 80048a4:	2109      	movs	r1, #9
 80048a6:	68a0      	ldr	r0, [r4, #8]
 80048a8:	f7ff ff7c 	bl	80047a4 <std>
 80048ac:	2202      	movs	r2, #2
 80048ae:	2112      	movs	r1, #18
 80048b0:	68e0      	ldr	r0, [r4, #12]
 80048b2:	f7ff ff77 	bl	80047a4 <std>
 80048b6:	2301      	movs	r3, #1
 80048b8:	61a3      	str	r3, [r4, #24]
 80048ba:	e7d1      	b.n	8004860 <__sinit+0xc>
 80048bc:	08004cbc 	.word	0x08004cbc
 80048c0:	080047ed 	.word	0x080047ed

080048c4 <__sfp>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	4607      	mov	r7, r0
 80048c8:	f7ff ffac 	bl	8004824 <__sfp_lock_acquire>
 80048cc:	4b1e      	ldr	r3, [pc, #120]	; (8004948 <__sfp+0x84>)
 80048ce:	681e      	ldr	r6, [r3, #0]
 80048d0:	69b3      	ldr	r3, [r6, #24]
 80048d2:	b913      	cbnz	r3, 80048da <__sfp+0x16>
 80048d4:	4630      	mov	r0, r6
 80048d6:	f7ff ffbd 	bl	8004854 <__sinit>
 80048da:	3648      	adds	r6, #72	; 0x48
 80048dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	d503      	bpl.n	80048ec <__sfp+0x28>
 80048e4:	6833      	ldr	r3, [r6, #0]
 80048e6:	b30b      	cbz	r3, 800492c <__sfp+0x68>
 80048e8:	6836      	ldr	r6, [r6, #0]
 80048ea:	e7f7      	b.n	80048dc <__sfp+0x18>
 80048ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80048f0:	b9d5      	cbnz	r5, 8004928 <__sfp+0x64>
 80048f2:	4b16      	ldr	r3, [pc, #88]	; (800494c <__sfp+0x88>)
 80048f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048f8:	60e3      	str	r3, [r4, #12]
 80048fa:	6665      	str	r5, [r4, #100]	; 0x64
 80048fc:	f000 f847 	bl	800498e <__retarget_lock_init_recursive>
 8004900:	f7ff ff96 	bl	8004830 <__sfp_lock_release>
 8004904:	2208      	movs	r2, #8
 8004906:	4629      	mov	r1, r5
 8004908:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800490c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004910:	6025      	str	r5, [r4, #0]
 8004912:	61a5      	str	r5, [r4, #24]
 8004914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004918:	f7ff f8ea 	bl	8003af0 <memset>
 800491c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004924:	4620      	mov	r0, r4
 8004926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004928:	3468      	adds	r4, #104	; 0x68
 800492a:	e7d9      	b.n	80048e0 <__sfp+0x1c>
 800492c:	2104      	movs	r1, #4
 800492e:	4638      	mov	r0, r7
 8004930:	f7ff ff62 	bl	80047f8 <__sfmoreglue>
 8004934:	4604      	mov	r4, r0
 8004936:	6030      	str	r0, [r6, #0]
 8004938:	2800      	cmp	r0, #0
 800493a:	d1d5      	bne.n	80048e8 <__sfp+0x24>
 800493c:	f7ff ff78 	bl	8004830 <__sfp_lock_release>
 8004940:	230c      	movs	r3, #12
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	e7ee      	b.n	8004924 <__sfp+0x60>
 8004946:	bf00      	nop
 8004948:	08004cbc 	.word	0x08004cbc
 800494c:	ffff0001 	.word	0xffff0001

08004950 <_fwalk_reent>:
 8004950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004954:	4606      	mov	r6, r0
 8004956:	4688      	mov	r8, r1
 8004958:	2700      	movs	r7, #0
 800495a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800495e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004962:	f1b9 0901 	subs.w	r9, r9, #1
 8004966:	d505      	bpl.n	8004974 <_fwalk_reent+0x24>
 8004968:	6824      	ldr	r4, [r4, #0]
 800496a:	2c00      	cmp	r4, #0
 800496c:	d1f7      	bne.n	800495e <_fwalk_reent+0xe>
 800496e:	4638      	mov	r0, r7
 8004970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004974:	89ab      	ldrh	r3, [r5, #12]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d907      	bls.n	800498a <_fwalk_reent+0x3a>
 800497a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800497e:	3301      	adds	r3, #1
 8004980:	d003      	beq.n	800498a <_fwalk_reent+0x3a>
 8004982:	4629      	mov	r1, r5
 8004984:	4630      	mov	r0, r6
 8004986:	47c0      	blx	r8
 8004988:	4307      	orrs	r7, r0
 800498a:	3568      	adds	r5, #104	; 0x68
 800498c:	e7e9      	b.n	8004962 <_fwalk_reent+0x12>

0800498e <__retarget_lock_init_recursive>:
 800498e:	4770      	bx	lr

08004990 <__retarget_lock_acquire_recursive>:
 8004990:	4770      	bx	lr

08004992 <__retarget_lock_release_recursive>:
 8004992:	4770      	bx	lr

08004994 <__swhatbuf_r>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	460e      	mov	r6, r1
 8004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499c:	4614      	mov	r4, r2
 800499e:	2900      	cmp	r1, #0
 80049a0:	461d      	mov	r5, r3
 80049a2:	b096      	sub	sp, #88	; 0x58
 80049a4:	da07      	bge.n	80049b6 <__swhatbuf_r+0x22>
 80049a6:	2300      	movs	r3, #0
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	89b3      	ldrh	r3, [r6, #12]
 80049ac:	061a      	lsls	r2, r3, #24
 80049ae:	d410      	bmi.n	80049d2 <__swhatbuf_r+0x3e>
 80049b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b4:	e00e      	b.n	80049d4 <__swhatbuf_r+0x40>
 80049b6:	466a      	mov	r2, sp
 80049b8:	f000 f914 	bl	8004be4 <_fstat_r>
 80049bc:	2800      	cmp	r0, #0
 80049be:	dbf2      	blt.n	80049a6 <__swhatbuf_r+0x12>
 80049c0:	9a01      	ldr	r2, [sp, #4]
 80049c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049ca:	425a      	negs	r2, r3
 80049cc:	415a      	adcs	r2, r3
 80049ce:	602a      	str	r2, [r5, #0]
 80049d0:	e7ee      	b.n	80049b0 <__swhatbuf_r+0x1c>
 80049d2:	2340      	movs	r3, #64	; 0x40
 80049d4:	2000      	movs	r0, #0
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	b016      	add	sp, #88	; 0x58
 80049da:	bd70      	pop	{r4, r5, r6, pc}

080049dc <__smakebuf_r>:
 80049dc:	898b      	ldrh	r3, [r1, #12]
 80049de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049e0:	079d      	lsls	r5, r3, #30
 80049e2:	4606      	mov	r6, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	d507      	bpl.n	80049f8 <__smakebuf_r+0x1c>
 80049e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049ec:	6023      	str	r3, [r4, #0]
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	2301      	movs	r3, #1
 80049f2:	6163      	str	r3, [r4, #20]
 80049f4:	b002      	add	sp, #8
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	466a      	mov	r2, sp
 80049fa:	ab01      	add	r3, sp, #4
 80049fc:	f7ff ffca 	bl	8004994 <__swhatbuf_r>
 8004a00:	9900      	ldr	r1, [sp, #0]
 8004a02:	4605      	mov	r5, r0
 8004a04:	4630      	mov	r0, r6
 8004a06:	f7ff f9eb 	bl	8003de0 <_malloc_r>
 8004a0a:	b948      	cbnz	r0, 8004a20 <__smakebuf_r+0x44>
 8004a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a10:	059a      	lsls	r2, r3, #22
 8004a12:	d4ef      	bmi.n	80049f4 <__smakebuf_r+0x18>
 8004a14:	f023 0303 	bic.w	r3, r3, #3
 8004a18:	f043 0302 	orr.w	r3, r3, #2
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	e7e3      	b.n	80049e8 <__smakebuf_r+0xc>
 8004a20:	4b0d      	ldr	r3, [pc, #52]	; (8004a58 <__smakebuf_r+0x7c>)
 8004a22:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a24:	89a3      	ldrh	r3, [r4, #12]
 8004a26:	6020      	str	r0, [r4, #0]
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	81a3      	strh	r3, [r4, #12]
 8004a2e:	9b00      	ldr	r3, [sp, #0]
 8004a30:	6120      	str	r0, [r4, #16]
 8004a32:	6163      	str	r3, [r4, #20]
 8004a34:	9b01      	ldr	r3, [sp, #4]
 8004a36:	b15b      	cbz	r3, 8004a50 <__smakebuf_r+0x74>
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a3e:	f000 f8e3 	bl	8004c08 <_isatty_r>
 8004a42:	b128      	cbz	r0, 8004a50 <__smakebuf_r+0x74>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	81a3      	strh	r3, [r4, #12]
 8004a50:	89a0      	ldrh	r0, [r4, #12]
 8004a52:	4305      	orrs	r5, r0
 8004a54:	81a5      	strh	r5, [r4, #12]
 8004a56:	e7cd      	b.n	80049f4 <__smakebuf_r+0x18>
 8004a58:	080047ed 	.word	0x080047ed

08004a5c <memchr>:
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	b510      	push	{r4, lr}
 8004a60:	b2c9      	uxtb	r1, r1
 8004a62:	4402      	add	r2, r0
 8004a64:	4293      	cmp	r3, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	d101      	bne.n	8004a6e <memchr+0x12>
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	e003      	b.n	8004a76 <memchr+0x1a>
 8004a6e:	7804      	ldrb	r4, [r0, #0]
 8004a70:	3301      	adds	r3, #1
 8004a72:	428c      	cmp	r4, r1
 8004a74:	d1f6      	bne.n	8004a64 <memchr+0x8>
 8004a76:	bd10      	pop	{r4, pc}

08004a78 <__malloc_lock>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__malloc_lock+0x8>)
 8004a7a:	f7ff bf89 	b.w	8004990 <__retarget_lock_acquire_recursive>
 8004a7e:	bf00      	nop
 8004a80:	200002f4 	.word	0x200002f4

08004a84 <__malloc_unlock>:
 8004a84:	4801      	ldr	r0, [pc, #4]	; (8004a8c <__malloc_unlock+0x8>)
 8004a86:	f7ff bf84 	b.w	8004992 <__retarget_lock_release_recursive>
 8004a8a:	bf00      	nop
 8004a8c:	200002f4 	.word	0x200002f4

08004a90 <_raise_r>:
 8004a90:	291f      	cmp	r1, #31
 8004a92:	b538      	push	{r3, r4, r5, lr}
 8004a94:	4604      	mov	r4, r0
 8004a96:	460d      	mov	r5, r1
 8004a98:	d904      	bls.n	8004aa4 <_raise_r+0x14>
 8004a9a:	2316      	movs	r3, #22
 8004a9c:	6003      	str	r3, [r0, #0]
 8004a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004aa6:	b112      	cbz	r2, 8004aae <_raise_r+0x1e>
 8004aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004aac:	b94b      	cbnz	r3, 8004ac2 <_raise_r+0x32>
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 f830 	bl	8004b14 <_getpid_r>
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004abe:	f000 b817 	b.w	8004af0 <_kill_r>
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d00a      	beq.n	8004adc <_raise_r+0x4c>
 8004ac6:	1c59      	adds	r1, r3, #1
 8004ac8:	d103      	bne.n	8004ad2 <_raise_r+0x42>
 8004aca:	2316      	movs	r3, #22
 8004acc:	6003      	str	r3, [r0, #0]
 8004ace:	2001      	movs	r0, #1
 8004ad0:	e7e7      	b.n	8004aa2 <_raise_r+0x12>
 8004ad2:	2400      	movs	r4, #0
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004ada:	4798      	blx	r3
 8004adc:	2000      	movs	r0, #0
 8004ade:	e7e0      	b.n	8004aa2 <_raise_r+0x12>

08004ae0 <raise>:
 8004ae0:	4b02      	ldr	r3, [pc, #8]	; (8004aec <raise+0xc>)
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	f7ff bfd3 	b.w	8004a90 <_raise_r>
 8004aea:	bf00      	nop
 8004aec:	2000000c 	.word	0x2000000c

08004af0 <_kill_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	2300      	movs	r3, #0
 8004af4:	4d06      	ldr	r5, [pc, #24]	; (8004b10 <_kill_r+0x20>)
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	f7fb ff5e 	bl	80009be <_kill>
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d102      	bne.n	8004b0c <_kill_r+0x1c>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	b103      	cbz	r3, 8004b0c <_kill_r+0x1c>
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	bf00      	nop
 8004b10:	200002fc 	.word	0x200002fc

08004b14 <_getpid_r>:
 8004b14:	f7fb bf4c 	b.w	80009b0 <_getpid>

08004b18 <__sread>:
 8004b18:	b510      	push	{r4, lr}
 8004b1a:	460c      	mov	r4, r1
 8004b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b20:	f000 f894 	bl	8004c4c <_read_r>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	bfab      	itete	ge
 8004b28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b2c:	181b      	addge	r3, r3, r0
 8004b2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b32:	bfac      	ite	ge
 8004b34:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b36:	81a3      	strhlt	r3, [r4, #12]
 8004b38:	bd10      	pop	{r4, pc}

08004b3a <__swrite>:
 8004b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b3e:	461f      	mov	r7, r3
 8004b40:	898b      	ldrh	r3, [r1, #12]
 8004b42:	4605      	mov	r5, r0
 8004b44:	05db      	lsls	r3, r3, #23
 8004b46:	460c      	mov	r4, r1
 8004b48:	4616      	mov	r6, r2
 8004b4a:	d505      	bpl.n	8004b58 <__swrite+0x1e>
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	f000 f868 	bl	8004c28 <_lseek_r>
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	4632      	mov	r2, r6
 8004b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b60:	81a3      	strh	r3, [r4, #12]
 8004b62:	4628      	mov	r0, r5
 8004b64:	463b      	mov	r3, r7
 8004b66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6e:	f000 b817 	b.w	8004ba0 <_write_r>

08004b72 <__sseek>:
 8004b72:	b510      	push	{r4, lr}
 8004b74:	460c      	mov	r4, r1
 8004b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b7a:	f000 f855 	bl	8004c28 <_lseek_r>
 8004b7e:	1c43      	adds	r3, r0, #1
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	bf15      	itete	ne
 8004b84:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b8e:	81a3      	strheq	r3, [r4, #12]
 8004b90:	bf18      	it	ne
 8004b92:	81a3      	strhne	r3, [r4, #12]
 8004b94:	bd10      	pop	{r4, pc}

08004b96 <__sclose>:
 8004b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9a:	f000 b813 	b.w	8004bc4 <_close_r>
	...

08004ba0 <_write_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	2200      	movs	r2, #0
 8004baa:	4d05      	ldr	r5, [pc, #20]	; (8004bc0 <_write_r+0x20>)
 8004bac:	602a      	str	r2, [r5, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f7fb ff3c 	bl	8000a2c <_write>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d102      	bne.n	8004bbe <_write_r+0x1e>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	b103      	cbz	r3, 8004bbe <_write_r+0x1e>
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	200002fc 	.word	0x200002fc

08004bc4 <_close_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	4d05      	ldr	r5, [pc, #20]	; (8004be0 <_close_r+0x1c>)
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f7fb ff48 	bl	8000a64 <_close>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_close_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_close_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	200002fc 	.word	0x200002fc

08004be4 <_fstat_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	2300      	movs	r3, #0
 8004be8:	4d06      	ldr	r5, [pc, #24]	; (8004c04 <_fstat_r+0x20>)
 8004bea:	4604      	mov	r4, r0
 8004bec:	4608      	mov	r0, r1
 8004bee:	4611      	mov	r1, r2
 8004bf0:	602b      	str	r3, [r5, #0]
 8004bf2:	f7fb ff42 	bl	8000a7a <_fstat>
 8004bf6:	1c43      	adds	r3, r0, #1
 8004bf8:	d102      	bne.n	8004c00 <_fstat_r+0x1c>
 8004bfa:	682b      	ldr	r3, [r5, #0]
 8004bfc:	b103      	cbz	r3, 8004c00 <_fstat_r+0x1c>
 8004bfe:	6023      	str	r3, [r4, #0]
 8004c00:	bd38      	pop	{r3, r4, r5, pc}
 8004c02:	bf00      	nop
 8004c04:	200002fc 	.word	0x200002fc

08004c08 <_isatty_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	4d05      	ldr	r5, [pc, #20]	; (8004c24 <_isatty_r+0x1c>)
 8004c0e:	4604      	mov	r4, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	602b      	str	r3, [r5, #0]
 8004c14:	f7fb ff40 	bl	8000a98 <_isatty>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_isatty_r+0x1a>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_isatty_r+0x1a>
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	200002fc 	.word	0x200002fc

08004c28 <_lseek_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	4611      	mov	r1, r2
 8004c30:	2200      	movs	r2, #0
 8004c32:	4d05      	ldr	r5, [pc, #20]	; (8004c48 <_lseek_r+0x20>)
 8004c34:	602a      	str	r2, [r5, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	f7fb ff38 	bl	8000aac <_lseek>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_lseek_r+0x1e>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_lseek_r+0x1e>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200002fc 	.word	0x200002fc

08004c4c <_read_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	4611      	mov	r1, r2
 8004c54:	2200      	movs	r2, #0
 8004c56:	4d05      	ldr	r5, [pc, #20]	; (8004c6c <_read_r+0x20>)
 8004c58:	602a      	str	r2, [r5, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fb fec9 	bl	80009f2 <_read>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_read_r+0x1e>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_read_r+0x1e>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	200002fc 	.word	0x200002fc

08004c70 <_init>:
 8004c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c72:	bf00      	nop
 8004c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c76:	bc08      	pop	{r3}
 8004c78:	469e      	mov	lr, r3
 8004c7a:	4770      	bx	lr

08004c7c <_fini>:
 8004c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7e:	bf00      	nop
 8004c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c82:	bc08      	pop	{r3}
 8004c84:	469e      	mov	lr, r3
 8004c86:	4770      	bx	lr
