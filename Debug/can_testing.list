
can_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08006dec  08006dec  00016dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007084  08007084  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08007084  08007084  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007084  08007084  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800708c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  20000070  080070fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  080070fc  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017873  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035af  00000000  00000000  0003790c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  0003aec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  0003bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b32e  00000000  00000000  0003cf98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014041  00000000  00000000  000582c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009471c  00000000  00000000  0006c307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00100a23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005160  00000000  00000000  00100a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dd4 	.word	0x08006dd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006dd4 	.word	0x08006dd4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2uiz>:
 800071c:	004a      	lsls	r2, r1, #1
 800071e:	d211      	bcs.n	8000744 <__aeabi_d2uiz+0x28>
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000724:	d211      	bcs.n	800074a <__aeabi_d2uiz+0x2e>
 8000726:	d50d      	bpl.n	8000744 <__aeabi_d2uiz+0x28>
 8000728:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d40e      	bmi.n	8000750 <__aeabi_d2uiz+0x34>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	fa23 f002 	lsr.w	r0, r3, r2
 8000742:	4770      	bx	lr
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	4770      	bx	lr
 800074a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800074e:	d102      	bne.n	8000756 <__aeabi_d2uiz+0x3a>
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	4770      	bx	lr
 8000756:	f04f 0000 	mov.w	r0, #0
 800075a:	4770      	bx	lr

0800075c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_ADC1_Init+0x74>)
 800076e:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <MX_ADC1_Init+0x78>)
 8000770:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_ADC1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000786:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800078a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <MX_ADC1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_ADC1_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_ADC1_Init+0x74>)
 800079a:	f001 fe0f 	bl	80023bc <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f001 fa1f 	bl	8001be6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_ADC1_Init+0x74>)
 80007ba:	f002 f897 	bl	80028ec <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007c4:	f001 fa0f 	bl	8001be6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000011c 	.word	0x2000011c
 80007d4:	40012400 	.word	0x40012400

080007d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0310 	add.w	r3, r7, #16
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a14      	ldr	r2, [pc, #80]	; (8000844 <HAL_ADC_MspInit+0x6c>)
 80007f4:	4293      	cmp	r3, r2
 80007f6:	d121      	bne.n	800083c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <HAL_ADC_MspInit+0x70>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a12      	ldr	r2, [pc, #72]	; (8000848 <HAL_ADC_MspInit+0x70>)
 80007fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <HAL_ADC_MspInit+0x70>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <HAL_ADC_MspInit+0x70>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <HAL_ADC_MspInit+0x70>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <HAL_ADC_MspInit+0x70>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0304 	and.w	r3, r3, #4
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800082c:	2303      	movs	r3, #3
 800082e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4619      	mov	r1, r3
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <HAL_ADC_MspInit+0x74>)
 8000838:	f003 fa18 	bl	8003c6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800083c:	bf00      	nop
 800083e:	3720      	adds	r7, #32
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40012400 	.word	0x40012400
 8000848:	40021000 	.word	0x40021000
 800084c:	40010800 	.word	0x40010800

08000850 <BqPack_StructInit>:
/* Global variables */
queue_t Fifo_Queue;
uint8_t error_flag;

void BqPack_StructInit(bq_pack *pack)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	pack -> voltage = 100000;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4a32      	ldr	r2, [pc, #200]	; (8000924 <BqPack_StructInit+0xd4>)
 800085c:	601a      	str	r2, [r3, #0]
	pack -> temperature[0] = 30;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	221e      	movs	r2, #30
 8000862:	711a      	strb	r2, [r3, #4]
	pack -> temperature[1] = 40;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	715a      	strb	r2, [r3, #5]
	pack -> temperature[2] = 50;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2232      	movs	r2, #50	; 0x32
 800086e:	719a      	strb	r2, [r3, #6]
	pack -> temperature[3] = 30;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	221e      	movs	r2, #30
 8000874:	71da      	strb	r2, [r3, #7]
	pack -> temperature[4] = 30;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	221e      	movs	r2, #30
 800087a:	721a      	strb	r2, [r3, #8]
	pack -> temperature[5] = 30;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	221e      	movs	r2, #30
 8000880:	725a      	strb	r2, [r3, #9]
	pack -> temperature[6] = 30;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	221e      	movs	r2, #30
 8000886:	729a      	strb	r2, [r3, #10]
	pack -> temperature[7] = 30;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	221e      	movs	r2, #30
 800088c:	72da      	strb	r2, [r3, #11]
	pack -> temperature[8] = 30;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	221e      	movs	r2, #30
 8000892:	731a      	strb	r2, [r3, #12]
	pack -> temperature[9] = 30;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	221e      	movs	r2, #30
 8000898:	735a      	strb	r2, [r3, #13]
	pack -> temperature[10] = 30;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	221e      	movs	r2, #30
 800089e:	739a      	strb	r2, [r3, #14]
	pack -> temperature[11] = 30;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	221e      	movs	r2, #30
 80008a4:	73da      	strb	r2, [r3, #15]

	pack->cell_voltages[0] = 3200;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80008ac:	82da      	strh	r2, [r3, #22]
	pack->cell_voltages[1] = 4000;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008b4:	831a      	strh	r2, [r3, #24]
	for(uint8_t i = 2; i < NUM_OF_CELLS ; i++)
 80008b6:	2302      	movs	r3, #2
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e00a      	b.n	80008d2 <BqPack_StructInit+0x82>
	{
		pack->cell_voltages[i] = 3500;
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	3308      	adds	r3, #8
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80008ca:	80da      	strh	r2, [r3, #6]
	for(uint8_t i = 2; i < NUM_OF_CELLS ; i++)
 80008cc:	7bfb      	ldrb	r3, [r7, #15]
 80008ce:	3301      	adds	r3, #1
 80008d0:	73fb      	strb	r3, [r7, #15]
 80008d2:	7bfb      	ldrb	r3, [r7, #15]
 80008d4:	2b1b      	cmp	r3, #27
 80008d6:	d9f1      	bls.n	80008bc <BqPack_StructInit+0x6c>
	}

	pack->warnings = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2200      	movs	r2, #0
 80008dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	pack->current = 2200;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f640 0298 	movw	r2, #2200	; 0x898
 80008e6:	655a      	str	r2, [r3, #84]	; 0x54
	pack->power = 4000;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008ee:	659a      	str	r2, [r3, #88]	; 0x58
	pack->avg_temperature = 3500;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80008f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	pack->charge_level = 100;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2264      	movs	r2, #100	; 0x64
 80008fe:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e

	pack -> lowest_cell_volts = 3200;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000908:	821a      	strh	r2, [r3, #16]
	pack -> highest_cell_volts = 4000;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000910:	825a      	strh	r2, [r3, #18]
	pack -> op_mode = 0;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2200      	movs	r2, #0
 8000916:	751a      	strb	r2, [r3, #20]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	000186a0 	.word	0x000186a0

08000928 <BqPack_StructUpdate_CurrSensor>:

void BqPack_StructUpdate_CurrSensor(bq_pack *pack, CurrentData *control)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
	pack->current = control->current;
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	69da      	ldr	r2, [r3, #28]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	655a      	str	r2, [r3, #84]	; 0x54
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <BqPack_RecalculateData>:


void BqPack_RecalculateData(bq_pack *pack)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	pack->power = pack->current * pack->voltage;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	fb02 f203 	mul.w	r2, r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	659a      	str	r2, [r3, #88]	; 0x58
	pack->charge_level = 0;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	pack->avg_temperature = (	pack->temperature[0] +
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	461a      	mov	r2, r3
								pack->temperature[1] +
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	795b      	ldrb	r3, [r3, #5]
	pack->avg_temperature = (	pack->temperature[0] +
 800096e:	4413      	add	r3, r2
								pack->temperature[2] +
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	7992      	ldrb	r2, [r2, #6]
								pack->temperature[1] +
 8000974:	4413      	add	r3, r2
								pack->temperature[3] +
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	79d2      	ldrb	r2, [r2, #7]
								pack->temperature[2] +
 800097a:	4413      	add	r3, r2
								pack->temperature[4] +
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	7a12      	ldrb	r2, [r2, #8]
								pack->temperature[3] +
 8000980:	4413      	add	r3, r2
								pack->temperature[5] +
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	7a52      	ldrb	r2, [r2, #9]
								pack->temperature[4] +
 8000986:	4413      	add	r3, r2
								pack->temperature[6] +
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	7a92      	ldrb	r2, [r2, #10]
								pack->temperature[5] +
 800098c:	4413      	add	r3, r2
								pack->temperature[7] +
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	7ad2      	ldrb	r2, [r2, #11]
								pack->temperature[6] +
 8000992:	4413      	add	r3, r2
								pack->temperature[8] +
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	7b12      	ldrb	r2, [r2, #12]
								pack->temperature[7] +
 8000998:	4413      	add	r3, r2
								pack->temperature[9] +
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7b52      	ldrb	r2, [r2, #13]
								pack->temperature[8] +
 800099e:	4413      	add	r3, r2
								pack->temperature[10]+
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	7b92      	ldrb	r2, [r2, #14]
								pack->temperature[9] +
 80009a4:	4413      	add	r3, r2
								pack->temperature[11])/12;
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	7bd2      	ldrb	r2, [r2, #15]
								pack->temperature[10]+
 80009aa:	4413      	add	r3, r2
								pack->temperature[11])/12;
 80009ac:	4a07      	ldr	r2, [pc, #28]	; (80009cc <BqPack_RecalculateData+0x88>)
 80009ae:	fb82 1203 	smull	r1, r2, r2, r3
 80009b2:	1052      	asrs	r2, r2, #1
 80009b4:	17db      	asrs	r3, r3, #31
 80009b6:	1ad3      	subs	r3, r2, r3
	pack->avg_temperature = (	pack->temperature[0] +
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	2aaaaaab 	.word	0x2aaaaaab

080009d0 <BqPack_StructUpdate_MSP430>:


void BqPack_StructUpdate_MSP430(bq_pack *pack, char *control)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	char *data;

	data = strtok(control, ";");
 80009da:	493b      	ldr	r1, [pc, #236]	; (8000ac8 <BqPack_StructUpdate_MSP430+0xf8>)
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f005 f9ff 	bl	8005de0 <strtok>
 80009e2:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00c      	beq.n	8000a04 <BqPack_StructUpdate_MSP430+0x34>
	{
		uint32_t temp = (uint32_t)strtol(data, NULL, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	69f8      	ldr	r0, [r7, #28]
 80009f0:	f005 fad8 	bl	8005fa4 <strtol>
 80009f4:	4603      	mov	r3, r0
 80009f6:	61bb      	str	r3, [r7, #24]
		if(temp)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <BqPack_StructUpdate_MSP430+0x34>
		{
			pack -> voltage = temp;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	601a      	str	r2, [r3, #0]
		}
	}

	data = strtok(NULL, ";");
 8000a04:	4930      	ldr	r1, [pc, #192]	; (8000ac8 <BqPack_StructUpdate_MSP430+0xf8>)
 8000a06:	2000      	movs	r0, #0
 8000a08:	f005 f9ea 	bl	8005de0 <strtok>
 8000a0c:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000a0e:	69fb      	ldr	r3, [r7, #28]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d006      	beq.n	8000a22 <BqPack_StructUpdate_MSP430+0x52>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	69f8      	ldr	r0, [r7, #28]
 8000a1a:	f005 fac3 	bl	8005fa4 <strtol>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	82fb      	strh	r3, [r7, #22]
		{
			//pack -> temperature1 = temp;
		}
	}

	data = strtok(NULL, ";");
 8000a22:	4929      	ldr	r1, [pc, #164]	; (8000ac8 <BqPack_StructUpdate_MSP430+0xf8>)
 8000a24:	2000      	movs	r0, #0
 8000a26:	f005 f9db 	bl	8005de0 <strtok>
 8000a2a:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <BqPack_StructUpdate_MSP430+0x70>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	69f8      	ldr	r0, [r7, #28]
 8000a38:	f005 fab4 	bl	8005fa4 <strtol>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	82bb      	strh	r3, [r7, #20]
		{
			//pack -> temperature2 = temp;
		}
	}

	data = strtok(NULL, ";");
 8000a40:	4921      	ldr	r1, [pc, #132]	; (8000ac8 <BqPack_StructUpdate_MSP430+0xf8>)
 8000a42:	2000      	movs	r0, #0
 8000a44:	f005 f9cc 	bl	8005de0 <strtok>
 8000a48:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d00c      	beq.n	8000a6a <BqPack_StructUpdate_MSP430+0x9a>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	69f8      	ldr	r0, [r7, #28]
 8000a56:	f005 faa5 	bl	8005fa4 <strtol>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	827b      	strh	r3, [r7, #18]
		if(temp)
 8000a5e:	8a7b      	ldrh	r3, [r7, #18]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d002      	beq.n	8000a6a <BqPack_StructUpdate_MSP430+0x9a>
		{
			pack -> lowest_cell_volts = temp;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	8a7a      	ldrh	r2, [r7, #18]
 8000a68:	821a      	strh	r2, [r3, #16]
		}
	}

	data = strtok(NULL, ";");
 8000a6a:	4917      	ldr	r1, [pc, #92]	; (8000ac8 <BqPack_StructUpdate_MSP430+0xf8>)
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f005 f9b7 	bl	8005de0 <strtok>
 8000a72:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d00c      	beq.n	8000a94 <BqPack_StructUpdate_MSP430+0xc4>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	69f8      	ldr	r0, [r7, #28]
 8000a80:	f005 fa90 	bl	8005fa4 <strtol>
 8000a84:	4603      	mov	r3, r0
 8000a86:	823b      	strh	r3, [r7, #16]
		if(temp)
 8000a88:	8a3b      	ldrh	r3, [r7, #16]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <BqPack_StructUpdate_MSP430+0xc4>
		{
			pack -> highest_cell_volts = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	8a3a      	ldrh	r2, [r7, #16]
 8000a92:	825a      	strh	r2, [r3, #18]
		}
	}

	data = strtok(NULL, ";");
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <BqPack_StructUpdate_MSP430+0xf8>)
 8000a96:	2000      	movs	r0, #0
 8000a98:	f005 f9a2 	bl	8005de0 <strtok>
 8000a9c:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00d      	beq.n	8000ac0 <BqPack_StructUpdate_MSP430+0xf0>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	69f8      	ldr	r0, [r7, #28]
 8000aaa:	f005 fa7b 	bl	8005fa4 <strtol>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	81fb      	strh	r3, [r7, #14]
		if(temp)
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <BqPack_StructUpdate_MSP430+0xf0>
		{
			pack -> op_mode = temp;
 8000ab8:	89fb      	ldrh	r3, [r7, #14]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	751a      	strb	r2, [r3, #20]
		}
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	08006dec 	.word	0x08006dec

08000acc <BqPack_CheckForErrors>:

uint8_t BqPack_CheckForErrors(bq_pack *pack)
{
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	b097      	sub	sp, #92	; 0x5c
 8000ad0:	af12      	add	r7, sp, #72	; 0x48
 8000ad2:	6078      	str	r0, [r7, #4]
	error_flag = VoltageErrorCheck(&(pack->voltage));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f8d8 	bl	8000c8c <VoltageErrorCheck>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b64      	ldr	r3, [pc, #400]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000ae2:	701a      	strb	r2, [r3, #0]
	if(error_flag != BqPack_OK)
 8000ae4:	4b63      	ldr	r3, [pc, #396]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d02d      	beq.n	8000b48 <BqPack_CheckForErrors+0x7c>
	{
		CanSendPdo(hcan, 0x85, 8, &can_frame_template, error_flag, (uint8_t)((pack->voltage)/1000), 0, 0, 0, 0, 0, 0);
 8000aec:	4b61      	ldr	r3, [pc, #388]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	4960      	ldr	r1, [pc, #384]	; (8000c78 <BqPack_CheckForErrors+0x1ac>)
 8000af6:	fba1 1202 	umull	r1, r2, r1, r2
 8000afa:	0992      	lsrs	r2, r2, #6
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	4e5f      	ldr	r6, [pc, #380]	; (8000c7c <BqPack_CheckForErrors+0x1b0>)
 8000b00:	2100      	movs	r1, #0
 8000b02:	9110      	str	r1, [sp, #64]	; 0x40
 8000b04:	2100      	movs	r1, #0
 8000b06:	910f      	str	r1, [sp, #60]	; 0x3c
 8000b08:	2100      	movs	r1, #0
 8000b0a:	910e      	str	r1, [sp, #56]	; 0x38
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	910d      	str	r1, [sp, #52]	; 0x34
 8000b10:	2100      	movs	r1, #0
 8000b12:	910c      	str	r1, [sp, #48]	; 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	910b      	str	r1, [sp, #44]	; 0x2c
 8000b18:	920a      	str	r2, [sp, #40]	; 0x28
 8000b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b1c:	4b58      	ldr	r3, [pc, #352]	; (8000c80 <BqPack_CheckForErrors+0x1b4>)
 8000b1e:	9308      	str	r3, [sp, #32]
 8000b20:	2308      	movs	r3, #8
 8000b22:	9307      	str	r3, [sp, #28]
 8000b24:	2385      	movs	r3, #133	; 0x85
 8000b26:	9306      	str	r3, [sp, #24]
 8000b28:	466d      	mov	r5, sp
 8000b2a:	f106 0410 	add.w	r4, r6, #16
 8000b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b36:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b3e:	f000 fb0f 	bl	8001160 <CanSendPdo>
		return error_flag;
 8000b42:	4b4c      	ldr	r3, [pc, #304]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	e090      	b.n	8000c6a <BqPack_CheckForErrors+0x19e>
	}

	error_flag = TemperatureErrorCheck(&battery_pack.temperature);
 8000b48:	484e      	ldr	r0, [pc, #312]	; (8000c84 <BqPack_CheckForErrors+0x1b8>)
 8000b4a:	f000 f8bb 	bl	8000cc4 <TemperatureErrorCheck>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000b54:	701a      	strb	r2, [r3, #0]
	if(error_flag != BqPack_OK)
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d040      	beq.n	8000be0 <BqPack_CheckForErrors+0x114>
	{
		uint8_t htemp = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < 12 ; i++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	73bb      	strb	r3, [r7, #14]
 8000b66:	e00e      	b.n	8000b86 <BqPack_CheckForErrors+0xba>
		{
			if(htemp < battery_pack.temperature[i]) htemp = battery_pack.temperature[i];
 8000b68:	7bbb      	ldrb	r3, [r7, #14]
 8000b6a:	4a47      	ldr	r2, [pc, #284]	; (8000c88 <BqPack_CheckForErrors+0x1bc>)
 8000b6c:	4413      	add	r3, r2
 8000b6e:	791b      	ldrb	r3, [r3, #4]
 8000b70:	7bfa      	ldrb	r2, [r7, #15]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d204      	bcs.n	8000b80 <BqPack_CheckForErrors+0xb4>
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	4a43      	ldr	r2, [pc, #268]	; (8000c88 <BqPack_CheckForErrors+0x1bc>)
 8000b7a:	4413      	add	r3, r2
 8000b7c:	791b      	ldrb	r3, [r3, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < 12 ; i++)
 8000b80:	7bbb      	ldrb	r3, [r7, #14]
 8000b82:	3301      	adds	r3, #1
 8000b84:	73bb      	strb	r3, [r7, #14]
 8000b86:	7bbb      	ldrb	r3, [r7, #14]
 8000b88:	2b0b      	cmp	r3, #11
 8000b8a:	d9ed      	bls.n	8000b68 <BqPack_CheckForErrors+0x9c>
		}
		CanSendPdo(hcan, 0x85, 8, &can_frame_template, error_flag, (uint8_t)htemp + 30, 0, 0, 0, 0, 0, 0);
 8000b8c:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	7bfa      	ldrb	r2, [r7, #15]
 8000b92:	321e      	adds	r2, #30
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	4e39      	ldr	r6, [pc, #228]	; (8000c7c <BqPack_CheckForErrors+0x1b0>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	9110      	str	r1, [sp, #64]	; 0x40
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	910f      	str	r1, [sp, #60]	; 0x3c
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	910e      	str	r1, [sp, #56]	; 0x38
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	910d      	str	r1, [sp, #52]	; 0x34
 8000ba8:	2100      	movs	r1, #0
 8000baa:	910c      	str	r1, [sp, #48]	; 0x30
 8000bac:	2100      	movs	r1, #0
 8000bae:	910b      	str	r1, [sp, #44]	; 0x2c
 8000bb0:	920a      	str	r2, [sp, #40]	; 0x28
 8000bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <BqPack_CheckForErrors+0x1b4>)
 8000bb6:	9308      	str	r3, [sp, #32]
 8000bb8:	2308      	movs	r3, #8
 8000bba:	9307      	str	r3, [sp, #28]
 8000bbc:	2385      	movs	r3, #133	; 0x85
 8000bbe:	9306      	str	r3, [sp, #24]
 8000bc0:	466d      	mov	r5, sp
 8000bc2:	f106 0410 	add.w	r4, r6, #16
 8000bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bce:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bd2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bd6:	f000 fac3 	bl	8001160 <CanSendPdo>
		return error_flag;
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	e044      	b.n	8000c6a <BqPack_CheckForErrors+0x19e>
	}

	error_flag = VoltageDiffErrorCheck(&pack->highest_cell_volts, &pack->lowest_cell_volts);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f103 0212 	add.w	r2, r3, #18
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3310      	adds	r3, #16
 8000bea:	4619      	mov	r1, r3
 8000bec:	4610      	mov	r0, r2
 8000bee:	f000 f889 	bl	8000d04 <VoltageDiffErrorCheck>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	if(error_flag != BqPack_OK)
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d031      	beq.n	8000c66 <BqPack_CheckForErrors+0x19a>
	{
		uint8_t volt_diff = abs(pack->highest_cell_volts - pack->lowest_cell_volts);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	8a5b      	ldrh	r3, [r3, #18]
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	8a1b      	ldrh	r3, [r3, #16]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bfb8      	it	lt
 8000c12:	425b      	neglt	r3, r3
 8000c14:	737b      	strb	r3, [r7, #13]
		CanSendPdo(hcan, 0x85, 8, &can_frame_template, error_flag, volt_diff, 0, 0, 0, 0, 0, 0);
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4e18      	ldr	r6, [pc, #96]	; (8000c7c <BqPack_CheckForErrors+0x1b0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	9210      	str	r2, [sp, #64]	; 0x40
 8000c20:	2200      	movs	r2, #0
 8000c22:	920f      	str	r2, [sp, #60]	; 0x3c
 8000c24:	2200      	movs	r2, #0
 8000c26:	920e      	str	r2, [sp, #56]	; 0x38
 8000c28:	2200      	movs	r2, #0
 8000c2a:	920d      	str	r2, [sp, #52]	; 0x34
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	920c      	str	r2, [sp, #48]	; 0x30
 8000c30:	2200      	movs	r2, #0
 8000c32:	920b      	str	r2, [sp, #44]	; 0x2c
 8000c34:	7b7a      	ldrb	r2, [r7, #13]
 8000c36:	920a      	str	r2, [sp, #40]	; 0x28
 8000c38:	9309      	str	r3, [sp, #36]	; 0x24
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <BqPack_CheckForErrors+0x1b4>)
 8000c3c:	9308      	str	r3, [sp, #32]
 8000c3e:	2308      	movs	r3, #8
 8000c40:	9307      	str	r3, [sp, #28]
 8000c42:	2385      	movs	r3, #133	; 0x85
 8000c44:	9306      	str	r3, [sp, #24]
 8000c46:	466d      	mov	r5, sp
 8000c48:	f106 0410 	add.w	r4, r6, #16
 8000c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c58:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c5c:	f000 fa80 	bl	8001160 <CanSendPdo>
		return error_flag;
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	e001      	b.n	8000c6a <BqPack_CheckForErrors+0x19e>
	}
	return error_flag;
 8000c66:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <BqPack_CheckForErrors+0x1a8>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000190 	.word	0x20000190
 8000c78:	10624dd3 	.word	0x10624dd3
 8000c7c:	20000224 	.word	0x20000224
 8000c80:	2000014c 	.word	0x2000014c
 8000c84:	200001c8 	.word	0x200001c8
 8000c88:	200001c4 	.word	0x200001c4

08000c8c <VoltageErrorCheck>:

BqPack_Error_Status VoltageErrorCheck(uint32_t *voltage)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if(*voltage > OVERVOLTAGE_ERR) 		return BqPack_ErrOV;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <VoltageErrorCheck+0x30>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d901      	bls.n	8000ca2 <VoltageErrorCheck+0x16>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e007      	b.n	8000cb2 <VoltageErrorCheck+0x26>
	if(*voltage < UNDERVOLTAGE_ERR) 	return BqPack_ErrUV;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <VoltageErrorCheck+0x34>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d801      	bhi.n	8000cb0 <VoltageErrorCheck+0x24>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e000      	b.n	8000cb2 <VoltageErrorCheck+0x26>

	return BqPack_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	0001d4c0 	.word	0x0001d4c0
 8000cc0:	0001404f 	.word	0x0001404f

08000cc4 <TemperatureErrorCheck>:

BqPack_Error_Status TemperatureErrorCheck(uint8_t (*temperature)[12])
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 12; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
 8000cd0:	e00f      	b.n	8000cf2 <TemperatureErrorCheck+0x2e>
	{
		if(*temperature[i] > HIGHTEMP_ERR) return BqPack_ErrHT;
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b37      	cmp	r3, #55	; 0x37
 8000ce6:	d901      	bls.n	8000cec <TemperatureErrorCheck+0x28>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e006      	b.n	8000cfa <TemperatureErrorCheck+0x36>
	for(uint8_t i = 0; i < 12; i++)
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b0b      	cmp	r3, #11
 8000cf6:	d9ec      	bls.n	8000cd2 <TemperatureErrorCheck+0xe>
		if(*temperature[i] < LOWTEMP_ERR) return BqPack_ErrLT;
	}

	return BqPack_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr

08000d04 <VoltageDiffErrorCheck>:

BqPack_Error_Status VoltageDiffErrorCheck(uint16_t *voltage1, uint16_t *voltage2)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	if(abs(*voltage1 - *voltage2) > BAL_ERR) 	return BqPack_ErrBal;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bfb8      	it	lt
 8000d1e:	425b      	neglt	r3, r3
 8000d20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d24:	dd01      	ble.n	8000d2a <VoltageDiffErrorCheck+0x26>
 8000d26:	2309      	movs	r3, #9
 8000d28:	e000      	b.n	8000d2c <VoltageDiffErrorCheck+0x28>

	return BqPack_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <BqPack_CheckForWarnings>:
/*************************************************************************************/
void BqPack_CheckForWarnings(bq_pack *pack)
{
 8000d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3a:	b097      	sub	sp, #92	; 0x5c
 8000d3c:	af12      	add	r7, sp, #72	; 0x48
 8000d3e:	6078      	str	r0, [r7, #4]
	pack->warnings += VoltageWarningCheck(&pack->voltage);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 f88e 	bl	8000e64 <VoltageWarningCheck>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000d52:	b28b      	uxth	r3, r1
 8000d54:	4413      	add	r3, r2
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	pack->warnings += TemperatureWarningCheck(&pack->temperature);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3304      	adds	r3, #4
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f89a 	bl	8000e9c <TemperatureWarningCheck>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000d72:	b28b      	uxth	r3, r1
 8000d74:	4413      	add	r3, r2
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	pack->warnings += VoltageDiffErrorCheck(&pack->highest_cell_volts, &pack->lowest_cell_volts);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f103 0212 	add.w	r2, r3, #18
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3310      	adds	r3, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	f7ff ffba 	bl	8000d04 <VoltageDiffErrorCheck>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4619      	mov	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000d9a:	b28b      	uxth	r3, r1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	if(pack->warnings != 0)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d04d      	beq.n	8000e4c <BqPack_CheckForWarnings+0x114>
	{
		uint8_t htemp = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < 12 ; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	e00e      	b.n	8000dd8 <BqPack_CheckForWarnings+0xa0>
		{
			if(htemp < battery_pack.temperature[i]) htemp = battery_pack.temperature[i];
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	4a25      	ldr	r2, [pc, #148]	; (8000e54 <BqPack_CheckForWarnings+0x11c>)
 8000dbe:	4413      	add	r3, r2
 8000dc0:	791b      	ldrb	r3, [r3, #4]
 8000dc2:	7bfa      	ldrb	r2, [r7, #15]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d204      	bcs.n	8000dd2 <BqPack_CheckForWarnings+0x9a>
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <BqPack_CheckForWarnings+0x11c>)
 8000dcc:	4413      	add	r3, r2
 8000dce:	791b      	ldrb	r3, [r3, #4]
 8000dd0:	73fb      	strb	r3, [r7, #15]
		for(uint8_t i = 0; i < 12 ; i++)
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	73bb      	strb	r3, [r7, #14]
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	2b0b      	cmp	r3, #11
 8000ddc:	d9ed      	bls.n	8000dba <BqPack_CheckForWarnings+0x82>
		}
		uint8_t volt_diff = abs(pack->highest_cell_volts - pack->lowest_cell_volts);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	8a5b      	ldrh	r3, [r3, #18]
 8000de2:	461a      	mov	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	8a1b      	ldrh	r3, [r3, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	bfb8      	it	lt
 8000dee:	425b      	neglt	r3, r3
 8000df0:	737b      	strb	r3, [r7, #13]
		CanSendPdo(hcan, 0x86, 8, &can_frame_template, pack->warnings, (uint8_t)(pack->voltage/1000), htemp, volt_diff, 0, 0, 0, 0);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	4916      	ldr	r1, [pc, #88]	; (8000e58 <BqPack_CheckForWarnings+0x120>)
 8000e00:	fba1 1202 	umull	r1, r2, r1, r2
 8000e04:	0992      	lsrs	r2, r2, #6
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	4e14      	ldr	r6, [pc, #80]	; (8000e5c <BqPack_CheckForWarnings+0x124>)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	9110      	str	r1, [sp, #64]	; 0x40
 8000e0e:	2100      	movs	r1, #0
 8000e10:	910f      	str	r1, [sp, #60]	; 0x3c
 8000e12:	2100      	movs	r1, #0
 8000e14:	910e      	str	r1, [sp, #56]	; 0x38
 8000e16:	2100      	movs	r1, #0
 8000e18:	910d      	str	r1, [sp, #52]	; 0x34
 8000e1a:	7b79      	ldrb	r1, [r7, #13]
 8000e1c:	910c      	str	r1, [sp, #48]	; 0x30
 8000e1e:	7bf9      	ldrb	r1, [r7, #15]
 8000e20:	910b      	str	r1, [sp, #44]	; 0x2c
 8000e22:	920a      	str	r2, [sp, #40]	; 0x28
 8000e24:	9309      	str	r3, [sp, #36]	; 0x24
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <BqPack_CheckForWarnings+0x128>)
 8000e28:	9308      	str	r3, [sp, #32]
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	9307      	str	r3, [sp, #28]
 8000e2e:	2386      	movs	r3, #134	; 0x86
 8000e30:	9306      	str	r3, [sp, #24]
 8000e32:	466d      	mov	r5, sp
 8000e34:	f106 0410 	add.w	r4, r6, #16
 8000e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e40:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e44:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e48:	f000 f98a 	bl	8001160 <CanSendPdo>
	}

}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e54:	200001c4 	.word	0x200001c4
 8000e58:	10624dd3 	.word	0x10624dd3
 8000e5c:	20000224 	.word	0x20000224
 8000e60:	2000014c 	.word	0x2000014c

08000e64 <VoltageWarningCheck>:

uint8_t VoltageWarningCheck(uint32_t *voltage)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	if(*voltage > OVERVOLTAGE_WARN)		return pow(2, 0);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <VoltageWarningCheck+0x30>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d901      	bls.n	8000e7a <VoltageWarningCheck+0x16>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e007      	b.n	8000e8a <VoltageWarningCheck+0x26>
	if(*voltage < UNDERVOLTAGE_WARN)	return pow(2, 1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <VoltageWarningCheck+0x34>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d801      	bhi.n	8000e88 <VoltageWarningCheck+0x24>
 8000e84:	2302      	movs	r3, #2
 8000e86:	e000      	b.n	8000e8a <VoltageWarningCheck+0x26>
	return 0;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	0001cafc 	.word	0x0001cafc
 8000e98:	00014437 	.word	0x00014437

08000e9c <TemperatureWarningCheck>:

uint8_t TemperatureWarningCheck(uint8_t (*temperature)[12])
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 12; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e01c      	b.n	8000ee4 <TemperatureWarningCheck+0x48>
	{
		if(*temperature[i] > HIGHTEMP_WARN) return pow(2, 2);
 8000eaa:	7bfa      	ldrb	r2, [r7, #15]
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b2d      	cmp	r3, #45	; 0x2d
 8000ebe:	d901      	bls.n	8000ec4 <TemperatureWarningCheck+0x28>
 8000ec0:	2304      	movs	r3, #4
 8000ec2:	e013      	b.n	8000eec <TemperatureWarningCheck+0x50>
		if(*temperature[i] < LOWTEMP_WARN) return pow(2, 3);
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d801      	bhi.n	8000ede <TemperatureWarningCheck+0x42>
 8000eda:	2308      	movs	r3, #8
 8000edc:	e006      	b.n	8000eec <TemperatureWarningCheck+0x50>
	for(uint8_t i = 0; i < 12; i++)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b0b      	cmp	r3, #11
 8000ee8:	d9df      	bls.n	8000eaa <TemperatureWarningCheck+0xe>
	}
	return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3714      	adds	r7, #20
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
	...

08000ef8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000efc:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_CAN_Init+0x90>)
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <MX_CAN_Init+0x94>)
 8000f00:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f04:	2208      	movs	r2, #8
 8000f06:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f16:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000f1a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f22:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <MX_CAN_Init+0x90>)
 8000f4a:	f001 fe62 	bl	8002c12 <HAL_CAN_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 fe47 	bl	8001be6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  //void (*ptr2func)(void) =
  send_functions[0] = &SendCellVoltages1_8;
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <MX_CAN_Init+0x98>)
 8000f5a:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <MX_CAN_Init+0x9c>)
 8000f5c:	601a      	str	r2, [r3, #0]
  send_functions[1] = &SendCellVoltages9_16;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_CAN_Init+0x98>)
 8000f60:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <MX_CAN_Init+0xa0>)
 8000f62:	605a      	str	r2, [r3, #4]
  send_functions[2] = &SendCellVoltages17_24;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_CAN_Init+0x98>)
 8000f66:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <MX_CAN_Init+0xa4>)
 8000f68:	609a      	str	r2, [r3, #8]
  send_functions[3] = &SendCellVoltages25_28;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_CAN_Init+0x98>)
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <MX_CAN_Init+0xa8>)
 8000f6e:	60da      	str	r2, [r3, #12]
  send_functions[4] = &SendTotalVoltageCurrentTemperatures;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_CAN_Init+0x98>)
 8000f72:	4a0c      	ldr	r2, [pc, #48]	; (8000fa4 <MX_CAN_Init+0xac>)
 8000f74:	611a      	str	r2, [r3, #16]
  send_functions[5] = &SendTemperatures;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_CAN_Init+0x98>)
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <MX_CAN_Init+0xb0>)
 8000f7a:	615a      	str	r2, [r3, #20]
  send_functions[6] = &SendGeneralInfo;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <MX_CAN_Init+0x98>)
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <MX_CAN_Init+0xb4>)
 8000f80:	619a      	str	r2, [r3, #24]
  // __HAL_TIM_DISABLE(htim);
  /* USER CODE END CAN_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000224 	.word	0x20000224
 8000f8c:	40006400 	.word	0x40006400
 8000f90:	200002d0 	.word	0x200002d0
 8000f94:	080012ed 	.word	0x080012ed
 8000f98:	080013fd 	.word	0x080013fd
 8000f9c:	0800150d 	.word	0x0800150d
 8000fa0:	08001625 	.word	0x08001625
 8000fa4:	080016e5 	.word	0x080016e5
 8000fa8:	0800177d 	.word	0x0800177d
 8000fac:	08001819 	.word	0x08001819

08000fb0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a28      	ldr	r2, [pc, #160]	; (800106c <HAL_CAN_MspInit+0xbc>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d149      	bne.n	8001064 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <HAL_CAN_MspInit+0xc0>)
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_CAN_MspInit+0xc0>)
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	61d3      	str	r3, [r2, #28]
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_CAN_MspInit+0xc0>)
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_CAN_MspInit+0xc0>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a20      	ldr	r2, [pc, #128]	; (8001070 <HAL_CAN_MspInit+0xc0>)
 8000fee:	f043 0304 	orr.w	r3, r3, #4
 8000ff2:	6193      	str	r3, [r2, #24]
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <HAL_CAN_MspInit+0xc0>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001004:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	4619      	mov	r1, r3
 8001014:	4817      	ldr	r0, [pc, #92]	; (8001074 <HAL_CAN_MspInit+0xc4>)
 8001016:	f002 fe29 	bl	8003c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	4811      	ldr	r0, [pc, #68]	; (8001074 <HAL_CAN_MspInit+0xc4>)
 8001030:	f002 fe1c 	bl	8003c6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 3, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2103      	movs	r1, #3
 8001038:	2013      	movs	r0, #19
 800103a:	f002 fd30 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 800103e:	2013      	movs	r0, #19
 8001040:	f002 fd49 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2103      	movs	r1, #3
 8001048:	2014      	movs	r0, #20
 800104a:	f002 fd28 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800104e:	2014      	movs	r0, #20
 8001050:	f002 fd41 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2103      	movs	r1, #3
 8001058:	2015      	movs	r0, #21
 800105a:	f002 fd20 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800105e:	2015      	movs	r0, #21
 8001060:	f002 fd39 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40006400 	.word	0x40006400
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800

08001078 <CanInit>:
/**
 * @brief: Initialize CAN network
 * @param chosen_network
 *
 **/
void CanInit(CAN_HandleTypeDef chosen_network) {
 8001078:	b084      	sub	sp, #16
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
 800107e:	f107 0c08 	add.w	ip, r7, #8
 8001082:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&chosen_network) != HAL_OK) {
 8001086:	f107 0008 	add.w	r0, r7, #8
 800108a:	f001 ff86 	bl	8002f9a <HAL_CAN_Start>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <CanInit+0x20>
		Error_Handler();
 8001094:	f000 fda7 	bl	8001be6 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&chosen_network,
 8001098:	2103      	movs	r1, #3
 800109a:	f107 0008 	add.w	r0, r7, #8
 800109e:	f002 f9df 	bl	8003460 <HAL_CAN_ActivateNotification>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 80010a8:	f000 fd9d 	bl	8001be6 <Error_Handler>
	}
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b4:	b004      	add	sp, #16
 80010b6:	4770      	bx	lr

080010b8 <CanSaveReceivedData>:
/**
 * @brief: store received data from chosen network
 * @param chosen_network
 *
 **/
void CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 80010b8:	b084      	sub	sp, #16
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
 80010be:	f107 0c08 	add.w	ip, r7, #8
 80010c2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 80010c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c8:	f103 0220 	add.w	r2, r3, #32
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
 80010cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ce:	333c      	adds	r3, #60	; 0x3c
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 80010d0:	2100      	movs	r1, #0
 80010d2:	f107 0008 	add.w	r0, r7, #8
 80010d6:	f002 f8b2 	bl	800323e <HAL_CAN_GetRxMessage>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <CanSaveReceivedData+0x2c>
		/* Reception Error */
		Error_Handler();
 80010e0:	f000 fd81 	bl	8001be6 <Error_Handler>
	}
//	CanClearRxDataFrame(ptr_can_rx_frame_template);
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010ec:	b004      	add	sp, #16
 80010ee:	4770      	bx	lr

080010f0 <CanConfigFilter>:
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 *
 **/
void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank,
		uint32_t can_filter_id_high, uint32_t can_filter_id_low,
		uint32_t can_filter_mask_id_high, uint32_t can_filter_mask_id_low) {
 80010f0:	b084      	sub	sp, #16
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	f107 0c08 	add.w	ip, r7, #8
 80010fa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 80010fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001102:	4a16      	ldr	r2, [pc, #88]	; (800115c <CanConfigFilter+0x6c>)
 8001104:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <CanConfigFilter+0x6c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <CanConfigFilter+0x6c>)
 800110e:	2201      	movs	r2, #1
 8001110:	61da      	str	r2, [r3, #28]
//	can_filter_template.FilterIdHigh = 0x290 << 5; //can_filter_id_high; //18FF;			//0x321 << 5;
//	can_filter_template.FilterIdLow = 0x00000000; //can_filter_id_low; //50E5;				//0x00000000;
	can_filter_template.FilterIdHigh = 0x0000;
 8001112:	4b12      	ldr	r3, [pc, #72]	; (800115c <CanConfigFilter+0x6c>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
	can_filter_template.FilterIdLow = 0x0000;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <CanConfigFilter+0x6c>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <CanConfigFilter+0x6c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <CanConfigFilter+0x6c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
//	can_filter_template.FilterMaskIdHigh = 0x290 << 5;	//0x111 << 5;
//	can_filter_template.FilterMaskIdLow = 0x00000000;
	can_filter_template.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <CanConfigFilter+0x6c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <CanConfigFilter+0x6c>)
 8001132:	2201      	movs	r2, #1
 8001134:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <CanConfigFilter+0x6c>)
 8001138:	220e      	movs	r2, #14
 800113a:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <CanConfigFilter+0x6c>)
 800113e:	f107 0008 	add.w	r0, r7, #8
 8001142:	f001 fe61 	bl	8002e08 <HAL_CAN_ConfigFilter>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <CanConfigFilter+0x60>
		Error_Handler();
 800114c:	f000 fd4b 	bl	8001be6 <Error_Handler>
	}

}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001158:	b004      	add	sp, #16
 800115a:	4770      	bx	lr
 800115c:	20000264 	.word	0x20000264

08001160 <CanSendPdo>:
 *
 **/
void CanSendPdo(CAN_HandleTypeDef chosen_network, uint32_t frame_pdo_id,
		uint8_t number_of_bytes, CanDataFrameInit *ptr_can_frame_template,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 8001160:	b084      	sub	sp, #16
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
 8001166:	f107 0c08 	add.w	ip, r7, #8
 800116a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_pdo_id;
 800116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001172:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8001174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001176:	2200      	movs	r2, #0
 8001178:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 800117a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8001180:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8001184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001186:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8001188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118a:	2200      	movs	r2, #0
 800118c:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 800118e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001190:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001194:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8001196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001198:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800119c:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 800119e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80011a4:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 80011a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80011ac:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 80011ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80011b4:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 80011b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80011bc:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 80011be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80011c4:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 80011c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80011cc:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 80011ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d0:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 80011d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <CanSendPdo+0xac>)
 80011d8:	f107 0008 	add.w	r0, r7, #8
 80011dc:	f001 ff21 	bl	8003022 <HAL_CAN_AddTxMessage>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <CanSendPdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 80011e6:	f000 fcfe 	bl	8001be6 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 80011ea:	bf00      	nop
 80011ec:	f107 0008 	add.w	r0, r7, #8
 80011f0:	f001 fff1 	bl	80031d6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d1f8      	bne.n	80011ec <CanSendPdo+0x8c>
	}

	CanClearTxDataFrame(ptr_can_frame_template);
 80011fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80011fc:	f000 f808 	bl	8001210 <CanClearTxDataFrame>

}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001208:	b004      	add	sp, #16
 800120a:	4770      	bx	lr
 800120c:	200001a4 	.word	0x200001a4

08001210 <CanClearTxDataFrame>:
 * @brief: data sent over usb is not correctly shown when structure is not cleared
 *         after every message sent. Assigning zeros has no influence on the network
 * @param ptr_can_frame_template: chosen structure which helds all the data
 *
 **/
void CanClearTxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->tx_header.StdId = 0x00;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 0;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = 0x0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = 0x0;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = 0x0;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = 0x0;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = 0x0;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = 0x0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = 0x0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = 0x0;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	71da      	strb	r2, [r3, #7]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <CanClearRxDataFrame>:


void CanClearRxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->rx_header.StdId = 0x00;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
	ptr_can_frame_template->rx_header.RTR = CAN_RTR_DATA;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2200      	movs	r2, #0
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
	ptr_can_frame_template->rx_header.IDE = CAN_ID_STD;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
	ptr_can_frame_template->rx_header.DLC = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	631a      	str	r2, [r3, #48]	; 0x30

	ptr_can_frame_template->rx_data[0] = 0x0;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ptr_can_frame_template->rx_data[1] = 0x0;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	ptr_can_frame_template->rx_data[2] = 0x0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ptr_can_frame_template->rx_data[3] = 0x0;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ptr_can_frame_template->rx_data[4] = 0x0;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ptr_can_frame_template->rx_data[5] = 0x0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ptr_can_frame_template->rx_data[6] = 0x0;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ptr_can_frame_template->rx_data[7] = 0x0;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Interrupt callbacks*/
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	CanClearRxDataFrame(&can_rx_frame_template);
//	CanSaveReceivedData(*hcan, &can_rx_frame_template);
//	GetRawData(&current_data, &can_rx_frame_template);
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <SendCellVoltages1_8>:

void SendCellVoltages1_8()
{
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	b095      	sub	sp, #84	; 0x54
 80012f0:	af12      	add	r7, sp, #72	; 0x48
	// (Vb - 1850)/10
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
			(battery_pack.cell_voltages[0] - 1850)/10,
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <SendCellVoltages1_8+0x100>)
 80012f4:	8adb      	ldrh	r3, [r3, #22]
 80012f6:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <SendCellVoltages1_8+0x104>)
 80012fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001300:	1092      	asrs	r2, r2, #2
 8001302:	17db      	asrs	r3, r3, #31
 8001304:	1ad3      	subs	r3, r2, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 8001306:	b2da      	uxtb	r2, r3
			(battery_pack.cell_voltages[1] - 1850)/10,
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <SendCellVoltages1_8+0x100>)
 800130a:	8b1b      	ldrh	r3, [r3, #24]
 800130c:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001310:	4937      	ldr	r1, [pc, #220]	; (80013f0 <SendCellVoltages1_8+0x104>)
 8001312:	fb81 0103 	smull	r0, r1, r1, r3
 8001316:	1089      	asrs	r1, r1, #2
 8001318:	17db      	asrs	r3, r3, #31
 800131a:	1acb      	subs	r3, r1, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 800131c:	b2d9      	uxtb	r1, r3
			(battery_pack.cell_voltages[2] - 1850)/10,
 800131e:	4b33      	ldr	r3, [pc, #204]	; (80013ec <SendCellVoltages1_8+0x100>)
 8001320:	8b5b      	ldrh	r3, [r3, #26]
 8001322:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001326:	4832      	ldr	r0, [pc, #200]	; (80013f0 <SendCellVoltages1_8+0x104>)
 8001328:	fb80 4003 	smull	r4, r0, r0, r3
 800132c:	1080      	asrs	r0, r0, #2
 800132e:	17db      	asrs	r3, r3, #31
 8001330:	1ac3      	subs	r3, r0, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 8001332:	b2d8      	uxtb	r0, r3
			(battery_pack.cell_voltages[3] - 1850)/10,
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <SendCellVoltages1_8+0x100>)
 8001336:	8b9b      	ldrh	r3, [r3, #28]
 8001338:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800133c:	4c2c      	ldr	r4, [pc, #176]	; (80013f0 <SendCellVoltages1_8+0x104>)
 800133e:	fb84 5403 	smull	r5, r4, r4, r3
 8001342:	10a4      	asrs	r4, r4, #2
 8001344:	17db      	asrs	r3, r3, #31
 8001346:	1ae3      	subs	r3, r4, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 8001348:	b2dc      	uxtb	r4, r3
			(battery_pack.cell_voltages[4] - 1850)/10,
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <SendCellVoltages1_8+0x100>)
 800134c:	8bdb      	ldrh	r3, [r3, #30]
 800134e:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001352:	4d27      	ldr	r5, [pc, #156]	; (80013f0 <SendCellVoltages1_8+0x104>)
 8001354:	fb85 6503 	smull	r6, r5, r5, r3
 8001358:	10ad      	asrs	r5, r5, #2
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1aeb      	subs	r3, r5, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 800135e:	b2dd      	uxtb	r5, r3
			(battery_pack.cell_voltages[5] - 1850)/10,
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <SendCellVoltages1_8+0x100>)
 8001362:	8c1b      	ldrh	r3, [r3, #32]
 8001364:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001368:	4e21      	ldr	r6, [pc, #132]	; (80013f0 <SendCellVoltages1_8+0x104>)
 800136a:	fb86 c603 	smull	ip, r6, r6, r3
 800136e:	10b6      	asrs	r6, r6, #2
 8001370:	17db      	asrs	r3, r3, #31
 8001372:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 8001374:	b2db      	uxtb	r3, r3
 8001376:	607b      	str	r3, [r7, #4]
			(battery_pack.cell_voltages[6] - 1850)/10,
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <SendCellVoltages1_8+0x100>)
 800137a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800137c:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001380:	4e1b      	ldr	r6, [pc, #108]	; (80013f0 <SendCellVoltages1_8+0x104>)
 8001382:	fb86 c603 	smull	ip, r6, r6, r3
 8001386:	10b6      	asrs	r6, r6, #2
 8001388:	17db      	asrs	r3, r3, #31
 800138a:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 800138c:	b2de      	uxtb	r6, r3
 800138e:	603e      	str	r6, [r7, #0]
			(battery_pack.cell_voltages[7] - 1850)/10);
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <SendCellVoltages1_8+0x100>)
 8001392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001394:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001398:	4e15      	ldr	r6, [pc, #84]	; (80013f0 <SendCellVoltages1_8+0x104>)
 800139a:	fb86 c603 	smull	ip, r6, r6, r3
 800139e:	10b6      	asrs	r6, r6, #2
 80013a0:	17db      	asrs	r3, r3, #31
 80013a2:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x185, 8, &can_frame_template,
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4e13      	ldr	r6, [pc, #76]	; (80013f4 <SendCellVoltages1_8+0x108>)
 80013a8:	9310      	str	r3, [sp, #64]	; 0x40
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	930e      	str	r3, [sp, #56]	; 0x38
 80013b2:	950d      	str	r5, [sp, #52]	; 0x34
 80013b4:	940c      	str	r4, [sp, #48]	; 0x30
 80013b6:	900b      	str	r0, [sp, #44]	; 0x2c
 80013b8:	910a      	str	r1, [sp, #40]	; 0x28
 80013ba:	9209      	str	r2, [sp, #36]	; 0x24
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <SendCellVoltages1_8+0x10c>)
 80013be:	9308      	str	r3, [sp, #32]
 80013c0:	2308      	movs	r3, #8
 80013c2:	9307      	str	r3, [sp, #28]
 80013c4:	f240 1385 	movw	r3, #389	; 0x185
 80013c8:	9306      	str	r3, [sp, #24]
 80013ca:	466d      	mov	r5, sp
 80013cc:	f106 0410 	add.w	r4, r6, #16
 80013d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013dc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80013e0:	f7ff febe 	bl	8001160 <CanSendPdo>
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ec:	200001c4 	.word	0x200001c4
 80013f0:	66666667 	.word	0x66666667
 80013f4:	20000224 	.word	0x20000224
 80013f8:	2000014c 	.word	0x2000014c

080013fc <SendCellVoltages9_16>:
void SendCellVoltages9_16()
{
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	b095      	sub	sp, #84	; 0x54
 8001400:	af12      	add	r7, sp, #72	; 0x48
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
				(battery_pack.cell_voltages[8] - 1850)/10,
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <SendCellVoltages9_16+0x100>)
 8001404:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001406:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800140a:	4a3d      	ldr	r2, [pc, #244]	; (8001500 <SendCellVoltages9_16+0x104>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	1092      	asrs	r2, r2, #2
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 8001416:	b2da      	uxtb	r2, r3
				(battery_pack.cell_voltages[9] - 1850)/10,
 8001418:	4b38      	ldr	r3, [pc, #224]	; (80014fc <SendCellVoltages9_16+0x100>)
 800141a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141c:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001420:	4937      	ldr	r1, [pc, #220]	; (8001500 <SendCellVoltages9_16+0x104>)
 8001422:	fb81 0103 	smull	r0, r1, r1, r3
 8001426:	1089      	asrs	r1, r1, #2
 8001428:	17db      	asrs	r3, r3, #31
 800142a:	1acb      	subs	r3, r1, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 800142c:	b2d9      	uxtb	r1, r3
				(battery_pack.cell_voltages[10] - 1850)/10,
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <SendCellVoltages9_16+0x100>)
 8001430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001432:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001436:	4832      	ldr	r0, [pc, #200]	; (8001500 <SendCellVoltages9_16+0x104>)
 8001438:	fb80 4003 	smull	r4, r0, r0, r3
 800143c:	1080      	asrs	r0, r0, #2
 800143e:	17db      	asrs	r3, r3, #31
 8001440:	1ac3      	subs	r3, r0, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 8001442:	b2d8      	uxtb	r0, r3
				(battery_pack.cell_voltages[11] - 1850)/10,
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <SendCellVoltages9_16+0x100>)
 8001446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001448:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800144c:	4c2c      	ldr	r4, [pc, #176]	; (8001500 <SendCellVoltages9_16+0x104>)
 800144e:	fb84 5403 	smull	r5, r4, r4, r3
 8001452:	10a4      	asrs	r4, r4, #2
 8001454:	17db      	asrs	r3, r3, #31
 8001456:	1ae3      	subs	r3, r4, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 8001458:	b2dc      	uxtb	r4, r3
				(battery_pack.cell_voltages[12] - 1850)/10,
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <SendCellVoltages9_16+0x100>)
 800145c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800145e:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001462:	4d27      	ldr	r5, [pc, #156]	; (8001500 <SendCellVoltages9_16+0x104>)
 8001464:	fb85 6503 	smull	r6, r5, r5, r3
 8001468:	10ad      	asrs	r5, r5, #2
 800146a:	17db      	asrs	r3, r3, #31
 800146c:	1aeb      	subs	r3, r5, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 800146e:	b2dd      	uxtb	r5, r3
				(battery_pack.cell_voltages[13] - 1850)/10,
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <SendCellVoltages9_16+0x100>)
 8001472:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001474:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001478:	4e21      	ldr	r6, [pc, #132]	; (8001500 <SendCellVoltages9_16+0x104>)
 800147a:	fb86 c603 	smull	ip, r6, r6, r3
 800147e:	10b6      	asrs	r6, r6, #2
 8001480:	17db      	asrs	r3, r3, #31
 8001482:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 8001484:	b2db      	uxtb	r3, r3
 8001486:	607b      	str	r3, [r7, #4]
				(battery_pack.cell_voltages[14] - 1850)/10,
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <SendCellVoltages9_16+0x100>)
 800148a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800148c:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001490:	4e1b      	ldr	r6, [pc, #108]	; (8001500 <SendCellVoltages9_16+0x104>)
 8001492:	fb86 c603 	smull	ip, r6, r6, r3
 8001496:	10b6      	asrs	r6, r6, #2
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 800149c:	b2de      	uxtb	r6, r3
 800149e:	603e      	str	r6, [r7, #0]
				(battery_pack.cell_voltages[15] - 1850)/10);
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <SendCellVoltages9_16+0x100>)
 80014a2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80014a4:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 80014a8:	4e15      	ldr	r6, [pc, #84]	; (8001500 <SendCellVoltages9_16+0x104>)
 80014aa:	fb86 c603 	smull	ip, r6, r6, r3
 80014ae:	10b6      	asrs	r6, r6, #2
 80014b0:	17db      	asrs	r3, r3, #31
 80014b2:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x186, 8, &can_frame_template,
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4e13      	ldr	r6, [pc, #76]	; (8001504 <SendCellVoltages9_16+0x108>)
 80014b8:	9310      	str	r3, [sp, #64]	; 0x40
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	930e      	str	r3, [sp, #56]	; 0x38
 80014c2:	950d      	str	r5, [sp, #52]	; 0x34
 80014c4:	940c      	str	r4, [sp, #48]	; 0x30
 80014c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80014c8:	910a      	str	r1, [sp, #40]	; 0x28
 80014ca:	9209      	str	r2, [sp, #36]	; 0x24
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <SendCellVoltages9_16+0x10c>)
 80014ce:	9308      	str	r3, [sp, #32]
 80014d0:	2308      	movs	r3, #8
 80014d2:	9307      	str	r3, [sp, #28]
 80014d4:	f44f 73c3 	mov.w	r3, #390	; 0x186
 80014d8:	9306      	str	r3, [sp, #24]
 80014da:	466d      	mov	r5, sp
 80014dc:	f106 0410 	add.w	r4, r6, #16
 80014e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80014f0:	f7ff fe36 	bl	8001160 <CanSendPdo>
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fc:	200001c4 	.word	0x200001c4
 8001500:	66666667 	.word	0x66666667
 8001504:	20000224 	.word	0x20000224
 8001508:	2000014c 	.word	0x2000014c

0800150c <SendCellVoltages17_24>:
void SendCellVoltages17_24()
{
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b095      	sub	sp, #84	; 0x54
 8001510:	af12      	add	r7, sp, #72	; 0x48
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
					(battery_pack.cell_voltages[16] - 1850)/10,
 8001512:	4b40      	ldr	r3, [pc, #256]	; (8001614 <SendCellVoltages17_24+0x108>)
 8001514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001516:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800151a:	4a3f      	ldr	r2, [pc, #252]	; (8001618 <SendCellVoltages17_24+0x10c>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	1092      	asrs	r2, r2, #2
 8001522:	17db      	asrs	r3, r3, #31
 8001524:	1ad3      	subs	r3, r2, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 8001526:	b2da      	uxtb	r2, r3
					(battery_pack.cell_voltages[17] - 1850)/10,
 8001528:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <SendCellVoltages17_24+0x108>)
 800152a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800152c:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001530:	4939      	ldr	r1, [pc, #228]	; (8001618 <SendCellVoltages17_24+0x10c>)
 8001532:	fb81 0103 	smull	r0, r1, r1, r3
 8001536:	1089      	asrs	r1, r1, #2
 8001538:	17db      	asrs	r3, r3, #31
 800153a:	1acb      	subs	r3, r1, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 800153c:	b2d9      	uxtb	r1, r3
					(battery_pack.cell_voltages[18] - 1850)/10,
 800153e:	4b35      	ldr	r3, [pc, #212]	; (8001614 <SendCellVoltages17_24+0x108>)
 8001540:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001542:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001546:	4834      	ldr	r0, [pc, #208]	; (8001618 <SendCellVoltages17_24+0x10c>)
 8001548:	fb80 4003 	smull	r4, r0, r0, r3
 800154c:	1080      	asrs	r0, r0, #2
 800154e:	17db      	asrs	r3, r3, #31
 8001550:	1ac3      	subs	r3, r0, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 8001552:	b2d8      	uxtb	r0, r3
					(battery_pack.cell_voltages[19] - 1850)/10,
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <SendCellVoltages17_24+0x108>)
 8001556:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001558:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800155c:	4c2e      	ldr	r4, [pc, #184]	; (8001618 <SendCellVoltages17_24+0x10c>)
 800155e:	fb84 5403 	smull	r5, r4, r4, r3
 8001562:	10a4      	asrs	r4, r4, #2
 8001564:	17db      	asrs	r3, r3, #31
 8001566:	1ae3      	subs	r3, r4, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 8001568:	b2dc      	uxtb	r4, r3
					(battery_pack.cell_voltages[20] - 1850)/10,
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <SendCellVoltages17_24+0x108>)
 800156c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800156e:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001572:	4d29      	ldr	r5, [pc, #164]	; (8001618 <SendCellVoltages17_24+0x10c>)
 8001574:	fb85 6503 	smull	r6, r5, r5, r3
 8001578:	10ad      	asrs	r5, r5, #2
 800157a:	17db      	asrs	r3, r3, #31
 800157c:	1aeb      	subs	r3, r5, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 800157e:	b2dd      	uxtb	r5, r3
					(battery_pack.cell_voltages[21] - 1850)/10,
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <SendCellVoltages17_24+0x108>)
 8001582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001586:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800158a:	4e23      	ldr	r6, [pc, #140]	; (8001618 <SendCellVoltages17_24+0x10c>)
 800158c:	fb86 c603 	smull	ip, r6, r6, r3
 8001590:	10b6      	asrs	r6, r6, #2
 8001592:	17db      	asrs	r3, r3, #31
 8001594:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 8001596:	b2db      	uxtb	r3, r3
 8001598:	607b      	str	r3, [r7, #4]
					(battery_pack.cell_voltages[22] - 1850)/10,
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <SendCellVoltages17_24+0x108>)
 800159c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80015a0:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 80015a4:	4e1c      	ldr	r6, [pc, #112]	; (8001618 <SendCellVoltages17_24+0x10c>)
 80015a6:	fb86 c603 	smull	ip, r6, r6, r3
 80015aa:	10b6      	asrs	r6, r6, #2
 80015ac:	17db      	asrs	r3, r3, #31
 80015ae:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 80015b0:	b2de      	uxtb	r6, r3
 80015b2:	603e      	str	r6, [r7, #0]
					(battery_pack.cell_voltages[23] - 1850)/10);
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <SendCellVoltages17_24+0x108>)
 80015b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ba:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 80015be:	4e16      	ldr	r6, [pc, #88]	; (8001618 <SendCellVoltages17_24+0x10c>)
 80015c0:	fb86 c603 	smull	ip, r6, r6, r3
 80015c4:	10b6      	asrs	r6, r6, #2
 80015c6:	17db      	asrs	r3, r3, #31
 80015c8:	1af3      	subs	r3, r6, r3
	CanSendPdo(hcan, 0x187, 8, &can_frame_template,
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	4e13      	ldr	r6, [pc, #76]	; (800161c <SendCellVoltages17_24+0x110>)
 80015ce:	9310      	str	r3, [sp, #64]	; 0x40
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	930e      	str	r3, [sp, #56]	; 0x38
 80015d8:	950d      	str	r5, [sp, #52]	; 0x34
 80015da:	940c      	str	r4, [sp, #48]	; 0x30
 80015dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80015de:	910a      	str	r1, [sp, #40]	; 0x28
 80015e0:	9209      	str	r2, [sp, #36]	; 0x24
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <SendCellVoltages17_24+0x114>)
 80015e4:	9308      	str	r3, [sp, #32]
 80015e6:	2308      	movs	r3, #8
 80015e8:	9307      	str	r3, [sp, #28]
 80015ea:	f240 1387 	movw	r3, #391	; 0x187
 80015ee:	9306      	str	r3, [sp, #24]
 80015f0:	466d      	mov	r5, sp
 80015f2:	f106 0410 	add.w	r4, r6, #16
 80015f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001602:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001606:	f7ff fdab 	bl	8001160 <CanSendPdo>
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	bf00      	nop
 8001614:	200001c4 	.word	0x200001c4
 8001618:	66666667 	.word	0x66666667
 800161c:	20000224 	.word	0x20000224
 8001620:	2000014c 	.word	0x2000014c

08001624 <SendCellVoltages25_28>:
void SendCellVoltages25_28()
{
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b093      	sub	sp, #76	; 0x4c
 8001628:	af12      	add	r7, sp, #72	; 0x48
	CanSendPdo(hcan, 0x188, 8, &can_frame_template,
					(battery_pack.cell_voltages[24] - 1850)/10,
 800162a:	4b2a      	ldr	r3, [pc, #168]	; (80016d4 <SendCellVoltages25_28+0xb0>)
 800162c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8001630:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001634:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <SendCellVoltages25_28+0xb4>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	1092      	asrs	r2, r2, #2
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad3      	subs	r3, r2, r3
	CanSendPdo(hcan, 0x188, 8, &can_frame_template,
 8001640:	b2da      	uxtb	r2, r3
					(battery_pack.cell_voltages[25] - 1850)/10,
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <SendCellVoltages25_28+0xb0>)
 8001644:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001648:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800164c:	4922      	ldr	r1, [pc, #136]	; (80016d8 <SendCellVoltages25_28+0xb4>)
 800164e:	fb81 0103 	smull	r0, r1, r1, r3
 8001652:	1089      	asrs	r1, r1, #2
 8001654:	17db      	asrs	r3, r3, #31
 8001656:	1acb      	subs	r3, r1, r3
	CanSendPdo(hcan, 0x188, 8, &can_frame_template,
 8001658:	b2d9      	uxtb	r1, r3
					(battery_pack.cell_voltages[26] - 1850)/10,
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <SendCellVoltages25_28+0xb0>)
 800165c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001660:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 8001664:	481c      	ldr	r0, [pc, #112]	; (80016d8 <SendCellVoltages25_28+0xb4>)
 8001666:	fb80 4003 	smull	r4, r0, r0, r3
 800166a:	1080      	asrs	r0, r0, #2
 800166c:	17db      	asrs	r3, r3, #31
 800166e:	1ac3      	subs	r3, r0, r3
	CanSendPdo(hcan, 0x188, 8, &can_frame_template,
 8001670:	b2d8      	uxtb	r0, r3
					(battery_pack.cell_voltages[27] - 1850)/10,
 8001672:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <SendCellVoltages25_28+0xb0>)
 8001674:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001678:	f2a3 733a 	subw	r3, r3, #1850	; 0x73a
 800167c:	4c16      	ldr	r4, [pc, #88]	; (80016d8 <SendCellVoltages25_28+0xb4>)
 800167e:	fb84 5403 	smull	r5, r4, r4, r3
 8001682:	10a4      	asrs	r4, r4, #2
 8001684:	17db      	asrs	r3, r3, #31
 8001686:	1ae3      	subs	r3, r4, r3
	CanSendPdo(hcan, 0x188, 8, &can_frame_template,
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4e14      	ldr	r6, [pc, #80]	; (80016dc <SendCellVoltages25_28+0xb8>)
 800168c:	2400      	movs	r4, #0
 800168e:	9410      	str	r4, [sp, #64]	; 0x40
 8001690:	2400      	movs	r4, #0
 8001692:	940f      	str	r4, [sp, #60]	; 0x3c
 8001694:	2400      	movs	r4, #0
 8001696:	940e      	str	r4, [sp, #56]	; 0x38
 8001698:	2400      	movs	r4, #0
 800169a:	940d      	str	r4, [sp, #52]	; 0x34
 800169c:	930c      	str	r3, [sp, #48]	; 0x30
 800169e:	900b      	str	r0, [sp, #44]	; 0x2c
 80016a0:	910a      	str	r1, [sp, #40]	; 0x28
 80016a2:	9209      	str	r2, [sp, #36]	; 0x24
 80016a4:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <SendCellVoltages25_28+0xbc>)
 80016a6:	9308      	str	r3, [sp, #32]
 80016a8:	2308      	movs	r3, #8
 80016aa:	9307      	str	r3, [sp, #28]
 80016ac:	f44f 73c4 	mov.w	r3, #392	; 0x188
 80016b0:	9306      	str	r3, [sp, #24]
 80016b2:	466d      	mov	r5, sp
 80016b4:	f106 0410 	add.w	r4, r6, #16
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016c8:	f7ff fd4a 	bl	8001160 <CanSendPdo>
					0,
					0,
					0,
					0);
}
 80016cc:	bf00      	nop
 80016ce:	3704      	adds	r7, #4
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d4:	200001c4 	.word	0x200001c4
 80016d8:	66666667 	.word	0x66666667
 80016dc:	20000224 	.word	0x20000224
 80016e0:	2000014c 	.word	0x2000014c

080016e4 <SendTotalVoltageCurrentTemperatures>:
void SendTotalVoltageCurrentTemperatures()
{
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	b095      	sub	sp, #84	; 0x54
 80016e8:	af12      	add	r7, sp, #72	; 0x48
	// voltage coding V / 100 (V is in mV) 100 0

	uint16_t voltage = battery_pack.voltage/100;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <SendTotalVoltageCurrentTemperatures+0x88>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a20      	ldr	r2, [pc, #128]	; (8001770 <SendTotalVoltageCurrentTemperatures+0x8c>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	80fb      	strh	r3, [r7, #6]
	CanSendPdo(hcan, 0x189, 8, &can_frame_template,
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	0a1b      	lsrs	r3, r3, #8
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	88fa      	ldrh	r2, [r7, #6]
 8001702:	b2d2      	uxtb	r2, r2
					(0xFF00 & voltage) >> 8,
					(0x00FF & voltage),
					0,
					0,
					battery_pack.temperature[0] + 30,
 8001704:	4919      	ldr	r1, [pc, #100]	; (800176c <SendTotalVoltageCurrentTemperatures+0x88>)
 8001706:	7909      	ldrb	r1, [r1, #4]
	CanSendPdo(hcan, 0x189, 8, &can_frame_template,
 8001708:	311e      	adds	r1, #30
 800170a:	b2c9      	uxtb	r1, r1
					battery_pack.temperature[1] + 30,
 800170c:	4817      	ldr	r0, [pc, #92]	; (800176c <SendTotalVoltageCurrentTemperatures+0x88>)
 800170e:	7940      	ldrb	r0, [r0, #5]
	CanSendPdo(hcan, 0x189, 8, &can_frame_template,
 8001710:	301e      	adds	r0, #30
 8001712:	b2c0      	uxtb	r0, r0
					battery_pack.temperature[2] + 30,
 8001714:	4c15      	ldr	r4, [pc, #84]	; (800176c <SendTotalVoltageCurrentTemperatures+0x88>)
 8001716:	79a4      	ldrb	r4, [r4, #6]
	CanSendPdo(hcan, 0x189, 8, &can_frame_template,
 8001718:	341e      	adds	r4, #30
 800171a:	b2e4      	uxtb	r4, r4
					battery_pack.temperature[3] + 30);
 800171c:	4d13      	ldr	r5, [pc, #76]	; (800176c <SendTotalVoltageCurrentTemperatures+0x88>)
 800171e:	79ed      	ldrb	r5, [r5, #7]
	CanSendPdo(hcan, 0x189, 8, &can_frame_template,
 8001720:	351e      	adds	r5, #30
 8001722:	b2ed      	uxtb	r5, r5
 8001724:	4e13      	ldr	r6, [pc, #76]	; (8001774 <SendTotalVoltageCurrentTemperatures+0x90>)
 8001726:	9510      	str	r5, [sp, #64]	; 0x40
 8001728:	940f      	str	r4, [sp, #60]	; 0x3c
 800172a:	900e      	str	r0, [sp, #56]	; 0x38
 800172c:	910d      	str	r1, [sp, #52]	; 0x34
 800172e:	2100      	movs	r1, #0
 8001730:	910c      	str	r1, [sp, #48]	; 0x30
 8001732:	2100      	movs	r1, #0
 8001734:	910b      	str	r1, [sp, #44]	; 0x2c
 8001736:	920a      	str	r2, [sp, #40]	; 0x28
 8001738:	9309      	str	r3, [sp, #36]	; 0x24
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <SendTotalVoltageCurrentTemperatures+0x94>)
 800173c:	9308      	str	r3, [sp, #32]
 800173e:	2308      	movs	r3, #8
 8001740:	9307      	str	r3, [sp, #28]
 8001742:	f240 1389 	movw	r3, #393	; 0x189
 8001746:	9306      	str	r3, [sp, #24]
 8001748:	466d      	mov	r5, sp
 800174a:	f106 0410 	add.w	r4, r6, #16
 800174e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800175e:	f7ff fcff 	bl	8001160 <CanSendPdo>

}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176a:	bf00      	nop
 800176c:	200001c4 	.word	0x200001c4
 8001770:	51eb851f 	.word	0x51eb851f
 8001774:	20000224 	.word	0x20000224
 8001778:	2000014c 	.word	0x2000014c

0800177c <SendTemperatures>:

void SendTemperatures()
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	b095      	sub	sp, #84	; 0x54
 8001780:	af12      	add	r7, sp, #72	; 0x48
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
					battery_pack.temperature[4] + 30,
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <SendTemperatures+0x90>)
 8001784:	7a1b      	ldrb	r3, [r3, #8]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 8001786:	331e      	adds	r3, #30
 8001788:	b2db      	uxtb	r3, r3
 800178a:	607b      	str	r3, [r7, #4]
					battery_pack.temperature[5] + 30,
 800178c:	4a1f      	ldr	r2, [pc, #124]	; (800180c <SendTemperatures+0x90>)
 800178e:	7a52      	ldrb	r2, [r2, #9]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 8001790:	321e      	adds	r2, #30
 8001792:	b2d2      	uxtb	r2, r2
					battery_pack.temperature[6] + 30,
 8001794:	491d      	ldr	r1, [pc, #116]	; (800180c <SendTemperatures+0x90>)
 8001796:	7a89      	ldrb	r1, [r1, #10]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 8001798:	311e      	adds	r1, #30
 800179a:	b2c9      	uxtb	r1, r1
					battery_pack.temperature[7] + 30,
 800179c:	481b      	ldr	r0, [pc, #108]	; (800180c <SendTemperatures+0x90>)
 800179e:	7ac0      	ldrb	r0, [r0, #11]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 80017a0:	301e      	adds	r0, #30
 80017a2:	b2c0      	uxtb	r0, r0
					battery_pack.temperature[8] + 30,
 80017a4:	4c19      	ldr	r4, [pc, #100]	; (800180c <SendTemperatures+0x90>)
 80017a6:	7b24      	ldrb	r4, [r4, #12]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 80017a8:	341e      	adds	r4, #30
 80017aa:	b2e4      	uxtb	r4, r4
					battery_pack.temperature[9] + 30,
 80017ac:	4d17      	ldr	r5, [pc, #92]	; (800180c <SendTemperatures+0x90>)
 80017ae:	7b6d      	ldrb	r5, [r5, #13]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 80017b0:	351e      	adds	r5, #30
 80017b2:	b2ed      	uxtb	r5, r5
					battery_pack.temperature[10] + 30,
 80017b4:	4e15      	ldr	r6, [pc, #84]	; (800180c <SendTemperatures+0x90>)
 80017b6:	7bb6      	ldrb	r6, [r6, #14]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 80017b8:	361e      	adds	r6, #30
 80017ba:	b2f6      	uxtb	r6, r6
 80017bc:	603e      	str	r6, [r7, #0]
					battery_pack.temperature[11] + 30);
 80017be:	4e13      	ldr	r6, [pc, #76]	; (800180c <SendTemperatures+0x90>)
 80017c0:	7bf6      	ldrb	r6, [r6, #15]
	CanSendPdo(hcan, 0x18A, 8, &can_frame_template,
 80017c2:	361e      	adds	r6, #30
 80017c4:	b2f3      	uxtb	r3, r6
 80017c6:	4e12      	ldr	r6, [pc, #72]	; (8001810 <SendTemperatures+0x94>)
 80017c8:	9310      	str	r3, [sp, #64]	; 0x40
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80017ce:	950e      	str	r5, [sp, #56]	; 0x38
 80017d0:	940d      	str	r4, [sp, #52]	; 0x34
 80017d2:	900c      	str	r0, [sp, #48]	; 0x30
 80017d4:	910b      	str	r1, [sp, #44]	; 0x2c
 80017d6:	920a      	str	r2, [sp, #40]	; 0x28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	9309      	str	r3, [sp, #36]	; 0x24
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <SendTemperatures+0x98>)
 80017de:	9308      	str	r3, [sp, #32]
 80017e0:	2308      	movs	r3, #8
 80017e2:	9307      	str	r3, [sp, #28]
 80017e4:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 80017e8:	9306      	str	r3, [sp, #24]
 80017ea:	466d      	mov	r5, sp
 80017ec:	f106 0410 	add.w	r4, r6, #16
 80017f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80017fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001800:	f7ff fcae 	bl	8001160 <CanSendPdo>
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800180c:	200001c4 	.word	0x200001c4
 8001810:	20000224 	.word	0x20000224
 8001814:	2000014c 	.word	0x2000014c

08001818 <SendGeneralInfo>:

void SendGeneralInfo()
{
 8001818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181a:	b093      	sub	sp, #76	; 0x4c
 800181c:	af12      	add	r7, sp, #72	; 0x48
	CanSendPdo(hcan, 0x18B, 8, &can_frame_template,
						(0xFF000000 & battery_pack.power) >> 24,
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <SendGeneralInfo+0x70>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	0e1b      	lsrs	r3, r3, #24
	CanSendPdo(hcan, 0x18B, 8, &can_frame_template,
 8001824:	b2db      	uxtb	r3, r3
						(0x00FF0000 & battery_pack.power) >> 16,
 8001826:	4a18      	ldr	r2, [pc, #96]	; (8001888 <SendGeneralInfo+0x70>)
 8001828:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800182a:	0c12      	lsrs	r2, r2, #16
	CanSendPdo(hcan, 0x18B, 8, &can_frame_template,
 800182c:	b2d2      	uxtb	r2, r2
						0, // charge level
						battery_pack.avg_temperature + 30,
 800182e:	4916      	ldr	r1, [pc, #88]	; (8001888 <SendGeneralInfo+0x70>)
 8001830:	f8b1 105c 	ldrh.w	r1, [r1, #92]	; 0x5c
	CanSendPdo(hcan, 0x18B, 8, &can_frame_template,
 8001834:	b2c9      	uxtb	r1, r1
 8001836:	311e      	adds	r1, #30
 8001838:	b2c9      	uxtb	r1, r1
 800183a:	4e14      	ldr	r6, [pc, #80]	; (800188c <SendGeneralInfo+0x74>)
 800183c:	2000      	movs	r0, #0
 800183e:	9010      	str	r0, [sp, #64]	; 0x40
 8001840:	2000      	movs	r0, #0
 8001842:	900f      	str	r0, [sp, #60]	; 0x3c
 8001844:	2000      	movs	r0, #0
 8001846:	900e      	str	r0, [sp, #56]	; 0x38
 8001848:	2000      	movs	r0, #0
 800184a:	900d      	str	r0, [sp, #52]	; 0x34
 800184c:	910c      	str	r1, [sp, #48]	; 0x30
 800184e:	2100      	movs	r1, #0
 8001850:	910b      	str	r1, [sp, #44]	; 0x2c
 8001852:	920a      	str	r2, [sp, #40]	; 0x28
 8001854:	9309      	str	r3, [sp, #36]	; 0x24
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <SendGeneralInfo+0x78>)
 8001858:	9308      	str	r3, [sp, #32]
 800185a:	2308      	movs	r3, #8
 800185c:	9307      	str	r3, [sp, #28]
 800185e:	f240 138b 	movw	r3, #395	; 0x18b
 8001862:	9306      	str	r3, [sp, #24]
 8001864:	466d      	mov	r5, sp
 8001866:	f106 0410 	add.w	r4, r6, #16
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001872:	e885 0003 	stmia.w	r5, {r0, r1}
 8001876:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800187a:	f7ff fc71 	bl	8001160 <CanSendPdo>
						0,
						0,
						0,
						0);
}
 800187e:	bf00      	nop
 8001880:	3704      	adds	r7, #4
 8001882:	46bd      	mov	sp, r7
 8001884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001886:	bf00      	nop
 8001888:	200001c4 	.word	0x200001c4
 800188c:	20000224 	.word	0x20000224
 8001890:	2000014c 	.word	0x2000014c

08001894 <GetRawData>:
 */

#include "current_sensor.h"
#include "can.h"

void GetRawData(CurrentData *current_data, CanDataFrameInit *can_rx_frame){
 8001894:	b4b0      	push	{r4, r5, r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	current_data->rx_header = can_rx_frame->rx_header;
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4615      	mov	r5, r2
 80018a4:	f103 0420 	add.w	r4, r3, #32
 80018a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	current_data->current = 0;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
	uint32_t buffer;
	buffer = (uint32_t)(can_rx_frame->rx_data[3]) << 0;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80018c0:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	441a      	add	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[2]) << 8;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	441a      	add	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[1]) << 16;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	441a      	add	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[0]) << 24;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69da      	ldr	r2, [r3, #28]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	441a      	add	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	61da      	str	r2, [r3, #28]

}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bcb0      	pop	{r4, r5, r7}
 8001918:	4770      	bx	lr
	...

0800191c <Queue_Init>:
#include <assert.h>

queue_t Fifo_Queue;

void Queue_Init()
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	Fifo_Queue.head = 0;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <Queue_Init+0x28>)
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
	Fifo_Queue.tail = 0;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <Queue_Init+0x28>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
	Fifo_Queue.size = 5;
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <Queue_Init+0x28>)
 800192e:	2205      	movs	r2, #5
 8001930:	609a      	str	r2, [r3, #8]
	Fifo_Queue.data = malloc(sizeof(frame_to_send*) * 5);
 8001932:	2014      	movs	r0, #20
 8001934:	f004 f98e 	bl	8005c54 <malloc>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	4b01      	ldr	r3, [pc, #4]	; (8001944 <Queue_Init+0x28>)
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000194 	.word	0x20000194

08001948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195c:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <MX_GPIO_Init+0xb8>)
 8001962:	f043 0310 	orr.w	r3, r3, #16
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f003 0310 	and.w	r3, r3, #16
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <MX_GPIO_Init+0xb8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800197a:	f043 0320 	orr.w	r3, r3, #32
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_GPIO_Init+0xb8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a1b      	ldr	r2, [pc, #108]	; (8001a00 <MX_GPIO_Init+0xb8>)
 8001992:	f043 0304 	orr.w	r3, r3, #4
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_GPIO_Init+0xb8>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	607b      	str	r3, [r7, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019aa:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MX_GPIO_Init+0xbc>)
 80019ac:	f002 fae2 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <MX_GPIO_Init+0xc0>)
 80019b8:	f002 fadc 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4619      	mov	r1, r3
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <MX_GPIO_Init+0xbc>)
 80019d6:	f002 f949 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e4:	2302      	movs	r3, #2
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_GPIO_Init+0xc0>)
 80019f4:	f002 f93a 	bl	8003c6c <HAL_GPIO_Init>

}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40011000 	.word	0x40011000
 8001a08:	40010800 	.word	0x40010800
 8001a0c:	00000000 	.word	0x00000000

08001a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a12:	b093      	sub	sp, #76	; 0x4c
 8001a14:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a16:	f000 fc4b 	bl	80022b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a1a:	f000 f889 	bl	8001b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a1e:	f7ff ff93 	bl	8001948 <MX_GPIO_Init>
  MX_CAN_Init();
 8001a22:	f7ff fa69 	bl	8000ef8 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001a26:	f000 fb71 	bl	800210c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001a2a:	f000 faab 	bl	8001f84 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001a2e:	f000 fa59 	bl	8001ee4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a32:	f7fe fe93 	bl	800075c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  CanConfigFilter(hcan, 0, 0x0000, 0x0000, 0x0000, 0x0000);
 8001a36:	4e38      	ldr	r6, [pc, #224]	; (8001b18 <main+0x108>)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8001a40:	2300      	movs	r3, #0
 8001a42:	9308      	str	r3, [sp, #32]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9307      	str	r3, [sp, #28]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9306      	str	r3, [sp, #24]
 8001a4c:	466d      	mov	r5, sp
 8001a4e:	f106 0410 	add.w	r4, r6, #16
 8001a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a62:	f7ff fb45 	bl	80010f0 <CanConfigFilter>
  CanInit(hcan);
 8001a66:	4e2c      	ldr	r6, [pc, #176]	; (8001b18 <main+0x108>)
 8001a68:	466d      	mov	r5, sp
 8001a6a:	f106 0410 	add.w	r4, r6, #16
 8001a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a7a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a7e:	f7ff fafb 	bl	8001078 <CanInit>

  BqPack_StructInit(&battery_pack);
 8001a82:	4826      	ldr	r0, [pc, #152]	; (8001b1c <main+0x10c>)
 8001a84:	f7fe fee4 	bl	8000850 <BqPack_StructInit>
  /* Start the timer */
  HAL_TIM_Base_Start_IT(&htim1);
 8001a88:	4825      	ldr	r0, [pc, #148]	; (8001b20 <main+0x110>)
 8001a8a:	f003 f86f 	bl	8004b6c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a8e:	4825      	ldr	r0, [pc, #148]	; (8001b24 <main+0x114>)
 8001a90:	f003 f86c 	bl	8004b6c <HAL_TIM_Base_Start_IT>

  Queue_Init();
 8001a94:	f7ff ff42 	bl	800191c <Queue_Init>

  /* Start receiving data from MSP430 */
  uint8_t data[8] = {1, 1, 1, 1, 1, 1, 1, 1};
 8001a98:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <main+0x118>)
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa2:	e883 0003 	stmia.w	r3, {r0, r1}
  	frame_to_send tx_frame;
  	tx_frame.tx_data[0] = data[0];
 8001aa6:	7b3b      	ldrb	r3, [r7, #12]
 8001aa8:	713b      	strb	r3, [r7, #4]
  	tx_frame.tx_data[1] = data[1];
 8001aaa:	7b7b      	ldrb	r3, [r7, #13]
 8001aac:	717b      	strb	r3, [r7, #5]
  	tx_frame.tx_data[2] = data[2];
 8001aae:	7bbb      	ldrb	r3, [r7, #14]
 8001ab0:	71bb      	strb	r3, [r7, #6]
  	tx_frame.tx_data[3] = data[3];
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	71fb      	strb	r3, [r7, #7]
  	tx_frame.tx_data[4] = data[4];
 8001ab6:	7c3b      	ldrb	r3, [r7, #16]
 8001ab8:	723b      	strb	r3, [r7, #8]
  	tx_frame.tx_data[5] = data[5];
 8001aba:	7c7b      	ldrb	r3, [r7, #17]
 8001abc:	727b      	strb	r3, [r7, #9]
  	tx_frame.tx_data[6] = data[6];
 8001abe:	7cbb      	ldrb	r3, [r7, #18]
 8001ac0:	72bb      	strb	r3, [r7, #10]
  	tx_frame.tx_data[7] = data[7];
 8001ac2:	7cfb      	ldrb	r3, [r7, #19]
 8001ac4:	72fb      	strb	r3, [r7, #11]
  	tx_frame.tx_header = 0x127;
 8001ac6:	f240 1327 	movw	r3, #295	; 0x127
 8001aca:	603b      	str	r3, [r7, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* ADC conversion */
	HAL_ADC_Start(&hadc1);
 8001acc:	4817      	ldr	r0, [pc, #92]	; (8001b2c <main+0x11c>)
 8001ace:	f000 fd4d 	bl	800256c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001ad2:	210a      	movs	r1, #10
 8001ad4:	4815      	ldr	r0, [pc, #84]	; (8001b2c <main+0x11c>)
 8001ad6:	f000 fdf7 	bl	80026c8 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 8001ada:	4814      	ldr	r0, [pc, #80]	; (8001b2c <main+0x11c>)
 8001adc:	f000 fefa 	bl	80028d4 <HAL_ADC_GetValue>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	82fb      	strh	r3, [r7, #22]
	calculated = (uint16_t)((3300.0 / 4095.0) * raw);
 8001ae4:	8afb      	ldrh	r3, [r7, #22]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fdae 	bl	8000648 <__aeabi_i2d>
 8001aec:	a308      	add	r3, pc, #32	; (adr r3, 8001b10 <main+0x100>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fb2d 	bl	8000150 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe fe0d 	bl	800071c <__aeabi_d2uiz>
 8001b02:	4603      	mov	r3, r0
 8001b04:	82bb      	strh	r3, [r7, #20]
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	HAL_Delay(500);
 8001b06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b0a:	f000 fc33 	bl	8002374 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8001b0e:	e7dd      	b.n	8001acc <main+0xbc>
 8001b10:	99c99c9a 	.word	0x99c99c9a
 8001b14:	3fe9c99c 	.word	0x3fe9c99c
 8001b18:	20000224 	.word	0x20000224
 8001b1c:	200001c4 	.word	0x200001c4
 8001b20:	20000314 	.word	0x20000314
 8001b24:	2000035c 	.word	0x2000035c
 8001b28:	08006df0 	.word	0x08006df0
 8001b2c:	2000011c 	.word	0x2000011c

08001b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3a:	2228      	movs	r2, #40	; 0x28
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f890 	bl	8005c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b60:	2301      	movs	r3, #1
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b72:	2302      	movs	r3, #2
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001b7c:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fa0c 	bl	8003fa4 <HAL_RCC_OscConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b92:	f000 f828 	bl	8001be6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b96:	230f      	movs	r3, #15
 8001b98:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fc76 	bl	80044a4 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bbe:	f000 f812 	bl	8001be6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001bc6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fe02 	bl	80047d8 <HAL_RCCEx_PeriphCLKConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bda:	f000 f804 	bl	8001be6 <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3750      	adds	r7, #80	; 0x50
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bea:	b672      	cpsid	i
}
 8001bec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bee:	e7fe      	b.n	8001bee <Error_Handler+0x8>

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_MspInit+0x5c>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_MspInit+0x5c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6193      	str	r3, [r2, #24]
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	61d3      	str	r3, [r2, #28]
 8001c1a:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_MspInit+0x5c>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_MspInit+0x60>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_MspInit+0x60>)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40010000 	.word	0x40010000

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c9a:	f000 fb4f 	bl	800233c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
	...

08001ca4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ca8:	4802      	ldr	r0, [pc, #8]	; (8001cb4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001caa:	f001 fbfe 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000224 	.word	0x20000224

08001cb8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8001cc0:	f001 fbf3 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* Receive CAN frame procedure */
  CanClearRxDataFrame(&can_rx_frame_template);
 8001cc4:	480e      	ldr	r0, [pc, #56]	; (8001d00 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8001cc6:	f7ff fad3 	bl	8001270 <CanClearRxDataFrame>
  CanSaveReceivedData(hcan, &can_rx_frame_template);
 8001cca:	4e0c      	ldr	r6, [pc, #48]	; (8001cfc <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8001cce:	9306      	str	r3, [sp, #24]
 8001cd0:	466d      	mov	r5, sp
 8001cd2:	f106 0410 	add.w	r4, r6, #16
 8001cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ce6:	f7ff f9e7 	bl	80010b8 <CanSaveReceivedData>
  GetRawData(&current_data, &can_rx_frame_template);
 8001cea:	4905      	ldr	r1, [pc, #20]	; (8001d00 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <USB_LP_CAN1_RX0_IRQHandler+0x4c>)
 8001cee:	f7ff fdd1 	bl	8001894 <GetRawData>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3704      	adds	r7, #4
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000224 	.word	0x20000224
 8001d00:	2000028c 	.word	0x2000028c
 8001d04:	200002f4 	.word	0x200002f4

08001d08 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <CAN1_RX1_IRQHandler+0x10>)
 8001d0e:	f001 fbcc 	bl	80034aa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */


  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000224 	.word	0x20000224

08001d1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM1_UP_IRQHandler+0x10>)
 8001d22:	f002 ff75 	bl	8004c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000314 	.word	0x20000314

08001d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM2_IRQHandler+0x10>)
 8001d36:	f002 ff6b 	bl	8004c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000035c 	.word	0x2000035c

08001d44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <USART1_IRQHandler+0x10>)
 8001d4a:	f003 fb7b 	bl	8005444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200003a4 	.word	0x200003a4

08001d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <_kill>:

int _kill(int pid, int sig)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d70:	f003 ff46 	bl	8005c00 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2216      	movs	r2, #22
 8001d78:	601a      	str	r2, [r3, #0]
	return -1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_exit>:

void _exit (int status)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d8e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffe7 	bl	8001d66 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d98:	e7fe      	b.n	8001d98 <_exit+0x12>

08001d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	e00a      	b.n	8001dc2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dac:	f3af 8000 	nop.w
 8001db0:	4601      	mov	r1, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	60ba      	str	r2, [r7, #8]
 8001db8:	b2ca      	uxtb	r2, r1
 8001dba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	dbf0      	blt.n	8001dac <_read+0x12>
	}

return len;
 8001dca:	687b      	ldr	r3, [r7, #4]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	e009      	b.n	8001dfa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60ba      	str	r2, [r7, #8]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	3301      	adds	r3, #1
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	dbf1      	blt.n	8001de6 <_write+0x12>
	}
	return len;
 8001e02:	687b      	ldr	r3, [r7, #4]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_close>:

int _close(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e32:	605a      	str	r2, [r3, #4]
	return 0;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <_isatty>:

int _isatty(int file)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f003 feb0 	bl	8005c00 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20005000 	.word	0x20005000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	2000008c 	.word	0x2000008c
 8001ed4:	20000400 	.word	0x20000400

08001ed8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef8:	463b      	mov	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f02:	4a1f      	ldr	r2, [pc, #124]	; (8001f80 <MX_TIM1_Init+0x9c>)
 8001f04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f06:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 47999;
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f14:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001f18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f2e:	f002 fdcd 	bl	8004acc <HAL_TIM_Base_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001f38:	f7ff fe55 	bl	8001be6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f42:	f107 0308 	add.w	r3, r7, #8
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f4a:	f002 ff69 	bl	8004e20 <HAL_TIM_ConfigClockSource>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001f54:	f7ff fe47 	bl	8001be6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f60:	463b      	mov	r3, r7
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_TIM1_Init+0x98>)
 8001f66:	f003 f93b 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f70:	f7ff fe39 	bl	8001be6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000314 	.word	0x20000314
 8001f80:	40012c00 	.word	0x40012c00

08001f84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f98:	463b      	mov	r3, r7
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <MX_TIM2_Init+0x98>)
 8001fa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fa6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	; (800201c <MX_TIM2_Init+0x98>)
 8001faa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <MX_TIM2_Init+0x98>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_TIM2_Init+0x98>)
 8001fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_TIM2_Init+0x98>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <MX_TIM2_Init+0x98>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fca:	4814      	ldr	r0, [pc, #80]	; (800201c <MX_TIM2_Init+0x98>)
 8001fcc:	f002 fd7e 	bl	8004acc <HAL_TIM_Base_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001fd6:	f7ff fe06 	bl	8001be6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fe0:	f107 0308 	add.w	r3, r7, #8
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480d      	ldr	r0, [pc, #52]	; (800201c <MX_TIM2_Init+0x98>)
 8001fe8:	f002 ff1a 	bl	8004e20 <HAL_TIM_ConfigClockSource>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001ff2:	f7ff fdf8 	bl	8001be6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ffe:	463b      	mov	r3, r7
 8002000:	4619      	mov	r1, r3
 8002002:	4806      	ldr	r0, [pc, #24]	; (800201c <MX_TIM2_Init+0x98>)
 8002004:	f003 f8ec 	bl	80051e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800200e:	f7ff fdea 	bl	8001be6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000035c 	.word	0x2000035c

08002020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1a      	ldr	r2, [pc, #104]	; (8002098 <HAL_TIM_Base_MspInit+0x78>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d114      	bne.n	800205c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002032:	4b1a      	ldr	r3, [pc, #104]	; (800209c <HAL_TIM_Base_MspInit+0x7c>)
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	4a19      	ldr	r2, [pc, #100]	; (800209c <HAL_TIM_Base_MspInit+0x7c>)
 8002038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800203c:	6193      	str	r3, [r2, #24]
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_TIM_Base_MspInit+0x7c>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	2019      	movs	r0, #25
 8002050:	f001 fd25 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002054:	2019      	movs	r0, #25
 8002056:	f001 fd3e 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800205a:	e018      	b.n	800208e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002064:	d113      	bne.n	800208e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_TIM_Base_MspInit+0x7c>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a0c      	ldr	r2, [pc, #48]	; (800209c <HAL_TIM_Base_MspInit+0x7c>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	61d3      	str	r3, [r2, #28]
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_TIM_Base_MspInit+0x7c>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201c      	movs	r0, #28
 8002084:	f001 fd0b 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002088:	201c      	movs	r0, #28
 800208a:	f001 fd24 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40012c00 	.word	0x40012c00
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d113      	bne.n	80020da <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		(*send_functions[counter])();
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	4798      	blx	r3
		counter++;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020ca:	701a      	strb	r2, [r3, #0]
		if(counter >= NUMBER_OF_SEND_FUNC)
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d902      	bls.n	80020da <HAL_TIM_PeriodElapsedCallback+0x3a>
		{
			counter = 0;
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
			//HAL_TIM_Base_Stop_IT(htim);
		}
	}

	if(htim->Instance == TIM2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e2:	d104      	bne.n	80020ee <HAL_TIM_PeriodElapsedCallback+0x4e>
	{
		HAL_UART_Transmit_IT(&huart1, (uint8_t*)"rqst\r", 5);
 80020e4:	2205      	movs	r2, #5
 80020e6:	4907      	ldr	r1, [pc, #28]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80020ea:	f003 f936 	bl	800535a <HAL_UART_Transmit_IT>
	}
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	20000090 	.word	0x20000090
 8002100:	200002d0 	.word	0x200002d0
 8002104:	08006df8 	.word	0x08006df8
 8002108:	200003a4 	.word	0x200003a4

0800210c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <MX_USART1_UART_Init+0x50>)
 8002114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002118:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800211c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800211e:	4b0e      	ldr	r3, [pc, #56]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002130:	4b09      	ldr	r3, [pc, #36]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002132:	220c      	movs	r2, #12
 8002134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002136:	4b08      	ldr	r3, [pc, #32]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	4b06      	ldr	r3, [pc, #24]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_USART1_UART_Init+0x4c>)
 8002144:	f003 f8bc 	bl	80052c0 <HAL_UART_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800214e:	f7ff fd4a 	bl	8001be6 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
  // Immediately start receiving
  //HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
  /* USER CODE END USART1_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200003a4 	.word	0x200003a4
 800215c:	40013800 	.word	0x40013800

08002160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a20      	ldr	r2, [pc, #128]	; (80021fc <HAL_UART_MspInit+0x9c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d139      	bne.n	80021f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_UART_MspInit+0xa0>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_UART_MspInit+0xa0>)
 8002186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_UART_MspInit+0xa0>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_UART_MspInit+0xa0>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a18      	ldr	r2, [pc, #96]	; (8002200 <HAL_UART_MspInit+0xa0>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_UART_MspInit+0xa0>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0310 	add.w	r3, r7, #16
 80021c2:	4619      	mov	r1, r3
 80021c4:	480f      	ldr	r0, [pc, #60]	; (8002204 <HAL_UART_MspInit+0xa4>)
 80021c6:	f001 fd51 	bl	8003c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0310 	add.w	r3, r7, #16
 80021dc:	4619      	mov	r1, r3
 80021de:	4809      	ldr	r0, [pc, #36]	; (8002204 <HAL_UART_MspInit+0xa4>)
 80021e0:	f001 fd44 	bl	8003c6c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2106      	movs	r1, #6
 80021e8:	2025      	movs	r0, #37	; 0x25
 80021ea:	f001 fc58 	bl	8003a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021ee:	2025      	movs	r0, #37	; 0x25
 80021f0:	f001 fc71 	bl	8003ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80021f4:	bf00      	nop
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40013800 	.word	0x40013800
 8002200:	40021000 	.word	0x40021000
 8002204:	40010800 	.word	0x40010800

08002208 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_UART_RxCpltCallback+0x48>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d115      	bne.n	8002246 <HAL_UART_RxCpltCallback+0x3e>
	{
		/* Manage battery pack */
		BqPack_StructUpdate_MSP430(&battery_pack, rx_buffer);
 800221a:	490e      	ldr	r1, [pc, #56]	; (8002254 <HAL_UART_RxCpltCallback+0x4c>)
 800221c:	480e      	ldr	r0, [pc, #56]	; (8002258 <HAL_UART_RxCpltCallback+0x50>)
 800221e:	f7fe fbd7 	bl	80009d0 <BqPack_StructUpdate_MSP430>
		BqPack_StructUpdate_CurrSensor(&battery_pack, &current_data);
 8002222:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_UART_RxCpltCallback+0x54>)
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <HAL_UART_RxCpltCallback+0x50>)
 8002226:	f7fe fb7f 	bl	8000928 <BqPack_StructUpdate_CurrSensor>
		BqPack_RecalculateData(&battery_pack);
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <HAL_UART_RxCpltCallback+0x50>)
 800222c:	f7fe fb8a 	bl	8000944 <BqPack_RecalculateData>

		/* Errors */
		BqPack_CheckForErrors(&battery_pack);
 8002230:	4809      	ldr	r0, [pc, #36]	; (8002258 <HAL_UART_RxCpltCallback+0x50>)
 8002232:	f7fe fc4b 	bl	8000acc <BqPack_CheckForErrors>
		BqPack_CheckForWarnings(&battery_pack);
 8002236:	4808      	ldr	r0, [pc, #32]	; (8002258 <HAL_UART_RxCpltCallback+0x50>)
 8002238:	f7fe fd7e 	bl	8000d38 <BqPack_CheckForWarnings>

		/* Regular messages */


		/* Restart Uart */
		HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	4905      	ldr	r1, [pc, #20]	; (8002254 <HAL_UART_RxCpltCallback+0x4c>)
 8002240:	4807      	ldr	r0, [pc, #28]	; (8002260 <HAL_UART_RxCpltCallback+0x58>)
 8002242:	f003 f8ce 	bl	80053e2 <HAL_UART_Receive_IT>
	}
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40013800 	.word	0x40013800
 8002254:	20000094 	.word	0x20000094
 8002258:	200001c4 	.word	0x200001c4
 800225c:	200002f4 	.word	0x200002f4
 8002260:	200003a4 	.word	0x200003a4

08002264 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002266:	490d      	ldr	r1, [pc, #52]	; (800229c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800226c:	e002      	b.n	8002274 <LoopCopyDataInit>

0800226e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800226e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002272:	3304      	adds	r3, #4

08002274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002278:	d3f9      	bcc.n	800226e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002280:	e001      	b.n	8002286 <LoopFillZerobss>

08002282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002284:	3204      	adds	r2, #4

08002286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002288:	d3fb      	bcc.n	8002282 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800228a:	f7ff fe25 	bl	8001ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800228e:	f003 fcbd 	bl	8005c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002292:	f7ff fbbd 	bl	8001a10 <main>
  bx lr
 8002296:	4770      	bx	lr
  ldr r0, =_sdata
 8002298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800229c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80022a0:	0800708c 	.word	0x0800708c
  ldr r2, =_sbss
 80022a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80022a8:	200003fc 	.word	0x200003fc

080022ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ac:	e7fe      	b.n	80022ac <ADC1_2_IRQHandler>
	...

080022b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_Init+0x28>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <HAL_Init+0x28>)
 80022ba:	f043 0310 	orr.w	r3, r3, #16
 80022be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f001 fbe1 	bl	8003a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f000 f808 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022cc:	f7ff fc90 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022e4:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_InitTick+0x54>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_InitTick+0x58>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f001 fbf9 	bl	8003af2 <HAL_SYSTICK_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e00e      	b.n	8002328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b0f      	cmp	r3, #15
 800230e:	d80a      	bhi.n	8002326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002310:	2200      	movs	r2, #0
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	f04f 30ff 	mov.w	r0, #4294967295
 8002318:	f001 fbc1 	bl	8003a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_InitTick+0x5c>)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000000 	.word	0x20000000
 8002334:	20000008 	.word	0x20000008
 8002338:	20000004 	.word	0x20000004

0800233c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_IncTick+0x1c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_IncTick+0x20>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4413      	add	r3, r2
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_IncTick+0x20>)
 800234e:	6013      	str	r3, [r2, #0]
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000008 	.word	0x20000008
 800235c:	200003e8 	.word	0x200003e8

08002360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_GetTick+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	200003e8 	.word	0x200003e8

08002374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fff0 	bl	8002360 <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d005      	beq.n	800239a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238e:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_Delay+0x44>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	461a      	mov	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4413      	add	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800239a:	bf00      	nop
 800239c:	f7ff ffe0 	bl	8002360 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d8f7      	bhi.n	800239c <HAL_Delay+0x28>
  {
  }
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000008 	.word	0x20000008

080023bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0be      	b.n	800255c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f9ec 	bl	80007d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 fbc5 	bl	8002b90 <ADC_ConversionStop_Disable>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 8099 	bne.w	800254a <HAL_ADC_Init+0x18e>
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 8095 	bne.w	800254a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002428:	f023 0302 	bic.w	r3, r3, #2
 800242c:	f043 0202 	orr.w	r2, r3, #2
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800243c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7b1b      	ldrb	r3, [r3, #12]
 8002442:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002444:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4313      	orrs	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002454:	d003      	beq.n	800245e <HAL_ADC_Init+0xa2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d102      	bne.n	8002464 <HAL_ADC_Init+0xa8>
 800245e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002462:	e000      	b.n	8002466 <HAL_ADC_Init+0xaa>
 8002464:	2300      	movs	r3, #0
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7d1b      	ldrb	r3, [r3, #20]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d119      	bne.n	80024a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7b1b      	ldrb	r3, [r3, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d109      	bne.n	8002490 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	3b01      	subs	r3, #1
 8002482:	035a      	lsls	r2, r3, #13
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	e00b      	b.n	80024a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	f043 0220 	orr.w	r2, r3, #32
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	f043 0201 	orr.w	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	4b28      	ldr	r3, [pc, #160]	; (8002564 <HAL_ADC_Init+0x1a8>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d8:	d003      	beq.n	80024e2 <HAL_ADC_Init+0x126>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d104      	bne.n	80024ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	3b01      	subs	r3, #1
 80024e8:	051b      	lsls	r3, r3, #20
 80024ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_ADC_Init+0x1ac>)
 8002508:	4013      	ands	r3, r2
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	429a      	cmp	r2, r3
 800250e:	d10b      	bne.n	8002528 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	f043 0201 	orr.w	r2, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002526:	e018      	b.n	800255a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f023 0312 	bic.w	r3, r3, #18
 8002530:	f043 0210 	orr.w	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002548:	e007      	b.n	800255a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800255a:	7dfb      	ldrb	r3, [r7, #23]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	ffe1f7fd 	.word	0xffe1f7fd
 8002568:	ff1f0efe 	.word	0xff1f0efe

0800256c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_Start+0x1a>
 8002582:	2302      	movs	r3, #2
 8002584:	e098      	b.n	80026b8 <HAL_ADC_Start+0x14c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 faa4 	bl	8002adc <ADC_Enable>
 8002594:	4603      	mov	r3, r0
 8002596:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 8087 	bne.w	80026ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a8:	f023 0301 	bic.w	r3, r3, #1
 80025ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a41      	ldr	r2, [pc, #260]	; (80026c0 <HAL_ADC_Start+0x154>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d105      	bne.n	80025ca <HAL_ADC_Start+0x5e>
 80025be:	4b41      	ldr	r3, [pc, #260]	; (80026c4 <HAL_ADC_Start+0x158>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d115      	bne.n	80025f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d026      	beq.n	8002632 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025f4:	e01d      	b.n	8002632 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2f      	ldr	r2, [pc, #188]	; (80026c4 <HAL_ADC_Start+0x158>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_ADC_Start+0xaa>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_ADC_Start+0x154>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10d      	bne.n	8002632 <HAL_ADC_Start+0xc6>
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_ADC_Start+0x158>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800262a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	f023 0206 	bic.w	r2, r3, #6
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	62da      	str	r2, [r3, #44]	; 0x2c
 800264a:	e002      	b.n	8002652 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f06f 0202 	mvn.w	r2, #2
 8002662:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800266e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002672:	d113      	bne.n	800269c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002678:	4a11      	ldr	r2, [pc, #68]	; (80026c0 <HAL_ADC_Start+0x154>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d105      	bne.n	800268a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_ADC_Start+0x158>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002686:	2b00      	cmp	r3, #0
 8002688:	d108      	bne.n	800269c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	e00c      	b.n	80026b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	e003      	b.n	80026b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40012800 	.word	0x40012800
 80026c4:	40012400 	.word	0x40012400

080026c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026de:	f7ff fe3f 	bl	8002360 <HAL_GetTick>
 80026e2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f043 0220 	orr.w	r2, r3, #32
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0d3      	b.n	80028b2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d131      	bne.n	800277c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d12a      	bne.n	800277c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002726:	e021      	b.n	800276c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272e:	d01d      	beq.n	800276c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_ADC_PollForConversion+0x7e>
 8002736:	f7ff fe13 	bl	8002360 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d212      	bcs.n	800276c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e0a2      	b.n	80028b2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0d6      	beq.n	8002728 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800277a:	e070      	b.n	800285e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_ADC_PollForConversion+0x1f4>)
 800277e:	681c      	ldr	r4, [r3, #0]
 8002780:	2002      	movs	r0, #2
 8002782:	f002 f8df 	bl	8004944 <HAL_RCCEx_GetPeriphCLKFreq>
 8002786:	4603      	mov	r3, r0
 8002788:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_ADC_PollForConversion+0x1f8>)
 8002794:	400b      	ands	r3, r1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_ADC_PollForConversion+0x104>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_ADC_PollForConversion+0x1fc>)
 80027a2:	400b      	ands	r3, r1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d111      	bne.n	80027cc <HAL_ADC_PollForConversion+0x104>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6919      	ldr	r1, [r3, #16]
 80027ae:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_ADC_PollForConversion+0x200>)
 80027b0:	400b      	ands	r3, r1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x100>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68d9      	ldr	r1, [r3, #12]
 80027bc:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_ADC_PollForConversion+0x204>)
 80027be:	400b      	ands	r3, r1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x100>
 80027c4:	2314      	movs	r3, #20
 80027c6:	e020      	b.n	800280a <HAL_ADC_PollForConversion+0x142>
 80027c8:	2329      	movs	r3, #41	; 0x29
 80027ca:	e01e      	b.n	800280a <HAL_ADC_PollForConversion+0x142>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_ADC_PollForConversion+0x200>)
 80027d4:	400b      	ands	r3, r1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_ADC_PollForConversion+0x120>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68d9      	ldr	r1, [r3, #12]
 80027e0:	4b3a      	ldr	r3, [pc, #232]	; (80028cc <HAL_ADC_PollForConversion+0x204>)
 80027e2:	400b      	ands	r3, r1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00d      	beq.n	8002804 <HAL_ADC_PollForConversion+0x13c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <HAL_ADC_PollForConversion+0x208>)
 80027f0:	400b      	ands	r3, r1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d108      	bne.n	8002808 <HAL_ADC_PollForConversion+0x140>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68d9      	ldr	r1, [r3, #12]
 80027fc:	4b34      	ldr	r3, [pc, #208]	; (80028d0 <HAL_ADC_PollForConversion+0x208>)
 80027fe:	400b      	ands	r3, r1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_ADC_PollForConversion+0x140>
 8002804:	2354      	movs	r3, #84	; 0x54
 8002806:	e000      	b.n	800280a <HAL_ADC_PollForConversion+0x142>
 8002808:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002810:	e021      	b.n	8002856 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002818:	d01a      	beq.n	8002850 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_ADC_PollForConversion+0x168>
 8002820:	f7ff fd9e 	bl	8002360 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d20f      	bcs.n	8002850 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	429a      	cmp	r2, r3
 8002836:	d90b      	bls.n	8002850 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f043 0204 	orr.w	r2, r3, #4
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e030      	b.n	80028b2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3301      	adds	r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	429a      	cmp	r2, r3
 800285c:	d8d9      	bhi.n	8002812 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f06f 0212 	mvn.w	r2, #18
 8002866:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800287e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002882:	d115      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f043 0201 	orr.w	r2, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd90      	pop	{r4, r7, pc}
 80028ba:	bf00      	nop
 80028bc:	20000000 	.word	0x20000000
 80028c0:	24924924 	.word	0x24924924
 80028c4:	00924924 	.word	0x00924924
 80028c8:	12492492 	.word	0x12492492
 80028cc:	00492492 	.word	0x00492492
 80028d0:	00249249 	.word	0x00249249

080028d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x20>
 8002908:	2302      	movs	r3, #2
 800290a:	e0dc      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0x1da>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b06      	cmp	r3, #6
 800291a:	d81c      	bhi.n	8002956 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	3b05      	subs	r3, #5
 800292e:	221f      	movs	r2, #31
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	4019      	ands	r1, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b05      	subs	r3, #5
 8002948:	fa00 f203 	lsl.w	r2, r0, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	635a      	str	r2, [r3, #52]	; 0x34
 8002954:	e03c      	b.n	80029d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d81c      	bhi.n	8002998 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	3b23      	subs	r3, #35	; 0x23
 8002970:	221f      	movs	r2, #31
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43db      	mvns	r3, r3
 8002978:	4019      	ands	r1, r3
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b23      	subs	r3, #35	; 0x23
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
 8002996:	e01b      	b.n	80029d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	3b41      	subs	r3, #65	; 0x41
 80029aa:	221f      	movs	r2, #31
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	4019      	ands	r1, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b41      	subs	r3, #65	; 0x41
 80029c4:	fa00 f203 	lsl.w	r2, r0, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b09      	cmp	r3, #9
 80029d6:	d91c      	bls.n	8002a12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68d9      	ldr	r1, [r3, #12]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4613      	mov	r3, r2
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4413      	add	r3, r2
 80029e8:	3b1e      	subs	r3, #30
 80029ea:	2207      	movs	r2, #7
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	4019      	ands	r1, r3
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6898      	ldr	r0, [r3, #8]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	3b1e      	subs	r3, #30
 8002a04:	fa00 f203 	lsl.w	r2, r0, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	e019      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6919      	ldr	r1, [r3, #16]
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	2207      	movs	r2, #7
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4019      	ands	r1, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	6898      	ldr	r0, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d003      	beq.n	8002a56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a52:	2b11      	cmp	r3, #17
 8002a54:	d132      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d125      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d126      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d11a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a13      	ldr	r2, [pc, #76]	; (8002ad8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	0c9a      	lsrs	r2, r3, #18
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a9c:	e002      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x1b2>
 8002aaa:	e007      	b.n	8002abc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	40012400 	.word	0x40012400
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	431bde83 	.word	0x431bde83

08002adc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d040      	beq.n	8002b7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0a:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <ADC_Enable+0xac>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <ADC_Enable+0xb0>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	0c9b      	lsrs	r3, r3, #18
 8002b16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b18:	e002      	b.n	8002b20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f9      	bne.n	8002b1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b26:	f7ff fc1b 	bl	8002360 <HAL_GetTick>
 8002b2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b2c:	e01f      	b.n	8002b6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b2e:	f7ff fc17 	bl	8002360 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d918      	bls.n	8002b6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d011      	beq.n	8002b6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f043 0210 	orr.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	f043 0201 	orr.w	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e007      	b.n	8002b7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d1d8      	bne.n	8002b2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000000 	.word	0x20000000
 8002b8c:	431bde83 	.word	0x431bde83

08002b90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d12e      	bne.n	8002c08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bba:	f7ff fbd1 	bl	8002360 <HAL_GetTick>
 8002bbe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bc0:	e01b      	b.n	8002bfa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bc2:	f7ff fbcd 	bl	8002360 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d914      	bls.n	8002bfa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d10d      	bne.n	8002bfa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d0dc      	beq.n	8002bc2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e0ed      	b.n	8002e00 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7fe f9bd 	bl	8000fb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c46:	f7ff fb8b 	bl	8002360 <HAL_GetTick>
 8002c4a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c4c:	e012      	b.n	8002c74 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c4e:	f7ff fb87 	bl	8002360 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b0a      	cmp	r3, #10
 8002c5a:	d90b      	bls.n	8002c74 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2205      	movs	r2, #5
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0c5      	b.n	8002e00 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0e5      	beq.n	8002c4e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 0202 	bic.w	r2, r2, #2
 8002c90:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c92:	f7ff fb65 	bl	8002360 <HAL_GetTick>
 8002c96:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c98:	e012      	b.n	8002cc0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c9a:	f7ff fb61 	bl	8002360 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b0a      	cmp	r3, #10
 8002ca6:	d90b      	bls.n	8002cc0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2205      	movs	r2, #5
 8002cb8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e09f      	b.n	8002e00 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1e5      	bne.n	8002c9a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7e1b      	ldrb	r3, [r3, #24]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d108      	bne.n	8002ce8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e007      	b.n	8002cf8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7e5b      	ldrb	r3, [r3, #25]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d108      	bne.n	8002d12 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e007      	b.n	8002d22 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7e9b      	ldrb	r3, [r3, #26]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0220 	orr.w	r2, r2, #32
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e007      	b.n	8002d4c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0220 	bic.w	r2, r2, #32
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7edb      	ldrb	r3, [r3, #27]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d108      	bne.n	8002d66 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0210 	bic.w	r2, r2, #16
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e007      	b.n	8002d76 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0210 	orr.w	r2, r2, #16
 8002d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	7f1b      	ldrb	r3, [r3, #28]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d108      	bne.n	8002d90 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0208 	orr.w	r2, r2, #8
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e007      	b.n	8002da0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0208 	bic.w	r2, r2, #8
 8002d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7f5b      	ldrb	r3, [r3, #29]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d108      	bne.n	8002dba <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0204 	orr.w	r2, r2, #4
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e007      	b.n	8002dca <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0204 	bic.w	r2, r2, #4
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	ea42 0103 	orr.w	r1, r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	1e5a      	subs	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d003      	beq.n	8002e2e <HAL_CAN_ConfigFilter+0x26>
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	f040 80aa 	bne.w	8002f82 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e34:	f043 0201 	orr.w	r2, r3, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2201      	movs	r2, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	401a      	ands	r2, r3
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d123      	bne.n	8002eb0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	401a      	ands	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3248      	adds	r2, #72	; 0x48
 8002e90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ea4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	3348      	adds	r3, #72	; 0x48
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d122      	bne.n	8002efe <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ed8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3248      	adds	r2, #72	; 0x48
 8002ede:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ef2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ef4:	6979      	ldr	r1, [r7, #20]
 8002ef6:	3348      	adds	r3, #72	; 0x48
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	440b      	add	r3, r1
 8002efc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	401a      	ands	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002f18:	e007      	b.n	8002f2a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	431a      	orrs	r2, r3
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002f44:	e007      	b.n	8002f56 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f74:	f023 0201 	bic.w	r2, r3, #1
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e006      	b.n	8002f90 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d12e      	bne.n	800300c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0201 	bic.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fc6:	f7ff f9cb 	bl	8002360 <HAL_GetTick>
 8002fca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fcc:	e012      	b.n	8002ff4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fce:	f7ff f9c7 	bl	8002360 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b0a      	cmp	r3, #10
 8002fda:	d90b      	bls.n	8002ff4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2205      	movs	r2, #5
 8002fec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e012      	b.n	800301a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e5      	bne.n	8002fce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e006      	b.n	800301a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003022:	b480      	push	{r7}
 8003024:	b089      	sub	sp, #36	; 0x24
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003036:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003040:	7ffb      	ldrb	r3, [r7, #31]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d003      	beq.n	800304e <HAL_CAN_AddTxMessage+0x2c>
 8003046:	7ffb      	ldrb	r3, [r7, #31]
 8003048:	2b02      	cmp	r3, #2
 800304a:	f040 80b8 	bne.w	80031be <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a0 	beq.w	80031ae <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	0e1b      	lsrs	r3, r3, #24
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d907      	bls.n	800308e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e09e      	b.n	80031cc <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800308e:	2201      	movs	r2, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	409a      	lsls	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030aa:	68f9      	ldr	r1, [r7, #12]
 80030ac:	6809      	ldr	r1, [r1, #0]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	3318      	adds	r3, #24
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	440b      	add	r3, r1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e00f      	b.n	80030dc <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030c6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030cc:	68f9      	ldr	r1, [r7, #12]
 80030ce:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030d0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3318      	adds	r3, #24
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	440b      	add	r3, r1
 80030da:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3318      	adds	r3, #24
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	440b      	add	r3, r1
 80030ec:	3304      	adds	r3, #4
 80030ee:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	7d1b      	ldrb	r3, [r3, #20]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d111      	bne.n	800311c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3318      	adds	r3, #24
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	6811      	ldr	r1, [r2, #0]
 800310c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	3318      	adds	r3, #24
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	3304      	adds	r3, #4
 800311a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3307      	adds	r3, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	061a      	lsls	r2, r3, #24
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3306      	adds	r3, #6
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3305      	adds	r3, #5
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	021b      	lsls	r3, r3, #8
 8003136:	4313      	orrs	r3, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	3204      	adds	r2, #4
 800313c:	7812      	ldrb	r2, [r2, #0]
 800313e:	4610      	mov	r0, r2
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	6811      	ldr	r1, [r2, #0]
 8003144:	ea43 0200 	orr.w	r2, r3, r0
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	440b      	add	r3, r1
 800314e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003152:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3303      	adds	r3, #3
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	061a      	lsls	r2, r3, #24
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3302      	adds	r3, #2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	041b      	lsls	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3301      	adds	r3, #1
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	4313      	orrs	r3, r2
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	7812      	ldrb	r2, [r2, #0]
 8003174:	4610      	mov	r0, r2
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	6811      	ldr	r1, [r2, #0]
 800317a:	ea43 0200 	orr.w	r2, r3, r0
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	440b      	add	r3, r1
 8003184:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003188:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	3318      	adds	r3, #24
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	6811      	ldr	r1, [r2, #0]
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3318      	adds	r3, #24
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	440b      	add	r3, r1
 80031a8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e00e      	b.n	80031cc <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e006      	b.n	80031cc <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3724      	adds	r7, #36	; 0x24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80031ea:	7afb      	ldrb	r3, [r7, #11]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d002      	beq.n	80031f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d11d      	bne.n	8003232 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d002      	beq.n	800320a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3301      	adds	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3301      	adds	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr

0800323e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800323e:	b480      	push	{r7}
 8003240:	b087      	sub	sp, #28
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003252:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d003      	beq.n	8003262 <HAL_CAN_GetRxMessage+0x24>
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b02      	cmp	r3, #2
 800325e:	f040 80f3 	bne.w	8003448 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10e      	bne.n	8003286 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0303 	and.w	r3, r3, #3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d116      	bne.n	80032a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0e7      	b.n	8003456 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d107      	bne.n	80032a4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0d8      	b.n	8003456 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	331b      	adds	r3, #27
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4413      	add	r3, r2
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0204 	and.w	r2, r3, #4
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10c      	bne.n	80032dc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	331b      	adds	r3, #27
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	4413      	add	r3, r2
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	0d5b      	lsrs	r3, r3, #21
 80032d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e00b      	b.n	80032f4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	331b      	adds	r3, #27
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	4413      	add	r3, r2
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	331b      	adds	r3, #27
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4413      	add	r3, r2
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0202 	and.w	r2, r3, #2
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	331b      	adds	r3, #27
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	4413      	add	r3, r2
 8003316:	3304      	adds	r3, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 020f 	and.w	r2, r3, #15
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	331b      	adds	r3, #27
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b2da      	uxtb	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	331b      	adds	r3, #27
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	4413      	add	r3, r2
 8003346:	3304      	adds	r3, #4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	b29a      	uxth	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	4413      	add	r3, r2
 800335c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	0a1a      	lsrs	r2, r3, #8
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	4413      	add	r3, r2
 800338c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	0c1a      	lsrs	r2, r3, #16
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	3302      	adds	r3, #2
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0e1a      	lsrs	r2, r3, #24
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	3303      	adds	r3, #3
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	4413      	add	r3, r2
 80033c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	3304      	adds	r3, #4
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	0a1a      	lsrs	r2, r3, #8
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3305      	adds	r3, #5
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0c1a      	lsrs	r2, r3, #16
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	3306      	adds	r3, #6
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	4413      	add	r3, r2
 800340c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	0e1a      	lsrs	r2, r3, #24
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	3307      	adds	r3, #7
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d108      	bne.n	8003434 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f042 0220 	orr.w	r2, r2, #32
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	e007      	b.n	8003444 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0220 	orr.w	r2, r2, #32
 8003442:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	e006      	b.n	8003456 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
  }
}
 8003456:	4618      	mov	r0, r3
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003470:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d002      	beq.n	800347e <HAL_CAN_ActivateNotification+0x1e>
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d109      	bne.n	8003492 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6959      	ldr	r1, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	e006      	b.n	80034a0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
  }
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08a      	sub	sp, #40	; 0x28
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d07c      	beq.n	80035ea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d023      	beq.n	8003542 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2201      	movs	r2, #1
 8003500:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f983 	bl	8003818 <HAL_CAN_TxMailbox0CompleteCallback>
 8003512:	e016      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	e00c      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
 800353a:	e002      	b.n	8003542 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f986 	bl	800384e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d024      	beq.n	8003596 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f962 	bl	800382a <HAL_CAN_TxMailbox1CompleteCallback>
 8003566:	e016      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e00c      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e002      	b.n	8003596 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f965 	bl	8003860 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d024      	beq.n	80035ea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f941 	bl	800383c <HAL_CAN_TxMailbox2CompleteCallback>
 80035ba:	e016      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e00c      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	e002      	b.n	80035ea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f944 	bl	8003872 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00c      	beq.n	800360e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d007      	beq.n	800360e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003604:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2210      	movs	r2, #16
 800360c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d006      	beq.n	8003630 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f92a 	bl	8003884 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d002      	beq.n	800364e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd fe46 	bl	80012da <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00c      	beq.n	8003672 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003668:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2210      	movs	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2208      	movs	r2, #8
 800368c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f90a 	bl	80038a8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	f003 0310 	and.w	r3, r3, #16
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f8f2 	bl	8003896 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00b      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2210      	movs	r2, #16
 80036cc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8f3 	bl	80038ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d006      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2208      	movs	r2, #8
 80036ee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f8eb 	bl	80038cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d07b      	beq.n	80037f8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d072      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003764:	2b00      	cmp	r3, #0
 8003766:	d043      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d03e      	beq.n	80037f0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d02b      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x32a>
 800377c:	2b60      	cmp	r3, #96	; 0x60
 800377e:	d82e      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d022      	beq.n	80037ca <HAL_CAN_IRQHandler+0x320>
 8003784:	2b50      	cmp	r3, #80	; 0x50
 8003786:	d82a      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d019      	beq.n	80037c0 <HAL_CAN_IRQHandler+0x316>
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d826      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d010      	beq.n	80037b6 <HAL_CAN_IRQHandler+0x30c>
 8003794:	2b30      	cmp	r3, #48	; 0x30
 8003796:	d822      	bhi.n	80037de <HAL_CAN_IRQHandler+0x334>
 8003798:	2b10      	cmp	r3, #16
 800379a:	d002      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x2f8>
 800379c:	2b20      	cmp	r3, #32
 800379e:	d005      	beq.n	80037ac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037a0:	e01d      	b.n	80037de <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	f043 0308 	orr.w	r3, r3, #8
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037aa:	e019      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	f043 0310 	orr.w	r3, r3, #16
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b4:	e014      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f043 0320 	orr.w	r3, r3, #32
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037be:	e00f      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037c8:	e00a      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037d2:	e005      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037dc:	e000      	b.n	80037e0 <HAL_CAN_IRQHandler+0x336>
            break;
 80037de:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80037ee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2204      	movs	r2, #4
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f867 	bl	80038de <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003810:	bf00      	nop
 8003812:	3728      	adds	r7, #40	; 0x28
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr

0800382a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr

0800383c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr

0800384e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	4770      	bx	lr

08003872 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr

08003896 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr

080038ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800390c:	4013      	ands	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800391c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <__NVIC_GetPriorityGrouping+0x18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 0307 	and.w	r3, r3, #7
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db0b      	blt.n	800397e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4906      	ldr	r1, [pc, #24]	; (8003988 <__NVIC_EnableIRQ+0x34>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	e000e100 	.word	0xe000e100

0800398c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db0a      	blt.n	80039b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	490c      	ldr	r1, [pc, #48]	; (80039d8 <__NVIC_SetPriority+0x4c>)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	0112      	lsls	r2, r2, #4
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	440b      	add	r3, r1
 80039b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b4:	e00a      	b.n	80039cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	4908      	ldr	r1, [pc, #32]	; (80039dc <__NVIC_SetPriority+0x50>)
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3b04      	subs	r3, #4
 80039c4:	0112      	lsls	r2, r2, #4
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	440b      	add	r3, r1
 80039ca:	761a      	strb	r2, [r3, #24]
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100
 80039dc:	e000ed00 	.word	0xe000ed00

080039e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b089      	sub	sp, #36	; 0x24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f1c3 0307 	rsb	r3, r3, #7
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	bf28      	it	cs
 80039fe:	2304      	movcs	r3, #4
 8003a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2b06      	cmp	r3, #6
 8003a08:	d902      	bls.n	8003a10 <NVIC_EncodePriority+0x30>
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3b03      	subs	r3, #3
 8003a0e:	e000      	b.n	8003a12 <NVIC_EncodePriority+0x32>
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	401a      	ands	r2, r3
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a28:	f04f 31ff 	mov.w	r1, #4294967295
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	43d9      	mvns	r1, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a38:	4313      	orrs	r3, r2
         );
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3724      	adds	r7, #36	; 0x24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a54:	d301      	bcc.n	8003a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00f      	b.n	8003a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <SysTick_Config+0x40>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a62:	210f      	movs	r1, #15
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	f7ff ff90 	bl	800398c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Config+0x40>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SysTick_Config+0x40>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff2d 	bl	80038f0 <__NVIC_SetPriorityGrouping>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab0:	f7ff ff42 	bl	8003938 <__NVIC_GetPriorityGrouping>
 8003ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f7ff ff90 	bl	80039e0 <NVIC_EncodePriority>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff5f 	bl	800398c <__NVIC_SetPriority>
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4603      	mov	r3, r0
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff35 	bl	8003954 <__NVIC_EnableIRQ>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffa2 	bl	8003a44 <SysTick_Config>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d008      	beq.n	8003b32 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2204      	movs	r2, #4
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e020      	b.n	8003b74 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020e 	bic.w	r2, r2, #14
 8003b40:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
	...

08003b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d005      	beq.n	8003ba2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2204      	movs	r2, #4
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	73fb      	strb	r3, [r7, #15]
 8003ba0:	e051      	b.n	8003c46 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 020e 	bic.w	r2, r2, #14
 8003bb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a22      	ldr	r2, [pc, #136]	; (8003c50 <HAL_DMA_Abort_IT+0xd0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d029      	beq.n	8003c20 <HAL_DMA_Abort_IT+0xa0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a20      	ldr	r2, [pc, #128]	; (8003c54 <HAL_DMA_Abort_IT+0xd4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d022      	beq.n	8003c1c <HAL_DMA_Abort_IT+0x9c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <HAL_DMA_Abort_IT+0xd8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d01a      	beq.n	8003c16 <HAL_DMA_Abort_IT+0x96>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_DMA_Abort_IT+0xdc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d012      	beq.n	8003c10 <HAL_DMA_Abort_IT+0x90>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_DMA_Abort_IT+0xe0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00a      	beq.n	8003c0a <HAL_DMA_Abort_IT+0x8a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <HAL_DMA_Abort_IT+0xe4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d102      	bne.n	8003c04 <HAL_DMA_Abort_IT+0x84>
 8003bfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c02:	e00e      	b.n	8003c22 <HAL_DMA_Abort_IT+0xa2>
 8003c04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c08:	e00b      	b.n	8003c22 <HAL_DMA_Abort_IT+0xa2>
 8003c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c0e:	e008      	b.n	8003c22 <HAL_DMA_Abort_IT+0xa2>
 8003c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c14:	e005      	b.n	8003c22 <HAL_DMA_Abort_IT+0xa2>
 8003c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c1a:	e002      	b.n	8003c22 <HAL_DMA_Abort_IT+0xa2>
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	e000      	b.n	8003c22 <HAL_DMA_Abort_IT+0xa2>
 8003c20:	2301      	movs	r3, #1
 8003c22:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <HAL_DMA_Abort_IT+0xe8>)
 8003c24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
    } 
  }
  return status;
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40020008 	.word	0x40020008
 8003c54:	4002001c 	.word	0x4002001c
 8003c58:	40020030 	.word	0x40020030
 8003c5c:	40020044 	.word	0x40020044
 8003c60:	40020058 	.word	0x40020058
 8003c64:	4002006c 	.word	0x4002006c
 8003c68:	40020000 	.word	0x40020000

08003c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b08b      	sub	sp, #44	; 0x2c
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7e:	e169      	b.n	8003f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c80:	2201      	movs	r2, #1
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
 8003c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 8158 	bne.w	8003f4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	4a9a      	ldr	r2, [pc, #616]	; (8003f0c <HAL_GPIO_Init+0x2a0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d05e      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003ca8:	4a98      	ldr	r2, [pc, #608]	; (8003f0c <HAL_GPIO_Init+0x2a0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d875      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cae:	4a98      	ldr	r2, [pc, #608]	; (8003f10 <HAL_GPIO_Init+0x2a4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d058      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003cb4:	4a96      	ldr	r2, [pc, #600]	; (8003f10 <HAL_GPIO_Init+0x2a4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d86f      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cba:	4a96      	ldr	r2, [pc, #600]	; (8003f14 <HAL_GPIO_Init+0x2a8>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d052      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003cc0:	4a94      	ldr	r2, [pc, #592]	; (8003f14 <HAL_GPIO_Init+0x2a8>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d869      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cc6:	4a94      	ldr	r2, [pc, #592]	; (8003f18 <HAL_GPIO_Init+0x2ac>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d04c      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003ccc:	4a92      	ldr	r2, [pc, #584]	; (8003f18 <HAL_GPIO_Init+0x2ac>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d863      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cd2:	4a92      	ldr	r2, [pc, #584]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d046      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
 8003cd8:	4a90      	ldr	r2, [pc, #576]	; (8003f1c <HAL_GPIO_Init+0x2b0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d85d      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003cde:	2b12      	cmp	r3, #18
 8003ce0:	d82a      	bhi.n	8003d38 <HAL_GPIO_Init+0xcc>
 8003ce2:	2b12      	cmp	r3, #18
 8003ce4:	d859      	bhi.n	8003d9a <HAL_GPIO_Init+0x12e>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_GPIO_Init+0x80>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d67 	.word	0x08003d67
 8003cf0:	08003d41 	.word	0x08003d41
 8003cf4:	08003d53 	.word	0x08003d53
 8003cf8:	08003d95 	.word	0x08003d95
 8003cfc:	08003d9b 	.word	0x08003d9b
 8003d00:	08003d9b 	.word	0x08003d9b
 8003d04:	08003d9b 	.word	0x08003d9b
 8003d08:	08003d9b 	.word	0x08003d9b
 8003d0c:	08003d9b 	.word	0x08003d9b
 8003d10:	08003d9b 	.word	0x08003d9b
 8003d14:	08003d9b 	.word	0x08003d9b
 8003d18:	08003d9b 	.word	0x08003d9b
 8003d1c:	08003d9b 	.word	0x08003d9b
 8003d20:	08003d9b 	.word	0x08003d9b
 8003d24:	08003d9b 	.word	0x08003d9b
 8003d28:	08003d9b 	.word	0x08003d9b
 8003d2c:	08003d9b 	.word	0x08003d9b
 8003d30:	08003d49 	.word	0x08003d49
 8003d34:	08003d5d 	.word	0x08003d5d
 8003d38:	4a79      	ldr	r2, [pc, #484]	; (8003f20 <HAL_GPIO_Init+0x2b4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d3e:	e02c      	b.n	8003d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	623b      	str	r3, [r7, #32]
          break;
 8003d46:	e029      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	623b      	str	r3, [r7, #32]
          break;
 8003d50:	e024      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	3308      	adds	r3, #8
 8003d58:	623b      	str	r3, [r7, #32]
          break;
 8003d5a:	e01f      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	330c      	adds	r3, #12
 8003d62:	623b      	str	r3, [r7, #32]
          break;
 8003d64:	e01a      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d6e:	2304      	movs	r3, #4
 8003d70:	623b      	str	r3, [r7, #32]
          break;
 8003d72:	e013      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d105      	bne.n	8003d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d7c:	2308      	movs	r3, #8
 8003d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	611a      	str	r2, [r3, #16]
          break;
 8003d86:	e009      	b.n	8003d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d88:	2308      	movs	r3, #8
 8003d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	615a      	str	r2, [r3, #20]
          break;
 8003d92:	e003      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d94:	2300      	movs	r3, #0
 8003d96:	623b      	str	r3, [r7, #32]
          break;
 8003d98:	e000      	b.n	8003d9c <HAL_GPIO_Init+0x130>
          break;
 8003d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2bff      	cmp	r3, #255	; 0xff
 8003da0:	d801      	bhi.n	8003da6 <HAL_GPIO_Init+0x13a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	e001      	b.n	8003daa <HAL_GPIO_Init+0x13e>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3304      	adds	r3, #4
 8003daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2bff      	cmp	r3, #255	; 0xff
 8003db0:	d802      	bhi.n	8003db8 <HAL_GPIO_Init+0x14c>
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	e002      	b.n	8003dbe <HAL_GPIO_Init+0x152>
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	3b08      	subs	r3, #8
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	210f      	movs	r1, #15
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	6a39      	ldr	r1, [r7, #32]
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80b1 	beq.w	8003f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dec:	4b4d      	ldr	r3, [pc, #308]	; (8003f24 <HAL_GPIO_Init+0x2b8>)
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	4a4c      	ldr	r2, [pc, #304]	; (8003f24 <HAL_GPIO_Init+0x2b8>)
 8003df2:	f043 0301 	orr.w	r3, r3, #1
 8003df6:	6193      	str	r3, [r2, #24]
 8003df8:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <HAL_GPIO_Init+0x2b8>)
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e04:	4a48      	ldr	r2, [pc, #288]	; (8003f28 <HAL_GPIO_Init+0x2bc>)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	220f      	movs	r2, #15
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a40      	ldr	r2, [pc, #256]	; (8003f2c <HAL_GPIO_Init+0x2c0>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_GPIO_Init+0x1ec>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a3f      	ldr	r2, [pc, #252]	; (8003f30 <HAL_GPIO_Init+0x2c4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00d      	beq.n	8003e54 <HAL_GPIO_Init+0x1e8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a3e      	ldr	r2, [pc, #248]	; (8003f34 <HAL_GPIO_Init+0x2c8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <HAL_GPIO_Init+0x1e4>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a3d      	ldr	r2, [pc, #244]	; (8003f38 <HAL_GPIO_Init+0x2cc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d101      	bne.n	8003e4c <HAL_GPIO_Init+0x1e0>
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e006      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	e004      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e002      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_GPIO_Init+0x1ee>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5c:	f002 0203 	and.w	r2, r2, #3
 8003e60:	0092      	lsls	r2, r2, #2
 8003e62:	4093      	lsls	r3, r2
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e6a:	492f      	ldr	r1, [pc, #188]	; (8003f28 <HAL_GPIO_Init+0x2bc>)
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	3302      	adds	r3, #2
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d006      	beq.n	8003e92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e84:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	492c      	ldr	r1, [pc, #176]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e92:	4b2a      	ldr	r3, [pc, #168]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	4928      	ldr	r1, [pc, #160]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d006      	beq.n	8003eba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003eac:	4b23      	ldr	r3, [pc, #140]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	4922      	ldr	r1, [pc, #136]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	491e      	ldr	r1, [pc, #120]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4918      	ldr	r1, [pc, #96]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	4914      	ldr	r1, [pc, #80]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d021      	beq.n	8003f40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003efc:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	490e      	ldr	r1, [pc, #56]	; (8003f3c <HAL_GPIO_Init+0x2d0>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60cb      	str	r3, [r1, #12]
 8003f08:	e021      	b.n	8003f4e <HAL_GPIO_Init+0x2e2>
 8003f0a:	bf00      	nop
 8003f0c:	10320000 	.word	0x10320000
 8003f10:	10310000 	.word	0x10310000
 8003f14:	10220000 	.word	0x10220000
 8003f18:	10210000 	.word	0x10210000
 8003f1c:	10120000 	.word	0x10120000
 8003f20:	10110000 	.word	0x10110000
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	40010800 	.word	0x40010800
 8003f30:	40010c00 	.word	0x40010c00
 8003f34:	40011000 	.word	0x40011000
 8003f38:	40011400 	.word	0x40011400
 8003f3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_GPIO_Init+0x304>)
 8003f42:	68da      	ldr	r2, [r3, #12]
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	4909      	ldr	r1, [pc, #36]	; (8003f70 <HAL_GPIO_Init+0x304>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	3301      	adds	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f47f ae8e 	bne.w	8003c80 <HAL_GPIO_Init+0x14>
  }
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	372c      	adds	r7, #44	; 0x2c
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bc80      	pop	{r7}
 8003f6e:	4770      	bx	lr
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
 8003f80:	4613      	mov	r3, r2
 8003f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003f90:	e003      	b.n	8003f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003f92:	887b      	ldrh	r3, [r7, #2]
 8003f94:	041a      	lsls	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	611a      	str	r2, [r3, #16]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e26c      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 8087 	beq.w	80040d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fc4:	4b92      	ldr	r3, [pc, #584]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b04      	cmp	r3, #4
 8003fce:	d00c      	beq.n	8003fea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fd0:	4b8f      	ldr	r3, [pc, #572]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d112      	bne.n	8004002 <HAL_RCC_OscConfig+0x5e>
 8003fdc:	4b8c      	ldr	r3, [pc, #560]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fea:	4b89      	ldr	r3, [pc, #548]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d06c      	beq.n	80040d0 <HAL_RCC_OscConfig+0x12c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d168      	bne.n	80040d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e246      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400a:	d106      	bne.n	800401a <HAL_RCC_OscConfig+0x76>
 800400c:	4b80      	ldr	r3, [pc, #512]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a7f      	ldr	r2, [pc, #508]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	e02e      	b.n	8004078 <HAL_RCC_OscConfig+0xd4>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0x98>
 8004022:	4b7b      	ldr	r3, [pc, #492]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a7a      	ldr	r2, [pc, #488]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b78      	ldr	r3, [pc, #480]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a77      	ldr	r2, [pc, #476]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e01d      	b.n	8004078 <HAL_RCC_OscConfig+0xd4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0xbc>
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a71      	ldr	r2, [pc, #452]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800404c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	4b6f      	ldr	r3, [pc, #444]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6e      	ldr	r2, [pc, #440]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0xd4>
 8004060:	4b6b      	ldr	r3, [pc, #428]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6a      	ldr	r2, [pc, #424]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b68      	ldr	r3, [pc, #416]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a67      	ldr	r2, [pc, #412]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004076:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d013      	beq.n	80040a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe f96e 	bl	8002360 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7fe f96a 	bl	8002360 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e1fa      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0xe4>
 80040a6:	e014      	b.n	80040d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a8:	f7fe f95a 	bl	8002360 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fe f956 	bl	8002360 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e1e6      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f0      	bne.n	80040b0 <HAL_RCC_OscConfig+0x10c>
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040de:	4b4c      	ldr	r3, [pc, #304]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00b      	beq.n	8004102 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040ea:	4b49      	ldr	r3, [pc, #292]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d11c      	bne.n	8004130 <HAL_RCC_OscConfig+0x18c>
 80040f6:	4b46      	ldr	r3, [pc, #280]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d116      	bne.n	8004130 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004102:	4b43      	ldr	r3, [pc, #268]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_RCC_OscConfig+0x176>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1ba      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411a:	4b3d      	ldr	r3, [pc, #244]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4939      	ldr	r1, [pc, #228]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800412e:	e03a      	b.n	80041a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <HAL_RCC_OscConfig+0x270>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fe f90f 	bl	8002360 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004146:	f7fe f90b 	bl	8002360 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e19b      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004158:	4b2d      	ldr	r3, [pc, #180]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004164:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4927      	ldr	r1, [pc, #156]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
 8004178:	e015      	b.n	80041a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800417a:	4b26      	ldr	r3, [pc, #152]	; (8004214 <HAL_RCC_OscConfig+0x270>)
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe f8ee 	bl	8002360 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004188:	f7fe f8ea 	bl	8002360 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e17a      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419a:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f0      	bne.n	8004188 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03a      	beq.n	8004228 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d019      	beq.n	80041ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ba:	4b17      	ldr	r3, [pc, #92]	; (8004218 <HAL_RCC_OscConfig+0x274>)
 80041bc:	2201      	movs	r2, #1
 80041be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c0:	f7fe f8ce 	bl	8002360 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c8:	f7fe f8ca 	bl	8002360 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e15a      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041e6:	2001      	movs	r0, #1
 80041e8:	f000 fad8 	bl	800479c <RCC_Delay>
 80041ec:	e01c      	b.n	8004228 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ee:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCC_OscConfig+0x274>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f4:	f7fe f8b4 	bl	8002360 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fa:	e00f      	b.n	800421c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fe f8b0 	bl	8002360 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d908      	bls.n	800421c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e140      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
 800420e:	bf00      	nop
 8004210:	40021000 	.word	0x40021000
 8004214:	42420000 	.word	0x42420000
 8004218:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	4b9e      	ldr	r3, [pc, #632]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e9      	bne.n	80041fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80a6 	beq.w	8004382 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423a:	4b97      	ldr	r3, [pc, #604]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	4b94      	ldr	r3, [pc, #592]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4a93      	ldr	r2, [pc, #588]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	61d3      	str	r3, [r2, #28]
 8004252:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425a:	60bb      	str	r3, [r7, #8]
 800425c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b8e      	ldr	r3, [pc, #568]	; (800449c <HAL_RCC_OscConfig+0x4f8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d118      	bne.n	80042a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426e:	4b8b      	ldr	r3, [pc, #556]	; (800449c <HAL_RCC_OscConfig+0x4f8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a8a      	ldr	r2, [pc, #552]	; (800449c <HAL_RCC_OscConfig+0x4f8>)
 8004274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427a:	f7fe f871 	bl	8002360 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004282:	f7fe f86d 	bl	8002360 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b64      	cmp	r3, #100	; 0x64
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e0fd      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004294:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_OscConfig+0x4f8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d106      	bne.n	80042b6 <HAL_RCC_OscConfig+0x312>
 80042a8:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6213      	str	r3, [r2, #32]
 80042b4:	e02d      	b.n	8004312 <HAL_RCC_OscConfig+0x36e>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x334>
 80042be:	4b76      	ldr	r3, [pc, #472]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	4a75      	ldr	r2, [pc, #468]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	6213      	str	r3, [r2, #32]
 80042ca:	4b73      	ldr	r3, [pc, #460]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a72      	ldr	r2, [pc, #456]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	f023 0304 	bic.w	r3, r3, #4
 80042d4:	6213      	str	r3, [r2, #32]
 80042d6:	e01c      	b.n	8004312 <HAL_RCC_OscConfig+0x36e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d10c      	bne.n	80042fa <HAL_RCC_OscConfig+0x356>
 80042e0:	4b6d      	ldr	r3, [pc, #436]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	4a6c      	ldr	r2, [pc, #432]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	6213      	str	r3, [r2, #32]
 80042ec:	4b6a      	ldr	r3, [pc, #424]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a69      	ldr	r2, [pc, #420]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	6213      	str	r3, [r2, #32]
 80042f8:	e00b      	b.n	8004312 <HAL_RCC_OscConfig+0x36e>
 80042fa:	4b67      	ldr	r3, [pc, #412]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4a66      	ldr	r2, [pc, #408]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004300:	f023 0301 	bic.w	r3, r3, #1
 8004304:	6213      	str	r3, [r2, #32]
 8004306:	4b64      	ldr	r3, [pc, #400]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a63      	ldr	r2, [pc, #396]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d015      	beq.n	8004346 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fe f821 	bl	8002360 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	e00a      	b.n	8004338 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7fe f81d 	bl	8002360 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	4293      	cmp	r3, r2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e0ab      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004338:	4b57      	ldr	r3, [pc, #348]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ee      	beq.n	8004322 <HAL_RCC_OscConfig+0x37e>
 8004344:	e014      	b.n	8004370 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004346:	f7fe f80b 	bl	8002360 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434c:	e00a      	b.n	8004364 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434e:	f7fe f807 	bl	8002360 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	f241 3288 	movw	r2, #5000	; 0x1388
 800435c:	4293      	cmp	r3, r2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e095      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004364:	4b4c      	ldr	r3, [pc, #304]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ee      	bne.n	800434e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d105      	bne.n	8004382 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004376:	4b48      	ldr	r3, [pc, #288]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	4a47      	ldr	r2, [pc, #284]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800437c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004380:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8081 	beq.w	800448e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800438c:	4b42      	ldr	r3, [pc, #264]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	2b08      	cmp	r3, #8
 8004396:	d061      	beq.n	800445c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b02      	cmp	r3, #2
 800439e:	d146      	bne.n	800442e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a0:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <HAL_RCC_OscConfig+0x4fc>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a6:	f7fd ffdb 	bl	8002360 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ae:	f7fd ffd7 	bl	8002360 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e067      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c0:	4b35      	ldr	r3, [pc, #212]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f0      	bne.n	80043ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d4:	d108      	bne.n	80043e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	492d      	ldr	r1, [pc, #180]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e8:	4b2b      	ldr	r3, [pc, #172]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a19      	ldr	r1, [r3, #32]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	430b      	orrs	r3, r1
 80043fa:	4927      	ldr	r1, [pc, #156]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <HAL_RCC_OscConfig+0x4fc>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fd ffab 	bl	8002360 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440e:	f7fd ffa7 	bl	8002360 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e037      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004420:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x46a>
 800442c:	e02f      	b.n	800448e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <HAL_RCC_OscConfig+0x4fc>)
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fd ff94 	bl	8002360 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fd ff90 	bl	8002360 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e020      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1f0      	bne.n	800443c <HAL_RCC_OscConfig+0x498>
 800445a:	e018      	b.n	800448e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e013      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004468:	4b0b      	ldr	r3, [pc, #44]	; (8004498 <HAL_RCC_OscConfig+0x4f4>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	429a      	cmp	r2, r3
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	40007000 	.word	0x40007000
 80044a0:	42420060 	.word	0x42420060

080044a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0d0      	b.n	800465a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 0207 	bic.w	r2, r3, #7
 80044ce:	4965      	ldr	r1, [pc, #404]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b8      	b.n	800465a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b59      	ldr	r3, [pc, #356]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	4a58      	ldr	r2, [pc, #352]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800450a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 800451e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004522:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b50      	ldr	r3, [pc, #320]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494d      	ldr	r1, [pc, #308]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	4313      	orrs	r3, r2
 8004534:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d040      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d115      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07f      	b.n	800465a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	4b41      	ldr	r3, [pc, #260]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e073      	b.n	800465a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06b      	b.n	800465a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004582:	4b39      	ldr	r3, [pc, #228]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f023 0203 	bic.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4936      	ldr	r1, [pc, #216]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004594:	f7fd fee4 	bl	8002360 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fd fee0 	bl	8002360 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e053      	b.n	800465a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 020c 	and.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d1eb      	bne.n	800459c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c4:	4b27      	ldr	r3, [pc, #156]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d210      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 0207 	bic.w	r2, r3, #7
 80045da:	4922      	ldr	r1, [pc, #136]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e032      	b.n	800465a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4916      	ldr	r1, [pc, #88]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490e      	ldr	r1, [pc, #56]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 800462e:	4313      	orrs	r3, r2
 8004630:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f821 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	490a      	ldr	r1, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1cc>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1d0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd fe42 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40022000 	.word	0x40022000
 8004668:	40021000 	.word	0x40021000
 800466c:	08006e20 	.word	0x08006e20
 8004670:	20000000 	.word	0x20000000
 8004674:	20000004 	.word	0x20000004

08004678 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	b490      	push	{r4, r7}
 800467a:	b08a      	sub	sp, #40	; 0x28
 800467c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800467e:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004680:	1d3c      	adds	r4, r7, #4
 8004682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004688:	f240 2301 	movw	r3, #513	; 0x201
 800468c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	2300      	movs	r3, #0
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046a2:	4b22      	ldr	r3, [pc, #136]	; (800472c <HAL_RCC_GetSysClockFreq+0xb4>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d002      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x40>
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d003      	beq.n	80046be <HAL_RCC_GetSysClockFreq+0x46>
 80046b6:	e02d      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ba:	623b      	str	r3, [r7, #32]
      break;
 80046bc:	e02d      	b.n	800471a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	0c9b      	lsrs	r3, r3, #18
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046ca:	4413      	add	r3, r2
 80046cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RCC_GetSysClockFreq+0xb4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c5b      	lsrs	r3, r3, #17
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046ea:	4413      	add	r3, r2
 80046ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f6:	fb02 f203 	mul.w	r2, r2, r3
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
 8004702:	e004      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	4a0b      	ldr	r2, [pc, #44]	; (8004734 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	623b      	str	r3, [r7, #32]
      break;
 8004712:	e002      	b.n	800471a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004716:	623b      	str	r3, [r7, #32]
      break;
 8004718:	bf00      	nop
    }
  }
  return sysclockfreq;
 800471a:	6a3b      	ldr	r3, [r7, #32]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3728      	adds	r7, #40	; 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bc90      	pop	{r4, r7}
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	08006e00 	.word	0x08006e00
 800472c:	40021000 	.word	0x40021000
 8004730:	007a1200 	.word	0x007a1200
 8004734:	003d0900 	.word	0x003d0900

08004738 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <HAL_RCC_GetHCLKFreq+0x10>)
 800473e:	681b      	ldr	r3, [r3, #0]
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	20000000 	.word	0x20000000

0800474c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004750:	f7ff fff2 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 8004754:	4602      	mov	r2, r0
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	4903      	ldr	r1, [pc, #12]	; (8004770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004762:	5ccb      	ldrb	r3, [r1, r3]
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004768:	4618      	mov	r0, r3
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000
 8004770:	08006e30 	.word	0x08006e30

08004774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004778:	f7ff ffde 	bl	8004738 <HAL_RCC_GetHCLKFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	0adb      	lsrs	r3, r3, #11
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4903      	ldr	r1, [pc, #12]	; (8004798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004790:	4618      	mov	r0, r3
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	08006e30 	.word	0x08006e30

0800479c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <RCC_Delay+0x34>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a0a      	ldr	r2, [pc, #40]	; (80047d4 <RCC_Delay+0x38>)
 80047aa:	fba2 2303 	umull	r2, r3, r2, r3
 80047ae:	0a5b      	lsrs	r3, r3, #9
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	fb02 f303 	mul.w	r3, r2, r3
 80047b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047b8:	bf00      	nop
  }
  while (Delay --);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1e5a      	subs	r2, r3, #1
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f9      	bne.n	80047b8 <RCC_Delay+0x1c>
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bc80      	pop	{r7}
 80047ce:	4770      	bx	lr
 80047d0:	20000000 	.word	0x20000000
 80047d4:	10624dd3 	.word	0x10624dd3

080047d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d07d      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047f4:	2300      	movs	r3, #0
 80047f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047f8:	4b4f      	ldr	r3, [pc, #316]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10d      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004804:	4b4c      	ldr	r3, [pc, #304]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4a4b      	ldr	r2, [pc, #300]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800480a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800480e:	61d3      	str	r3, [r2, #28]
 8004810:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004820:	4b46      	ldr	r3, [pc, #280]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d118      	bne.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800482c:	4b43      	ldr	r3, [pc, #268]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a42      	ldr	r2, [pc, #264]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004838:	f7fd fd92 	bl	8002360 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	e008      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004840:	f7fd fd8e 	bl	8002360 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b64      	cmp	r3, #100	; 0x64
 800484c:	d901      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e06d      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	4b3a      	ldr	r3, [pc, #232]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800485e:	4b36      	ldr	r3, [pc, #216]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004866:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d02e      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	429a      	cmp	r2, r3
 800487a:	d027      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800487c:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004884:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004886:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800488c:	4b2c      	ldr	r3, [pc, #176]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004892:	4a29      	ldr	r2, [pc, #164]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d014      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a2:	f7fd fd5d 	bl	8002360 <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a8:	e00a      	b.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fd fd59 	bl	8002360 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e036      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c0:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ee      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048cc:	4b1a      	ldr	r3, [pc, #104]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4917      	ldr	r1, [pc, #92]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048de:	7dfb      	ldrb	r3, [r7, #23]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d105      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e4:	4b14      	ldr	r3, [pc, #80]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	4a13      	ldr	r2, [pc, #76]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	490b      	ldr	r1, [pc, #44]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	4904      	ldr	r1, [pc, #16]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	40007000 	.word	0x40007000
 8004940:	42420440 	.word	0x42420440

08004944 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004944:	b590      	push	{r4, r7, lr}
 8004946:	b08d      	sub	sp, #52	; 0x34
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800494c:	4b5a      	ldr	r3, [pc, #360]	; (8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800494e:	f107 040c 	add.w	r4, r7, #12
 8004952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004958:	f240 2301 	movw	r3, #513	; 0x201
 800495c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	627b      	str	r3, [r7, #36]	; 0x24
 8004962:	2300      	movs	r3, #0
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004966:	2300      	movs	r3, #0
 8004968:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	2300      	movs	r3, #0
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b10      	cmp	r3, #16
 8004976:	d00a      	beq.n	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b10      	cmp	r3, #16
 800497c:	f200 8091 	bhi.w	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d04c      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d07c      	beq.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800498c:	e089      	b.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800498e:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004994:	4b49      	ldr	r3, [pc, #292]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8082 	beq.w	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	0c9b      	lsrs	r3, r3, #18
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80049ae:	4413      	add	r3, r2
 80049b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049b4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d018      	beq.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049c0:	4b3e      	ldr	r3, [pc, #248]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	0c5b      	lsrs	r3, r3, #17
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80049ce:	4413      	add	r3, r2
 80049d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80049e0:	4a37      	ldr	r2, [pc, #220]	; (8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049f2:	6a3b      	ldr	r3, [r7, #32]
 80049f4:	4a33      	ldr	r2, [pc, #204]	; (8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80049f6:	fb02 f303 	mul.w	r3, r2, r3
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049fc:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a08:	d102      	bne.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a0e:	e04a      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	085b      	lsrs	r3, r3, #1
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a1e:	e042      	b.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8004a20:	4b26      	ldr	r3, [pc, #152]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a30:	d108      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8004a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a42:	e01f      	b.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4e:	d109      	bne.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004a50:	4b1a      	ldr	r3, [pc, #104]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8004a5c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a62:	e00f      	b.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a6e:	d11c      	bne.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004a70:	4b12      	ldr	r3, [pc, #72]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d016      	beq.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8004a7c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a82:	e012      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8004a84:	e011      	b.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a86:	f7ff fe75 	bl	8004774 <HAL_RCC_GetPCLK2Freq>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0b9b      	lsrs	r3, r3, #14
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004aa0:	e004      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e002      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e000      	b.n	8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8004aaa:	bf00      	nop
    }
  }
  return (frequency);
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3734      	adds	r7, #52	; 0x34
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd90      	pop	{r4, r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	08006e10 	.word	0x08006e10
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	007a1200 	.word	0x007a1200
 8004ac4:	003d0900 	.word	0x003d0900
 8004ac8:	aaaaaaab 	.word	0xaaaaaaab

08004acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e041      	b.n	8004b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd fa94 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f000 fa70 	bl	8004ff0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d001      	beq.n	8004b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e03a      	b.n	8004bfa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a18      	ldr	r2, [pc, #96]	; (8004c04 <HAL_TIM_Base_Start_IT+0x98>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0x58>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bae:	d009      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0x58>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <HAL_TIM_Base_Start_IT+0x9c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_TIM_Base_Start_IT+0x58>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <HAL_TIM_Base_Start_IT+0xa0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d111      	bne.n	8004be8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b06      	cmp	r3, #6
 8004bd4:	d010      	beq.n	8004bf8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0201 	orr.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be6:	e007      	b.n	8004bf8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800

08004c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0202 	mvn.w	r2, #2
 8004c3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f9b1 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9a4 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f9b3 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d122      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d11b      	bne.n	8004cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0204 	mvn.w	r2, #4
 8004c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2202      	movs	r2, #2
 8004c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d003      	beq.n	8004cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f987 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004cac:	e005      	b.n	8004cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f97a 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f989 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d122      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d11b      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0208 	mvn.w	r2, #8
 8004ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f95d 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004d00:	e005      	b.n	8004d0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f950 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f95f 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d122      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d11b      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0210 	mvn.w	r2, #16
 8004d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f933 	bl	8004fba <HAL_TIM_IC_CaptureCallback>
 8004d54:	e005      	b.n	8004d62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f926 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f935 	bl	8004fcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d10e      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d107      	bne.n	8004d94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f06f 0201 	mvn.w	r2, #1
 8004d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fd f986 	bl	80020a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9e:	2b80      	cmp	r3, #128	; 0x80
 8004da0:	d10e      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dac:	2b80      	cmp	r3, #128	; 0x80
 8004dae:	d107      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fa77 	bl	80052ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8f9 	bl	8004fde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d10e      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b20      	cmp	r3, #32
 8004e06:	d107      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0220 	mvn.w	r2, #32
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa42 	bl	800529c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIM_ConfigClockSource+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e0b3      	b.n	8004fa0 <HAL_TIM_ConfigClockSource+0x180>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e5e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e70:	d03e      	beq.n	8004ef0 <HAL_TIM_ConfigClockSource+0xd0>
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	f200 8087 	bhi.w	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	f000 8085 	beq.w	8004f8c <HAL_TIM_ConfigClockSource+0x16c>
 8004e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e86:	d87f      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004e88:	2b70      	cmp	r3, #112	; 0x70
 8004e8a:	d01a      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0xa2>
 8004e8c:	2b70      	cmp	r3, #112	; 0x70
 8004e8e:	d87b      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004e90:	2b60      	cmp	r3, #96	; 0x60
 8004e92:	d050      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x116>
 8004e94:	2b60      	cmp	r3, #96	; 0x60
 8004e96:	d877      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004e98:	2b50      	cmp	r3, #80	; 0x50
 8004e9a:	d03c      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0xf6>
 8004e9c:	2b50      	cmp	r3, #80	; 0x50
 8004e9e:	d873      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004ea0:	2b40      	cmp	r3, #64	; 0x40
 8004ea2:	d058      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x136>
 8004ea4:	2b40      	cmp	r3, #64	; 0x40
 8004ea6:	d86f      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004ea8:	2b30      	cmp	r3, #48	; 0x30
 8004eaa:	d064      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x156>
 8004eac:	2b30      	cmp	r3, #48	; 0x30
 8004eae:	d86b      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d060      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x156>
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d867      	bhi.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d05c      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x156>
 8004ebc:	2b10      	cmp	r3, #16
 8004ebe:	d05a      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ec0:	e062      	b.n	8004f88 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f000 f966 	bl	80051a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ee4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	609a      	str	r2, [r3, #8]
      break;
 8004eee:	e04e      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6818      	ldr	r0, [r3, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	6899      	ldr	r1, [r3, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f000 f94f 	bl	80051a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f12:	609a      	str	r2, [r3, #8]
      break;
 8004f14:	e03b      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 f8c6 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2150      	movs	r1, #80	; 0x50
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f91d 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004f34:	e02b      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 f8e4 	bl	8005110 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2160      	movs	r1, #96	; 0x60
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f90d 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004f54:	e01b      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	6859      	ldr	r1, [r3, #4]
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	461a      	mov	r2, r3
 8004f64:	f000 f8a6 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2140      	movs	r1, #64	; 0x40
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f000 f8fd 	bl	800516e <TIM_ITRx_SetConfig>
      break;
 8004f74:	e00b      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 f8f4 	bl	800516e <TIM_ITRx_SetConfig>
        break;
 8004f86:	e002      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f8c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a29      	ldr	r2, [pc, #164]	; (80050a8 <TIM_Base_SetConfig+0xb8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00b      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500e:	d007      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a26      	ldr	r2, [pc, #152]	; (80050ac <TIM_Base_SetConfig+0xbc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_Base_SetConfig+0x30>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a25      	ldr	r2, [pc, #148]	; (80050b0 <TIM_Base_SetConfig+0xc0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d108      	bne.n	8005032 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <TIM_Base_SetConfig+0xb8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00b      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d007      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <TIM_Base_SetConfig+0xbc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d003      	beq.n	8005052 <TIM_Base_SetConfig+0x62>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <TIM_Base_SetConfig+0xc0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	4313      	orrs	r3, r2
 8005070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <TIM_Base_SetConfig+0xb8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d103      	bne.n	8005098 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	615a      	str	r2, [r3, #20]
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f023 0201 	bic.w	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	bf00      	nop
 8005108:	371c      	adds	r7, #28
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f023 0210 	bic.w	r2, r3, #16
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800513a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	031b      	lsls	r3, r3, #12
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800514c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	bc80      	pop	{r7}
 800516c:	4770      	bx	lr

0800516e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	f043 0307 	orr.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b087      	sub	sp, #28
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	609a      	str	r2, [r3, #8]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d101      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f4:	2302      	movs	r3, #2
 80051f6:	e046      	b.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00e      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005244:	d009      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a12      	ldr	r2, [pc, #72]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a10      	ldr	r2, [pc, #64]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10c      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4313      	orrs	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800

0800529c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e03f      	b.n	8005352 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d106      	bne.n	80052ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc ff3a 	bl	8002160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2224      	movs	r2, #36	; 0x24
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005302:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fbed 	bl	8005ae4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695a      	ldr	r2, [r3, #20]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005328:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005338:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800535a:	b480      	push	{r7}
 800535c:	b085      	sub	sp, #20
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	4613      	mov	r3, r2
 8005366:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b20      	cmp	r3, #32
 8005372:	d130      	bne.n	80053d6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_UART_Transmit_IT+0x26>
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e029      	b.n	80053d8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UART_Transmit_IT+0x38>
 800538e:	2302      	movs	r3, #2
 8005390:	e022      	b.n	80053d8 <HAL_UART_Transmit_IT+0x7e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2221      	movs	r2, #33	; 0x21
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e000      	b.n	80053d8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80053d6:	2302      	movs	r3, #2
  }
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b084      	sub	sp, #16
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d11d      	bne.n	8005438 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d002      	beq.n	8005408 <HAL_UART_Receive_IT+0x26>
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e016      	b.n	800543a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_UART_Receive_IT+0x38>
 8005416:	2302      	movs	r3, #2
 8005418:	e00f      	b.n	800543a <HAL_UART_Receive_IT+0x58>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	461a      	mov	r2, r3
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f9cf 	bl	80057d2 <UART_Start_Receive_IT>
 8005434:	4603      	mov	r3, r0
 8005436:	e000      	b.n	800543a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005438:	2302      	movs	r3, #2
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005464:	2300      	movs	r3, #0
 8005466:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10d      	bne.n	8005496 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_UART_IRQHandler+0x52>
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa7f 	bl	8005992 <UART_Receive_IT>
      return;
 8005494:	e17b      	b.n	800578e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80b1 	beq.w	8005600 <HAL_UART_IRQHandler+0x1bc>
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d105      	bne.n	80054b4 <HAL_UART_IRQHandler+0x70>
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 80a6 	beq.w	8005600 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00a      	beq.n	80054d4 <HAL_UART_IRQHandler+0x90>
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00a      	beq.n	80054f4 <HAL_UART_IRQHandler+0xb0>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	f043 0202 	orr.w	r2, r3, #2
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_UART_IRQHandler+0xd0>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	f043 0204 	orr.w	r2, r3, #4
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	f003 0308 	and.w	r3, r3, #8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00f      	beq.n	800553e <HAL_UART_IRQHandler+0xfa>
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_UART_IRQHandler+0xee>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d005      	beq.n	800553e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005536:	f043 0208 	orr.w	r2, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 811e 	beq.w	8005784 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <HAL_UART_IRQHandler+0x11e>
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa18 	bl	8005992 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d102      	bne.n	800558a <HAL_UART_IRQHandler+0x146>
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d031      	beq.n	80055ee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f95a 	bl	8005844 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d023      	beq.n	80055e6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	695a      	ldr	r2, [r3, #20]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d013      	beq.n	80055de <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	4a76      	ldr	r2, [pc, #472]	; (8005794 <HAL_UART_IRQHandler+0x350>)
 80055bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fadc 	bl	8003b80 <HAL_DMA_Abort_IT>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d016      	beq.n	80055fc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055d8:	4610      	mov	r0, r2
 80055da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e00e      	b.n	80055fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8e3 	bl	80057aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	e00a      	b.n	80055fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f8df 	bl	80057aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ec:	e006      	b.n	80055fc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f8db 	bl	80057aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055fa:	e0c3      	b.n	8005784 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055fc:	bf00      	nop
    return;
 80055fe:	e0c1      	b.n	8005784 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	2b01      	cmp	r3, #1
 8005606:	f040 80a1 	bne.w	800574c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 809b 	beq.w	800574c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8095 	beq.w	800574c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d04e      	beq.n	80056e4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005650:	8a3b      	ldrh	r3, [r7, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8098 	beq.w	8005788 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800565c:	8a3a      	ldrh	r2, [r7, #16]
 800565e:	429a      	cmp	r2, r3
 8005660:	f080 8092 	bcs.w	8005788 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8a3a      	ldrh	r2, [r7, #16]
 8005668:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b20      	cmp	r3, #32
 8005672:	d02b      	beq.n	80056cc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005682:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0201 	bic.w	r2, r2, #1
 8005692:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695a      	ldr	r2, [r3, #20]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056a2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0210 	bic.w	r2, r2, #16
 80056c0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fa1f 	bl	8003b0a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	b29b      	uxth	r3, r3
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f86d 	bl	80057bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056e2:	e051      	b.n	8005788 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d047      	beq.n	800578c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80056fc:	8a7b      	ldrh	r3, [r7, #18]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d044      	beq.n	800578c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005710:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0210 	bic.w	r2, r2, #16
 800573e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005740:	8a7b      	ldrh	r3, [r7, #18]
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f839 	bl	80057bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800574a:	e01f      	b.n	800578c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_UART_IRQHandler+0x324>
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f8af 	bl	80058c4 <UART_Transmit_IT>
    return;
 8005766:	e012      	b.n	800578e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00d      	beq.n	800578e <HAL_UART_IRQHandler+0x34a>
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005778:	2b00      	cmp	r3, #0
 800577a:	d008      	beq.n	800578e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f8f0 	bl	8005962 <UART_EndTransmit_IT>
    return;
 8005782:	e004      	b.n	800578e <HAL_UART_IRQHandler+0x34a>
    return;
 8005784:	bf00      	nop
 8005786:	e002      	b.n	800578e <HAL_UART_IRQHandler+0x34a>
      return;
 8005788:	bf00      	nop
 800578a:	e000      	b.n	800578e <HAL_UART_IRQHandler+0x34a>
      return;
 800578c:	bf00      	nop
  }
}
 800578e:	3728      	adds	r7, #40	; 0x28
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}
 8005794:	0800589d 	.word	0x0800589d

08005798 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057b2:	bf00      	nop
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	4613      	mov	r3, r2
 80057de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	88fa      	ldrh	r2, [r7, #6]
 80057f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2222      	movs	r2, #34	; 0x22
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005816:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0220 	orr.w	r2, r2, #32
 8005836:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800585a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0201 	bic.w	r2, r2, #1
 800586a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005870:	2b01      	cmp	r3, #1
 8005872:	d107      	bne.n	8005884 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0210 	bic.w	r2, r2, #16
 8005882:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7ff ff77 	bl	80057aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b21      	cmp	r3, #33	; 0x21
 80058d6:	d13e      	bne.n	8005956 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e0:	d114      	bne.n	800590c <UART_Transmit_IT+0x48>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d110      	bne.n	800590c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a1b      	ldr	r3, [r3, #32]
 8005904:	1c9a      	adds	r2, r3, #2
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]
 800590a:	e008      	b.n	800591e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6211      	str	r1, [r2, #32]
 8005916:	781a      	ldrb	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29b      	uxth	r3, r3
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	4619      	mov	r1, r3
 800592c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10f      	bne.n	8005952 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005940:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005950:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	e000      	b.n	8005958 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005956:	2302      	movs	r3, #2
  }
}
 8005958:	4618      	mov	r0, r3
 800595a:	3714      	adds	r7, #20
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b082      	sub	sp, #8
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68da      	ldr	r2, [r3, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005978:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ff08 	bl	8005798 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b22      	cmp	r3, #34	; 0x22
 80059a4:	f040 8099 	bne.w	8005ada <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b0:	d117      	bne.n	80059e2 <UART_Receive_IT+0x50>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d113      	bne.n	80059e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	629a      	str	r2, [r3, #40]	; 0x28
 80059e0:	e026      	b.n	8005a30 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f4:	d007      	beq.n	8005a06 <UART_Receive_IT+0x74>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <UART_Receive_IT+0x82>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e008      	b.n	8005a26 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a20:	b2da      	uxtb	r2, r3
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d148      	bne.n	8005ad6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0220 	bic.w	r2, r2, #32
 8005a52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695a      	ldr	r2, [r3, #20]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d123      	bne.n	8005acc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0210 	bic.w	r2, r2, #16
 8005a98:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d10a      	bne.n	8005abe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f7ff fe79 	bl	80057bc <HAL_UARTEx_RxEventCallback>
 8005aca:	e002      	b.n	8005ad2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fc fb9b 	bl	8002208 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e002      	b.n	8005adc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e000      	b.n	8005adc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005ada:	2302      	movs	r3, #2
  }
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3718      	adds	r7, #24
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b1e:	f023 030c 	bic.w	r3, r3, #12
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6812      	ldr	r2, [r2, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699a      	ldr	r2, [r3, #24]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a2c      	ldr	r2, [pc, #176]	; (8005bf8 <UART_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d103      	bne.n	8005b54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b4c:	f7fe fe12 	bl	8004774 <HAL_RCC_GetPCLK2Freq>
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	e002      	b.n	8005b5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b54:	f7fe fdfa 	bl	800474c <HAL_RCC_GetPCLK1Freq>
 8005b58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009a      	lsls	r2, r3, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <UART_SetConfig+0x118>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	0119      	lsls	r1, r3, #4
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	009a      	lsls	r2, r3, #2
 8005b84:	441a      	add	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <UART_SetConfig+0x118>)
 8005b92:	fba3 0302 	umull	r0, r3, r3, r2
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2064      	movs	r0, #100	; 0x64
 8005b9a:	fb00 f303 	mul.w	r3, r0, r3
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	3332      	adds	r3, #50	; 0x32
 8005ba4:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <UART_SetConfig+0x118>)
 8005ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8005baa:	095b      	lsrs	r3, r3, #5
 8005bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb0:	4419      	add	r1, r3
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009a      	lsls	r2, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc8:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <UART_SetConfig+0x118>)
 8005bca:	fba3 0302 	umull	r0, r3, r3, r2
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	2064      	movs	r0, #100	; 0x64
 8005bd2:	fb00 f303 	mul.w	r3, r0, r3
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	3332      	adds	r3, #50	; 0x32
 8005bdc:	4a07      	ldr	r2, [pc, #28]	; (8005bfc <UART_SetConfig+0x118>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	440a      	add	r2, r1
 8005bee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	51eb851f 	.word	0x51eb851f

08005c00 <__errno>:
 8005c00:	4b01      	ldr	r3, [pc, #4]	; (8005c08 <__errno+0x8>)
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	2000000c 	.word	0x2000000c

08005c0c <__libc_init_array>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	2600      	movs	r6, #0
 8005c10:	4d0c      	ldr	r5, [pc, #48]	; (8005c44 <__libc_init_array+0x38>)
 8005c12:	4c0d      	ldr	r4, [pc, #52]	; (8005c48 <__libc_init_array+0x3c>)
 8005c14:	1b64      	subs	r4, r4, r5
 8005c16:	10a4      	asrs	r4, r4, #2
 8005c18:	42a6      	cmp	r6, r4
 8005c1a:	d109      	bne.n	8005c30 <__libc_init_array+0x24>
 8005c1c:	f001 f8da 	bl	8006dd4 <_init>
 8005c20:	2600      	movs	r6, #0
 8005c22:	4d0a      	ldr	r5, [pc, #40]	; (8005c4c <__libc_init_array+0x40>)
 8005c24:	4c0a      	ldr	r4, [pc, #40]	; (8005c50 <__libc_init_array+0x44>)
 8005c26:	1b64      	subs	r4, r4, r5
 8005c28:	10a4      	asrs	r4, r4, #2
 8005c2a:	42a6      	cmp	r6, r4
 8005c2c:	d105      	bne.n	8005c3a <__libc_init_array+0x2e>
 8005c2e:	bd70      	pop	{r4, r5, r6, pc}
 8005c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c34:	4798      	blx	r3
 8005c36:	3601      	adds	r6, #1
 8005c38:	e7ee      	b.n	8005c18 <__libc_init_array+0xc>
 8005c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3e:	4798      	blx	r3
 8005c40:	3601      	adds	r6, #1
 8005c42:	e7f2      	b.n	8005c2a <__libc_init_array+0x1e>
 8005c44:	08007084 	.word	0x08007084
 8005c48:	08007084 	.word	0x08007084
 8005c4c:	08007084 	.word	0x08007084
 8005c50:	08007088 	.word	0x08007088

08005c54 <malloc>:
 8005c54:	4b02      	ldr	r3, [pc, #8]	; (8005c60 <malloc+0xc>)
 8005c56:	4601      	mov	r1, r0
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	f000 b857 	b.w	8005d0c <_malloc_r>
 8005c5e:	bf00      	nop
 8005c60:	2000000c 	.word	0x2000000c

08005c64 <memset>:
 8005c64:	4603      	mov	r3, r0
 8005c66:	4402      	add	r2, r0
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <memset+0xa>
 8005c6c:	4770      	bx	lr
 8005c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c72:	e7f9      	b.n	8005c68 <memset+0x4>

08005c74 <_free_r>:
 8005c74:	b538      	push	{r3, r4, r5, lr}
 8005c76:	4605      	mov	r5, r0
 8005c78:	2900      	cmp	r1, #0
 8005c7a:	d043      	beq.n	8005d04 <_free_r+0x90>
 8005c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c80:	1f0c      	subs	r4, r1, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	bfb8      	it	lt
 8005c86:	18e4      	addlt	r4, r4, r3
 8005c88:	f000 f9c6 	bl	8006018 <__malloc_lock>
 8005c8c:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <_free_r+0x94>)
 8005c8e:	6813      	ldr	r3, [r2, #0]
 8005c90:	4610      	mov	r0, r2
 8005c92:	b933      	cbnz	r3, 8005ca2 <_free_r+0x2e>
 8005c94:	6063      	str	r3, [r4, #4]
 8005c96:	6014      	str	r4, [r2, #0]
 8005c98:	4628      	mov	r0, r5
 8005c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c9e:	f000 b9c1 	b.w	8006024 <__malloc_unlock>
 8005ca2:	42a3      	cmp	r3, r4
 8005ca4:	d90a      	bls.n	8005cbc <_free_r+0x48>
 8005ca6:	6821      	ldr	r1, [r4, #0]
 8005ca8:	1862      	adds	r2, r4, r1
 8005caa:	4293      	cmp	r3, r2
 8005cac:	bf01      	itttt	eq
 8005cae:	681a      	ldreq	r2, [r3, #0]
 8005cb0:	685b      	ldreq	r3, [r3, #4]
 8005cb2:	1852      	addeq	r2, r2, r1
 8005cb4:	6022      	streq	r2, [r4, #0]
 8005cb6:	6063      	str	r3, [r4, #4]
 8005cb8:	6004      	str	r4, [r0, #0]
 8005cba:	e7ed      	b.n	8005c98 <_free_r+0x24>
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	b10b      	cbz	r3, 8005cc6 <_free_r+0x52>
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	d9fa      	bls.n	8005cbc <_free_r+0x48>
 8005cc6:	6811      	ldr	r1, [r2, #0]
 8005cc8:	1850      	adds	r0, r2, r1
 8005cca:	42a0      	cmp	r0, r4
 8005ccc:	d10b      	bne.n	8005ce6 <_free_r+0x72>
 8005cce:	6820      	ldr	r0, [r4, #0]
 8005cd0:	4401      	add	r1, r0
 8005cd2:	1850      	adds	r0, r2, r1
 8005cd4:	4283      	cmp	r3, r0
 8005cd6:	6011      	str	r1, [r2, #0]
 8005cd8:	d1de      	bne.n	8005c98 <_free_r+0x24>
 8005cda:	6818      	ldr	r0, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	4401      	add	r1, r0
 8005ce0:	6011      	str	r1, [r2, #0]
 8005ce2:	6053      	str	r3, [r2, #4]
 8005ce4:	e7d8      	b.n	8005c98 <_free_r+0x24>
 8005ce6:	d902      	bls.n	8005cee <_free_r+0x7a>
 8005ce8:	230c      	movs	r3, #12
 8005cea:	602b      	str	r3, [r5, #0]
 8005cec:	e7d4      	b.n	8005c98 <_free_r+0x24>
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	1821      	adds	r1, r4, r0
 8005cf2:	428b      	cmp	r3, r1
 8005cf4:	bf01      	itttt	eq
 8005cf6:	6819      	ldreq	r1, [r3, #0]
 8005cf8:	685b      	ldreq	r3, [r3, #4]
 8005cfa:	1809      	addeq	r1, r1, r0
 8005cfc:	6021      	streq	r1, [r4, #0]
 8005cfe:	6063      	str	r3, [r4, #4]
 8005d00:	6054      	str	r4, [r2, #4]
 8005d02:	e7c9      	b.n	8005c98 <_free_r+0x24>
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	bf00      	nop
 8005d08:	20000114 	.word	0x20000114

08005d0c <_malloc_r>:
 8005d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d0e:	1ccd      	adds	r5, r1, #3
 8005d10:	f025 0503 	bic.w	r5, r5, #3
 8005d14:	3508      	adds	r5, #8
 8005d16:	2d0c      	cmp	r5, #12
 8005d18:	bf38      	it	cc
 8005d1a:	250c      	movcc	r5, #12
 8005d1c:	2d00      	cmp	r5, #0
 8005d1e:	4606      	mov	r6, r0
 8005d20:	db01      	blt.n	8005d26 <_malloc_r+0x1a>
 8005d22:	42a9      	cmp	r1, r5
 8005d24:	d903      	bls.n	8005d2e <_malloc_r+0x22>
 8005d26:	230c      	movs	r3, #12
 8005d28:	6033      	str	r3, [r6, #0]
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2e:	f000 f973 	bl	8006018 <__malloc_lock>
 8005d32:	4921      	ldr	r1, [pc, #132]	; (8005db8 <_malloc_r+0xac>)
 8005d34:	680a      	ldr	r2, [r1, #0]
 8005d36:	4614      	mov	r4, r2
 8005d38:	b99c      	cbnz	r4, 8005d62 <_malloc_r+0x56>
 8005d3a:	4f20      	ldr	r7, [pc, #128]	; (8005dbc <_malloc_r+0xb0>)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	b923      	cbnz	r3, 8005d4a <_malloc_r+0x3e>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4630      	mov	r0, r6
 8005d44:	f000 f83c 	bl	8005dc0 <_sbrk_r>
 8005d48:	6038      	str	r0, [r7, #0]
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4630      	mov	r0, r6
 8005d4e:	f000 f837 	bl	8005dc0 <_sbrk_r>
 8005d52:	1c43      	adds	r3, r0, #1
 8005d54:	d123      	bne.n	8005d9e <_malloc_r+0x92>
 8005d56:	230c      	movs	r3, #12
 8005d58:	4630      	mov	r0, r6
 8005d5a:	6033      	str	r3, [r6, #0]
 8005d5c:	f000 f962 	bl	8006024 <__malloc_unlock>
 8005d60:	e7e3      	b.n	8005d2a <_malloc_r+0x1e>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	1b5b      	subs	r3, r3, r5
 8005d66:	d417      	bmi.n	8005d98 <_malloc_r+0x8c>
 8005d68:	2b0b      	cmp	r3, #11
 8005d6a:	d903      	bls.n	8005d74 <_malloc_r+0x68>
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	441c      	add	r4, r3
 8005d70:	6025      	str	r5, [r4, #0]
 8005d72:	e004      	b.n	8005d7e <_malloc_r+0x72>
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	42a2      	cmp	r2, r4
 8005d78:	bf0c      	ite	eq
 8005d7a:	600b      	streq	r3, [r1, #0]
 8005d7c:	6053      	strne	r3, [r2, #4]
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f000 f950 	bl	8006024 <__malloc_unlock>
 8005d84:	f104 000b 	add.w	r0, r4, #11
 8005d88:	1d23      	adds	r3, r4, #4
 8005d8a:	f020 0007 	bic.w	r0, r0, #7
 8005d8e:	1ac2      	subs	r2, r0, r3
 8005d90:	d0cc      	beq.n	8005d2c <_malloc_r+0x20>
 8005d92:	1a1b      	subs	r3, r3, r0
 8005d94:	50a3      	str	r3, [r4, r2]
 8005d96:	e7c9      	b.n	8005d2c <_malloc_r+0x20>
 8005d98:	4622      	mov	r2, r4
 8005d9a:	6864      	ldr	r4, [r4, #4]
 8005d9c:	e7cc      	b.n	8005d38 <_malloc_r+0x2c>
 8005d9e:	1cc4      	adds	r4, r0, #3
 8005da0:	f024 0403 	bic.w	r4, r4, #3
 8005da4:	42a0      	cmp	r0, r4
 8005da6:	d0e3      	beq.n	8005d70 <_malloc_r+0x64>
 8005da8:	1a21      	subs	r1, r4, r0
 8005daa:	4630      	mov	r0, r6
 8005dac:	f000 f808 	bl	8005dc0 <_sbrk_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d1dd      	bne.n	8005d70 <_malloc_r+0x64>
 8005db4:	e7cf      	b.n	8005d56 <_malloc_r+0x4a>
 8005db6:	bf00      	nop
 8005db8:	20000114 	.word	0x20000114
 8005dbc:	20000118 	.word	0x20000118

08005dc0 <_sbrk_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	4d05      	ldr	r5, [pc, #20]	; (8005ddc <_sbrk_r+0x1c>)
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	4608      	mov	r0, r1
 8005dca:	602b      	str	r3, [r5, #0]
 8005dcc:	f7fc f84e 	bl	8001e6c <_sbrk>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_sbrk_r+0x1a>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_sbrk_r+0x1a>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	200003ec 	.word	0x200003ec

08005de0 <strtok>:
 8005de0:	4b16      	ldr	r3, [pc, #88]	; (8005e3c <strtok+0x5c>)
 8005de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005de6:	681f      	ldr	r7, [r3, #0]
 8005de8:	4605      	mov	r5, r0
 8005dea:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005dec:	460e      	mov	r6, r1
 8005dee:	b9ec      	cbnz	r4, 8005e2c <strtok+0x4c>
 8005df0:	2050      	movs	r0, #80	; 0x50
 8005df2:	f7ff ff2f 	bl	8005c54 <malloc>
 8005df6:	4602      	mov	r2, r0
 8005df8:	65b8      	str	r0, [r7, #88]	; 0x58
 8005dfa:	b920      	cbnz	r0, 8005e06 <strtok+0x26>
 8005dfc:	2157      	movs	r1, #87	; 0x57
 8005dfe:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <strtok+0x60>)
 8005e00:	4810      	ldr	r0, [pc, #64]	; (8005e44 <strtok+0x64>)
 8005e02:	f000 f8d9 	bl	8005fb8 <__assert_func>
 8005e06:	e9c0 4400 	strd	r4, r4, [r0]
 8005e0a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005e0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005e12:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005e16:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005e1a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005e1e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005e22:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005e26:	6184      	str	r4, [r0, #24]
 8005e28:	7704      	strb	r4, [r0, #28]
 8005e2a:	6244      	str	r4, [r0, #36]	; 0x24
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e32:	2301      	movs	r3, #1
 8005e34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e38:	f000 b806 	b.w	8005e48 <__strtok_r>
 8005e3c:	2000000c 	.word	0x2000000c
 8005e40:	08006e3c 	.word	0x08006e3c
 8005e44:	08006e53 	.word	0x08006e53

08005e48 <__strtok_r>:
 8005e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4a:	b908      	cbnz	r0, 8005e50 <__strtok_r+0x8>
 8005e4c:	6810      	ldr	r0, [r2, #0]
 8005e4e:	b188      	cbz	r0, 8005e74 <__strtok_r+0x2c>
 8005e50:	4604      	mov	r4, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	4620      	mov	r0, r4
 8005e56:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005e5a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005e5e:	b91e      	cbnz	r6, 8005e68 <__strtok_r+0x20>
 8005e60:	b965      	cbnz	r5, 8005e7c <__strtok_r+0x34>
 8005e62:	4628      	mov	r0, r5
 8005e64:	6015      	str	r5, [r2, #0]
 8005e66:	e005      	b.n	8005e74 <__strtok_r+0x2c>
 8005e68:	42b5      	cmp	r5, r6
 8005e6a:	d1f6      	bne.n	8005e5a <__strtok_r+0x12>
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1f0      	bne.n	8005e52 <__strtok_r+0xa>
 8005e70:	6014      	str	r4, [r2, #0]
 8005e72:	7003      	strb	r3, [r0, #0]
 8005e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e76:	461c      	mov	r4, r3
 8005e78:	e00c      	b.n	8005e94 <__strtok_r+0x4c>
 8005e7a:	b915      	cbnz	r5, 8005e82 <__strtok_r+0x3a>
 8005e7c:	460e      	mov	r6, r1
 8005e7e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005e82:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005e86:	42ab      	cmp	r3, r5
 8005e88:	d1f7      	bne.n	8005e7a <__strtok_r+0x32>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f3      	beq.n	8005e76 <__strtok_r+0x2e>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005e94:	6014      	str	r4, [r2, #0]
 8005e96:	e7ed      	b.n	8005e74 <__strtok_r+0x2c>

08005e98 <_strtol_l.isra.0>:
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e9e:	4686      	mov	lr, r0
 8005ea0:	d001      	beq.n	8005ea6 <_strtol_l.isra.0+0xe>
 8005ea2:	2b24      	cmp	r3, #36	; 0x24
 8005ea4:	d906      	bls.n	8005eb4 <_strtol_l.isra.0+0x1c>
 8005ea6:	f7ff feab 	bl	8005c00 <__errno>
 8005eaa:	2316      	movs	r3, #22
 8005eac:	6003      	str	r3, [r0, #0]
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb4:	468c      	mov	ip, r1
 8005eb6:	4e3a      	ldr	r6, [pc, #232]	; (8005fa0 <_strtol_l.isra.0+0x108>)
 8005eb8:	4660      	mov	r0, ip
 8005eba:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005ebe:	5da5      	ldrb	r5, [r4, r6]
 8005ec0:	f015 0508 	ands.w	r5, r5, #8
 8005ec4:	d1f8      	bne.n	8005eb8 <_strtol_l.isra.0+0x20>
 8005ec6:	2c2d      	cmp	r4, #45	; 0x2d
 8005ec8:	d133      	bne.n	8005f32 <_strtol_l.isra.0+0x9a>
 8005eca:	f04f 0801 	mov.w	r8, #1
 8005ece:	f89c 4000 	ldrb.w	r4, [ip]
 8005ed2:	f100 0c02 	add.w	ip, r0, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d05d      	beq.n	8005f96 <_strtol_l.isra.0+0xfe>
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d10c      	bne.n	8005ef8 <_strtol_l.isra.0+0x60>
 8005ede:	2c30      	cmp	r4, #48	; 0x30
 8005ee0:	d10a      	bne.n	8005ef8 <_strtol_l.isra.0+0x60>
 8005ee2:	f89c 0000 	ldrb.w	r0, [ip]
 8005ee6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005eea:	2858      	cmp	r0, #88	; 0x58
 8005eec:	d14e      	bne.n	8005f8c <_strtol_l.isra.0+0xf4>
 8005eee:	2310      	movs	r3, #16
 8005ef0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005ef4:	f10c 0c02 	add.w	ip, ip, #2
 8005ef8:	2500      	movs	r5, #0
 8005efa:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005efe:	3f01      	subs	r7, #1
 8005f00:	fbb7 f9f3 	udiv	r9, r7, r3
 8005f04:	4628      	mov	r0, r5
 8005f06:	fb03 7a19 	mls	sl, r3, r9, r7
 8005f0a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005f0e:	2e09      	cmp	r6, #9
 8005f10:	d818      	bhi.n	8005f44 <_strtol_l.isra.0+0xac>
 8005f12:	4634      	mov	r4, r6
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	dd24      	ble.n	8005f62 <_strtol_l.isra.0+0xca>
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	db1f      	blt.n	8005f5c <_strtol_l.isra.0+0xc4>
 8005f1c:	4581      	cmp	r9, r0
 8005f1e:	d31d      	bcc.n	8005f5c <_strtol_l.isra.0+0xc4>
 8005f20:	d101      	bne.n	8005f26 <_strtol_l.isra.0+0x8e>
 8005f22:	45a2      	cmp	sl, r4
 8005f24:	db1a      	blt.n	8005f5c <_strtol_l.isra.0+0xc4>
 8005f26:	2501      	movs	r5, #1
 8005f28:	fb00 4003 	mla	r0, r0, r3, r4
 8005f2c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005f30:	e7eb      	b.n	8005f0a <_strtol_l.isra.0+0x72>
 8005f32:	2c2b      	cmp	r4, #43	; 0x2b
 8005f34:	bf08      	it	eq
 8005f36:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005f3a:	46a8      	mov	r8, r5
 8005f3c:	bf08      	it	eq
 8005f3e:	f100 0c02 	addeq.w	ip, r0, #2
 8005f42:	e7c8      	b.n	8005ed6 <_strtol_l.isra.0+0x3e>
 8005f44:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005f48:	2e19      	cmp	r6, #25
 8005f4a:	d801      	bhi.n	8005f50 <_strtol_l.isra.0+0xb8>
 8005f4c:	3c37      	subs	r4, #55	; 0x37
 8005f4e:	e7e1      	b.n	8005f14 <_strtol_l.isra.0+0x7c>
 8005f50:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005f54:	2e19      	cmp	r6, #25
 8005f56:	d804      	bhi.n	8005f62 <_strtol_l.isra.0+0xca>
 8005f58:	3c57      	subs	r4, #87	; 0x57
 8005f5a:	e7db      	b.n	8005f14 <_strtol_l.isra.0+0x7c>
 8005f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f60:	e7e4      	b.n	8005f2c <_strtol_l.isra.0+0x94>
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	da08      	bge.n	8005f78 <_strtol_l.isra.0+0xe0>
 8005f66:	2322      	movs	r3, #34	; 0x22
 8005f68:	4638      	mov	r0, r7
 8005f6a:	f8ce 3000 	str.w	r3, [lr]
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	d09e      	beq.n	8005eb0 <_strtol_l.isra.0+0x18>
 8005f72:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005f76:	e007      	b.n	8005f88 <_strtol_l.isra.0+0xf0>
 8005f78:	f1b8 0f00 	cmp.w	r8, #0
 8005f7c:	d000      	beq.n	8005f80 <_strtol_l.isra.0+0xe8>
 8005f7e:	4240      	negs	r0, r0
 8005f80:	2a00      	cmp	r2, #0
 8005f82:	d095      	beq.n	8005eb0 <_strtol_l.isra.0+0x18>
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	d1f4      	bne.n	8005f72 <_strtol_l.isra.0+0xda>
 8005f88:	6011      	str	r1, [r2, #0]
 8005f8a:	e791      	b.n	8005eb0 <_strtol_l.isra.0+0x18>
 8005f8c:	2430      	movs	r4, #48	; 0x30
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1b2      	bne.n	8005ef8 <_strtol_l.isra.0+0x60>
 8005f92:	2308      	movs	r3, #8
 8005f94:	e7b0      	b.n	8005ef8 <_strtol_l.isra.0+0x60>
 8005f96:	2c30      	cmp	r4, #48	; 0x30
 8005f98:	d0a3      	beq.n	8005ee2 <_strtol_l.isra.0+0x4a>
 8005f9a:	230a      	movs	r3, #10
 8005f9c:	e7ac      	b.n	8005ef8 <_strtol_l.isra.0+0x60>
 8005f9e:	bf00      	nop
 8005fa0:	08006ef1 	.word	0x08006ef1

08005fa4 <strtol>:
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	460a      	mov	r2, r1
 8005fa8:	4601      	mov	r1, r0
 8005faa:	4802      	ldr	r0, [pc, #8]	; (8005fb4 <strtol+0x10>)
 8005fac:	6800      	ldr	r0, [r0, #0]
 8005fae:	f7ff bf73 	b.w	8005e98 <_strtol_l.isra.0>
 8005fb2:	bf00      	nop
 8005fb4:	2000000c 	.word	0x2000000c

08005fb8 <__assert_func>:
 8005fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005fba:	4614      	mov	r4, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b09      	ldr	r3, [pc, #36]	; (8005fe4 <__assert_func+0x2c>)
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68d8      	ldr	r0, [r3, #12]
 8005fc6:	b14c      	cbz	r4, 8005fdc <__assert_func+0x24>
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <__assert_func+0x30>)
 8005fca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005fce:	9100      	str	r1, [sp, #0]
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	4906      	ldr	r1, [pc, #24]	; (8005fec <__assert_func+0x34>)
 8005fd4:	f000 f80e 	bl	8005ff4 <fiprintf>
 8005fd8:	f000 fbd8 	bl	800678c <abort>
 8005fdc:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <__assert_func+0x38>)
 8005fde:	461c      	mov	r4, r3
 8005fe0:	e7f3      	b.n	8005fca <__assert_func+0x12>
 8005fe2:	bf00      	nop
 8005fe4:	2000000c 	.word	0x2000000c
 8005fe8:	08006eb4 	.word	0x08006eb4
 8005fec:	08006ec1 	.word	0x08006ec1
 8005ff0:	08006eef 	.word	0x08006eef

08005ff4 <fiprintf>:
 8005ff4:	b40e      	push	{r1, r2, r3}
 8005ff6:	b503      	push	{r0, r1, lr}
 8005ff8:	4601      	mov	r1, r0
 8005ffa:	ab03      	add	r3, sp, #12
 8005ffc:	4805      	ldr	r0, [pc, #20]	; (8006014 <fiprintf+0x20>)
 8005ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006002:	6800      	ldr	r0, [r0, #0]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f000 f83b 	bl	8006080 <_vfiprintf_r>
 800600a:	b002      	add	sp, #8
 800600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006010:	b003      	add	sp, #12
 8006012:	4770      	bx	lr
 8006014:	2000000c 	.word	0x2000000c

08006018 <__malloc_lock>:
 8006018:	4801      	ldr	r0, [pc, #4]	; (8006020 <__malloc_lock+0x8>)
 800601a:	f000 bd77 	b.w	8006b0c <__retarget_lock_acquire_recursive>
 800601e:	bf00      	nop
 8006020:	200003f4 	.word	0x200003f4

08006024 <__malloc_unlock>:
 8006024:	4801      	ldr	r0, [pc, #4]	; (800602c <__malloc_unlock+0x8>)
 8006026:	f000 bd72 	b.w	8006b0e <__retarget_lock_release_recursive>
 800602a:	bf00      	nop
 800602c:	200003f4 	.word	0x200003f4

08006030 <__sfputc_r>:
 8006030:	6893      	ldr	r3, [r2, #8]
 8006032:	b410      	push	{r4}
 8006034:	3b01      	subs	r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	6093      	str	r3, [r2, #8]
 800603a:	da07      	bge.n	800604c <__sfputc_r+0x1c>
 800603c:	6994      	ldr	r4, [r2, #24]
 800603e:	42a3      	cmp	r3, r4
 8006040:	db01      	blt.n	8006046 <__sfputc_r+0x16>
 8006042:	290a      	cmp	r1, #10
 8006044:	d102      	bne.n	800604c <__sfputc_r+0x1c>
 8006046:	bc10      	pop	{r4}
 8006048:	f000 bae0 	b.w	800660c <__swbuf_r>
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	1c58      	adds	r0, r3, #1
 8006050:	6010      	str	r0, [r2, #0]
 8006052:	7019      	strb	r1, [r3, #0]
 8006054:	4608      	mov	r0, r1
 8006056:	bc10      	pop	{r4}
 8006058:	4770      	bx	lr

0800605a <__sfputs_r>:
 800605a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605c:	4606      	mov	r6, r0
 800605e:	460f      	mov	r7, r1
 8006060:	4614      	mov	r4, r2
 8006062:	18d5      	adds	r5, r2, r3
 8006064:	42ac      	cmp	r4, r5
 8006066:	d101      	bne.n	800606c <__sfputs_r+0x12>
 8006068:	2000      	movs	r0, #0
 800606a:	e007      	b.n	800607c <__sfputs_r+0x22>
 800606c:	463a      	mov	r2, r7
 800606e:	4630      	mov	r0, r6
 8006070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006074:	f7ff ffdc 	bl	8006030 <__sfputc_r>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d1f3      	bne.n	8006064 <__sfputs_r+0xa>
 800607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006080 <_vfiprintf_r>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	460d      	mov	r5, r1
 8006086:	4614      	mov	r4, r2
 8006088:	4698      	mov	r8, r3
 800608a:	4606      	mov	r6, r0
 800608c:	b09d      	sub	sp, #116	; 0x74
 800608e:	b118      	cbz	r0, 8006098 <_vfiprintf_r+0x18>
 8006090:	6983      	ldr	r3, [r0, #24]
 8006092:	b90b      	cbnz	r3, 8006098 <_vfiprintf_r+0x18>
 8006094:	f000 fc9c 	bl	80069d0 <__sinit>
 8006098:	4b89      	ldr	r3, [pc, #548]	; (80062c0 <_vfiprintf_r+0x240>)
 800609a:	429d      	cmp	r5, r3
 800609c:	d11b      	bne.n	80060d6 <_vfiprintf_r+0x56>
 800609e:	6875      	ldr	r5, [r6, #4]
 80060a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060a2:	07d9      	lsls	r1, r3, #31
 80060a4:	d405      	bmi.n	80060b2 <_vfiprintf_r+0x32>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	059a      	lsls	r2, r3, #22
 80060aa:	d402      	bmi.n	80060b2 <_vfiprintf_r+0x32>
 80060ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ae:	f000 fd2d 	bl	8006b0c <__retarget_lock_acquire_recursive>
 80060b2:	89ab      	ldrh	r3, [r5, #12]
 80060b4:	071b      	lsls	r3, r3, #28
 80060b6:	d501      	bpl.n	80060bc <_vfiprintf_r+0x3c>
 80060b8:	692b      	ldr	r3, [r5, #16]
 80060ba:	b9eb      	cbnz	r3, 80060f8 <_vfiprintf_r+0x78>
 80060bc:	4629      	mov	r1, r5
 80060be:	4630      	mov	r0, r6
 80060c0:	f000 faf6 	bl	80066b0 <__swsetup_r>
 80060c4:	b1c0      	cbz	r0, 80060f8 <_vfiprintf_r+0x78>
 80060c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060c8:	07dc      	lsls	r4, r3, #31
 80060ca:	d50e      	bpl.n	80060ea <_vfiprintf_r+0x6a>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	b01d      	add	sp, #116	; 0x74
 80060d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d6:	4b7b      	ldr	r3, [pc, #492]	; (80062c4 <_vfiprintf_r+0x244>)
 80060d8:	429d      	cmp	r5, r3
 80060da:	d101      	bne.n	80060e0 <_vfiprintf_r+0x60>
 80060dc:	68b5      	ldr	r5, [r6, #8]
 80060de:	e7df      	b.n	80060a0 <_vfiprintf_r+0x20>
 80060e0:	4b79      	ldr	r3, [pc, #484]	; (80062c8 <_vfiprintf_r+0x248>)
 80060e2:	429d      	cmp	r5, r3
 80060e4:	bf08      	it	eq
 80060e6:	68f5      	ldreq	r5, [r6, #12]
 80060e8:	e7da      	b.n	80060a0 <_vfiprintf_r+0x20>
 80060ea:	89ab      	ldrh	r3, [r5, #12]
 80060ec:	0598      	lsls	r0, r3, #22
 80060ee:	d4ed      	bmi.n	80060cc <_vfiprintf_r+0x4c>
 80060f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060f2:	f000 fd0c 	bl	8006b0e <__retarget_lock_release_recursive>
 80060f6:	e7e9      	b.n	80060cc <_vfiprintf_r+0x4c>
 80060f8:	2300      	movs	r3, #0
 80060fa:	9309      	str	r3, [sp, #36]	; 0x24
 80060fc:	2320      	movs	r3, #32
 80060fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006102:	2330      	movs	r3, #48	; 0x30
 8006104:	f04f 0901 	mov.w	r9, #1
 8006108:	f8cd 800c 	str.w	r8, [sp, #12]
 800610c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80062cc <_vfiprintf_r+0x24c>
 8006110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006114:	4623      	mov	r3, r4
 8006116:	469a      	mov	sl, r3
 8006118:	f813 2b01 	ldrb.w	r2, [r3], #1
 800611c:	b10a      	cbz	r2, 8006122 <_vfiprintf_r+0xa2>
 800611e:	2a25      	cmp	r2, #37	; 0x25
 8006120:	d1f9      	bne.n	8006116 <_vfiprintf_r+0x96>
 8006122:	ebba 0b04 	subs.w	fp, sl, r4
 8006126:	d00b      	beq.n	8006140 <_vfiprintf_r+0xc0>
 8006128:	465b      	mov	r3, fp
 800612a:	4622      	mov	r2, r4
 800612c:	4629      	mov	r1, r5
 800612e:	4630      	mov	r0, r6
 8006130:	f7ff ff93 	bl	800605a <__sfputs_r>
 8006134:	3001      	adds	r0, #1
 8006136:	f000 80aa 	beq.w	800628e <_vfiprintf_r+0x20e>
 800613a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613c:	445a      	add	r2, fp
 800613e:	9209      	str	r2, [sp, #36]	; 0x24
 8006140:	f89a 3000 	ldrb.w	r3, [sl]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80a2 	beq.w	800628e <_vfiprintf_r+0x20e>
 800614a:	2300      	movs	r3, #0
 800614c:	f04f 32ff 	mov.w	r2, #4294967295
 8006150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006154:	f10a 0a01 	add.w	sl, sl, #1
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006160:	931a      	str	r3, [sp, #104]	; 0x68
 8006162:	4654      	mov	r4, sl
 8006164:	2205      	movs	r2, #5
 8006166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800616a:	4858      	ldr	r0, [pc, #352]	; (80062cc <_vfiprintf_r+0x24c>)
 800616c:	f000 fd34 	bl	8006bd8 <memchr>
 8006170:	9a04      	ldr	r2, [sp, #16]
 8006172:	b9d8      	cbnz	r0, 80061ac <_vfiprintf_r+0x12c>
 8006174:	06d1      	lsls	r1, r2, #27
 8006176:	bf44      	itt	mi
 8006178:	2320      	movmi	r3, #32
 800617a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800617e:	0713      	lsls	r3, r2, #28
 8006180:	bf44      	itt	mi
 8006182:	232b      	movmi	r3, #43	; 0x2b
 8006184:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006188:	f89a 3000 	ldrb.w	r3, [sl]
 800618c:	2b2a      	cmp	r3, #42	; 0x2a
 800618e:	d015      	beq.n	80061bc <_vfiprintf_r+0x13c>
 8006190:	4654      	mov	r4, sl
 8006192:	2000      	movs	r0, #0
 8006194:	f04f 0c0a 	mov.w	ip, #10
 8006198:	9a07      	ldr	r2, [sp, #28]
 800619a:	4621      	mov	r1, r4
 800619c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061a0:	3b30      	subs	r3, #48	; 0x30
 80061a2:	2b09      	cmp	r3, #9
 80061a4:	d94e      	bls.n	8006244 <_vfiprintf_r+0x1c4>
 80061a6:	b1b0      	cbz	r0, 80061d6 <_vfiprintf_r+0x156>
 80061a8:	9207      	str	r2, [sp, #28]
 80061aa:	e014      	b.n	80061d6 <_vfiprintf_r+0x156>
 80061ac:	eba0 0308 	sub.w	r3, r0, r8
 80061b0:	fa09 f303 	lsl.w	r3, r9, r3
 80061b4:	4313      	orrs	r3, r2
 80061b6:	46a2      	mov	sl, r4
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	e7d2      	b.n	8006162 <_vfiprintf_r+0xe2>
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	1d19      	adds	r1, r3, #4
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	9103      	str	r1, [sp, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	bfbb      	ittet	lt
 80061c8:	425b      	neglt	r3, r3
 80061ca:	f042 0202 	orrlt.w	r2, r2, #2
 80061ce:	9307      	strge	r3, [sp, #28]
 80061d0:	9307      	strlt	r3, [sp, #28]
 80061d2:	bfb8      	it	lt
 80061d4:	9204      	strlt	r2, [sp, #16]
 80061d6:	7823      	ldrb	r3, [r4, #0]
 80061d8:	2b2e      	cmp	r3, #46	; 0x2e
 80061da:	d10c      	bne.n	80061f6 <_vfiprintf_r+0x176>
 80061dc:	7863      	ldrb	r3, [r4, #1]
 80061de:	2b2a      	cmp	r3, #42	; 0x2a
 80061e0:	d135      	bne.n	800624e <_vfiprintf_r+0x1ce>
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	3402      	adds	r4, #2
 80061e6:	1d1a      	adds	r2, r3, #4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	9203      	str	r2, [sp, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bfb8      	it	lt
 80061f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80061f4:	9305      	str	r3, [sp, #20]
 80061f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062dc <_vfiprintf_r+0x25c>
 80061fa:	2203      	movs	r2, #3
 80061fc:	4650      	mov	r0, sl
 80061fe:	7821      	ldrb	r1, [r4, #0]
 8006200:	f000 fcea 	bl	8006bd8 <memchr>
 8006204:	b140      	cbz	r0, 8006218 <_vfiprintf_r+0x198>
 8006206:	2340      	movs	r3, #64	; 0x40
 8006208:	eba0 000a 	sub.w	r0, r0, sl
 800620c:	fa03 f000 	lsl.w	r0, r3, r0
 8006210:	9b04      	ldr	r3, [sp, #16]
 8006212:	3401      	adds	r4, #1
 8006214:	4303      	orrs	r3, r0
 8006216:	9304      	str	r3, [sp, #16]
 8006218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800621c:	2206      	movs	r2, #6
 800621e:	482c      	ldr	r0, [pc, #176]	; (80062d0 <_vfiprintf_r+0x250>)
 8006220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006224:	f000 fcd8 	bl	8006bd8 <memchr>
 8006228:	2800      	cmp	r0, #0
 800622a:	d03f      	beq.n	80062ac <_vfiprintf_r+0x22c>
 800622c:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <_vfiprintf_r+0x254>)
 800622e:	bb1b      	cbnz	r3, 8006278 <_vfiprintf_r+0x1f8>
 8006230:	9b03      	ldr	r3, [sp, #12]
 8006232:	3307      	adds	r3, #7
 8006234:	f023 0307 	bic.w	r3, r3, #7
 8006238:	3308      	adds	r3, #8
 800623a:	9303      	str	r3, [sp, #12]
 800623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623e:	443b      	add	r3, r7
 8006240:	9309      	str	r3, [sp, #36]	; 0x24
 8006242:	e767      	b.n	8006114 <_vfiprintf_r+0x94>
 8006244:	460c      	mov	r4, r1
 8006246:	2001      	movs	r0, #1
 8006248:	fb0c 3202 	mla	r2, ip, r2, r3
 800624c:	e7a5      	b.n	800619a <_vfiprintf_r+0x11a>
 800624e:	2300      	movs	r3, #0
 8006250:	f04f 0c0a 	mov.w	ip, #10
 8006254:	4619      	mov	r1, r3
 8006256:	3401      	adds	r4, #1
 8006258:	9305      	str	r3, [sp, #20]
 800625a:	4620      	mov	r0, r4
 800625c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006260:	3a30      	subs	r2, #48	; 0x30
 8006262:	2a09      	cmp	r2, #9
 8006264:	d903      	bls.n	800626e <_vfiprintf_r+0x1ee>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0c5      	beq.n	80061f6 <_vfiprintf_r+0x176>
 800626a:	9105      	str	r1, [sp, #20]
 800626c:	e7c3      	b.n	80061f6 <_vfiprintf_r+0x176>
 800626e:	4604      	mov	r4, r0
 8006270:	2301      	movs	r3, #1
 8006272:	fb0c 2101 	mla	r1, ip, r1, r2
 8006276:	e7f0      	b.n	800625a <_vfiprintf_r+0x1da>
 8006278:	ab03      	add	r3, sp, #12
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	462a      	mov	r2, r5
 800627e:	4630      	mov	r0, r6
 8006280:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <_vfiprintf_r+0x258>)
 8006282:	a904      	add	r1, sp, #16
 8006284:	f3af 8000 	nop.w
 8006288:	4607      	mov	r7, r0
 800628a:	1c78      	adds	r0, r7, #1
 800628c:	d1d6      	bne.n	800623c <_vfiprintf_r+0x1bc>
 800628e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006290:	07d9      	lsls	r1, r3, #31
 8006292:	d405      	bmi.n	80062a0 <_vfiprintf_r+0x220>
 8006294:	89ab      	ldrh	r3, [r5, #12]
 8006296:	059a      	lsls	r2, r3, #22
 8006298:	d402      	bmi.n	80062a0 <_vfiprintf_r+0x220>
 800629a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800629c:	f000 fc37 	bl	8006b0e <__retarget_lock_release_recursive>
 80062a0:	89ab      	ldrh	r3, [r5, #12]
 80062a2:	065b      	lsls	r3, r3, #25
 80062a4:	f53f af12 	bmi.w	80060cc <_vfiprintf_r+0x4c>
 80062a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062aa:	e711      	b.n	80060d0 <_vfiprintf_r+0x50>
 80062ac:	ab03      	add	r3, sp, #12
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	462a      	mov	r2, r5
 80062b2:	4630      	mov	r0, r6
 80062b4:	4b08      	ldr	r3, [pc, #32]	; (80062d8 <_vfiprintf_r+0x258>)
 80062b6:	a904      	add	r1, sp, #16
 80062b8:	f000 f882 	bl	80063c0 <_printf_i>
 80062bc:	e7e4      	b.n	8006288 <_vfiprintf_r+0x208>
 80062be:	bf00      	nop
 80062c0:	08007044 	.word	0x08007044
 80062c4:	08007064 	.word	0x08007064
 80062c8:	08007024 	.word	0x08007024
 80062cc:	08006ff1 	.word	0x08006ff1
 80062d0:	08006ffb 	.word	0x08006ffb
 80062d4:	00000000 	.word	0x00000000
 80062d8:	0800605b 	.word	0x0800605b
 80062dc:	08006ff7 	.word	0x08006ff7

080062e0 <_printf_common>:
 80062e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062e4:	4616      	mov	r6, r2
 80062e6:	4699      	mov	r9, r3
 80062e8:	688a      	ldr	r2, [r1, #8]
 80062ea:	690b      	ldr	r3, [r1, #16]
 80062ec:	4607      	mov	r7, r0
 80062ee:	4293      	cmp	r3, r2
 80062f0:	bfb8      	it	lt
 80062f2:	4613      	movlt	r3, r2
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062fa:	460c      	mov	r4, r1
 80062fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006300:	b10a      	cbz	r2, 8006306 <_printf_common+0x26>
 8006302:	3301      	adds	r3, #1
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	0699      	lsls	r1, r3, #26
 800630a:	bf42      	ittt	mi
 800630c:	6833      	ldrmi	r3, [r6, #0]
 800630e:	3302      	addmi	r3, #2
 8006310:	6033      	strmi	r3, [r6, #0]
 8006312:	6825      	ldr	r5, [r4, #0]
 8006314:	f015 0506 	ands.w	r5, r5, #6
 8006318:	d106      	bne.n	8006328 <_printf_common+0x48>
 800631a:	f104 0a19 	add.w	sl, r4, #25
 800631e:	68e3      	ldr	r3, [r4, #12]
 8006320:	6832      	ldr	r2, [r6, #0]
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	42ab      	cmp	r3, r5
 8006326:	dc28      	bgt.n	800637a <_printf_common+0x9a>
 8006328:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800632c:	1e13      	subs	r3, r2, #0
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	bf18      	it	ne
 8006332:	2301      	movne	r3, #1
 8006334:	0692      	lsls	r2, r2, #26
 8006336:	d42d      	bmi.n	8006394 <_printf_common+0xb4>
 8006338:	4649      	mov	r1, r9
 800633a:	4638      	mov	r0, r7
 800633c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006340:	47c0      	blx	r8
 8006342:	3001      	adds	r0, #1
 8006344:	d020      	beq.n	8006388 <_printf_common+0xa8>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	68e5      	ldr	r5, [r4, #12]
 800634a:	f003 0306 	and.w	r3, r3, #6
 800634e:	2b04      	cmp	r3, #4
 8006350:	bf18      	it	ne
 8006352:	2500      	movne	r5, #0
 8006354:	6832      	ldr	r2, [r6, #0]
 8006356:	f04f 0600 	mov.w	r6, #0
 800635a:	68a3      	ldr	r3, [r4, #8]
 800635c:	bf08      	it	eq
 800635e:	1aad      	subeq	r5, r5, r2
 8006360:	6922      	ldr	r2, [r4, #16]
 8006362:	bf08      	it	eq
 8006364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006368:	4293      	cmp	r3, r2
 800636a:	bfc4      	itt	gt
 800636c:	1a9b      	subgt	r3, r3, r2
 800636e:	18ed      	addgt	r5, r5, r3
 8006370:	341a      	adds	r4, #26
 8006372:	42b5      	cmp	r5, r6
 8006374:	d11a      	bne.n	80063ac <_printf_common+0xcc>
 8006376:	2000      	movs	r0, #0
 8006378:	e008      	b.n	800638c <_printf_common+0xac>
 800637a:	2301      	movs	r3, #1
 800637c:	4652      	mov	r2, sl
 800637e:	4649      	mov	r1, r9
 8006380:	4638      	mov	r0, r7
 8006382:	47c0      	blx	r8
 8006384:	3001      	adds	r0, #1
 8006386:	d103      	bne.n	8006390 <_printf_common+0xb0>
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	3501      	adds	r5, #1
 8006392:	e7c4      	b.n	800631e <_printf_common+0x3e>
 8006394:	2030      	movs	r0, #48	; 0x30
 8006396:	18e1      	adds	r1, r4, r3
 8006398:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063a2:	4422      	add	r2, r4
 80063a4:	3302      	adds	r3, #2
 80063a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063aa:	e7c5      	b.n	8006338 <_printf_common+0x58>
 80063ac:	2301      	movs	r3, #1
 80063ae:	4622      	mov	r2, r4
 80063b0:	4649      	mov	r1, r9
 80063b2:	4638      	mov	r0, r7
 80063b4:	47c0      	blx	r8
 80063b6:	3001      	adds	r0, #1
 80063b8:	d0e6      	beq.n	8006388 <_printf_common+0xa8>
 80063ba:	3601      	adds	r6, #1
 80063bc:	e7d9      	b.n	8006372 <_printf_common+0x92>
	...

080063c0 <_printf_i>:
 80063c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063c4:	460c      	mov	r4, r1
 80063c6:	7e27      	ldrb	r7, [r4, #24]
 80063c8:	4691      	mov	r9, r2
 80063ca:	2f78      	cmp	r7, #120	; 0x78
 80063cc:	4680      	mov	r8, r0
 80063ce:	469a      	mov	sl, r3
 80063d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d6:	d807      	bhi.n	80063e8 <_printf_i+0x28>
 80063d8:	2f62      	cmp	r7, #98	; 0x62
 80063da:	d80a      	bhi.n	80063f2 <_printf_i+0x32>
 80063dc:	2f00      	cmp	r7, #0
 80063de:	f000 80d9 	beq.w	8006594 <_printf_i+0x1d4>
 80063e2:	2f58      	cmp	r7, #88	; 0x58
 80063e4:	f000 80a4 	beq.w	8006530 <_printf_i+0x170>
 80063e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063f0:	e03a      	b.n	8006468 <_printf_i+0xa8>
 80063f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063f6:	2b15      	cmp	r3, #21
 80063f8:	d8f6      	bhi.n	80063e8 <_printf_i+0x28>
 80063fa:	a001      	add	r0, pc, #4	; (adr r0, 8006400 <_printf_i+0x40>)
 80063fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006400:	08006459 	.word	0x08006459
 8006404:	0800646d 	.word	0x0800646d
 8006408:	080063e9 	.word	0x080063e9
 800640c:	080063e9 	.word	0x080063e9
 8006410:	080063e9 	.word	0x080063e9
 8006414:	080063e9 	.word	0x080063e9
 8006418:	0800646d 	.word	0x0800646d
 800641c:	080063e9 	.word	0x080063e9
 8006420:	080063e9 	.word	0x080063e9
 8006424:	080063e9 	.word	0x080063e9
 8006428:	080063e9 	.word	0x080063e9
 800642c:	0800657b 	.word	0x0800657b
 8006430:	0800649d 	.word	0x0800649d
 8006434:	0800655d 	.word	0x0800655d
 8006438:	080063e9 	.word	0x080063e9
 800643c:	080063e9 	.word	0x080063e9
 8006440:	0800659d 	.word	0x0800659d
 8006444:	080063e9 	.word	0x080063e9
 8006448:	0800649d 	.word	0x0800649d
 800644c:	080063e9 	.word	0x080063e9
 8006450:	080063e9 	.word	0x080063e9
 8006454:	08006565 	.word	0x08006565
 8006458:	680b      	ldr	r3, [r1, #0]
 800645a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800645e:	1d1a      	adds	r2, r3, #4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	600a      	str	r2, [r1, #0]
 8006464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006468:	2301      	movs	r3, #1
 800646a:	e0a4      	b.n	80065b6 <_printf_i+0x1f6>
 800646c:	6825      	ldr	r5, [r4, #0]
 800646e:	6808      	ldr	r0, [r1, #0]
 8006470:	062e      	lsls	r6, r5, #24
 8006472:	f100 0304 	add.w	r3, r0, #4
 8006476:	d50a      	bpl.n	800648e <_printf_i+0xce>
 8006478:	6805      	ldr	r5, [r0, #0]
 800647a:	600b      	str	r3, [r1, #0]
 800647c:	2d00      	cmp	r5, #0
 800647e:	da03      	bge.n	8006488 <_printf_i+0xc8>
 8006480:	232d      	movs	r3, #45	; 0x2d
 8006482:	426d      	negs	r5, r5
 8006484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006488:	230a      	movs	r3, #10
 800648a:	485e      	ldr	r0, [pc, #376]	; (8006604 <_printf_i+0x244>)
 800648c:	e019      	b.n	80064c2 <_printf_i+0x102>
 800648e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006492:	6805      	ldr	r5, [r0, #0]
 8006494:	600b      	str	r3, [r1, #0]
 8006496:	bf18      	it	ne
 8006498:	b22d      	sxthne	r5, r5
 800649a:	e7ef      	b.n	800647c <_printf_i+0xbc>
 800649c:	680b      	ldr	r3, [r1, #0]
 800649e:	6825      	ldr	r5, [r4, #0]
 80064a0:	1d18      	adds	r0, r3, #4
 80064a2:	6008      	str	r0, [r1, #0]
 80064a4:	0628      	lsls	r0, r5, #24
 80064a6:	d501      	bpl.n	80064ac <_printf_i+0xec>
 80064a8:	681d      	ldr	r5, [r3, #0]
 80064aa:	e002      	b.n	80064b2 <_printf_i+0xf2>
 80064ac:	0669      	lsls	r1, r5, #25
 80064ae:	d5fb      	bpl.n	80064a8 <_printf_i+0xe8>
 80064b0:	881d      	ldrh	r5, [r3, #0]
 80064b2:	2f6f      	cmp	r7, #111	; 0x6f
 80064b4:	bf0c      	ite	eq
 80064b6:	2308      	moveq	r3, #8
 80064b8:	230a      	movne	r3, #10
 80064ba:	4852      	ldr	r0, [pc, #328]	; (8006604 <_printf_i+0x244>)
 80064bc:	2100      	movs	r1, #0
 80064be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064c2:	6866      	ldr	r6, [r4, #4]
 80064c4:	2e00      	cmp	r6, #0
 80064c6:	bfa8      	it	ge
 80064c8:	6821      	ldrge	r1, [r4, #0]
 80064ca:	60a6      	str	r6, [r4, #8]
 80064cc:	bfa4      	itt	ge
 80064ce:	f021 0104 	bicge.w	r1, r1, #4
 80064d2:	6021      	strge	r1, [r4, #0]
 80064d4:	b90d      	cbnz	r5, 80064da <_printf_i+0x11a>
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	d04d      	beq.n	8006576 <_printf_i+0x1b6>
 80064da:	4616      	mov	r6, r2
 80064dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80064e0:	fb03 5711 	mls	r7, r3, r1, r5
 80064e4:	5dc7      	ldrb	r7, [r0, r7]
 80064e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064ea:	462f      	mov	r7, r5
 80064ec:	42bb      	cmp	r3, r7
 80064ee:	460d      	mov	r5, r1
 80064f0:	d9f4      	bls.n	80064dc <_printf_i+0x11c>
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d10b      	bne.n	800650e <_printf_i+0x14e>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	07df      	lsls	r7, r3, #31
 80064fa:	d508      	bpl.n	800650e <_printf_i+0x14e>
 80064fc:	6923      	ldr	r3, [r4, #16]
 80064fe:	6861      	ldr	r1, [r4, #4]
 8006500:	4299      	cmp	r1, r3
 8006502:	bfde      	ittt	le
 8006504:	2330      	movle	r3, #48	; 0x30
 8006506:	f806 3c01 	strble.w	r3, [r6, #-1]
 800650a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800650e:	1b92      	subs	r2, r2, r6
 8006510:	6122      	str	r2, [r4, #16]
 8006512:	464b      	mov	r3, r9
 8006514:	4621      	mov	r1, r4
 8006516:	4640      	mov	r0, r8
 8006518:	f8cd a000 	str.w	sl, [sp]
 800651c:	aa03      	add	r2, sp, #12
 800651e:	f7ff fedf 	bl	80062e0 <_printf_common>
 8006522:	3001      	adds	r0, #1
 8006524:	d14c      	bne.n	80065c0 <_printf_i+0x200>
 8006526:	f04f 30ff 	mov.w	r0, #4294967295
 800652a:	b004      	add	sp, #16
 800652c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006530:	4834      	ldr	r0, [pc, #208]	; (8006604 <_printf_i+0x244>)
 8006532:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006536:	680e      	ldr	r6, [r1, #0]
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f856 5b04 	ldr.w	r5, [r6], #4
 800653e:	061f      	lsls	r7, r3, #24
 8006540:	600e      	str	r6, [r1, #0]
 8006542:	d514      	bpl.n	800656e <_printf_i+0x1ae>
 8006544:	07d9      	lsls	r1, r3, #31
 8006546:	bf44      	itt	mi
 8006548:	f043 0320 	orrmi.w	r3, r3, #32
 800654c:	6023      	strmi	r3, [r4, #0]
 800654e:	b91d      	cbnz	r5, 8006558 <_printf_i+0x198>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	f023 0320 	bic.w	r3, r3, #32
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	2310      	movs	r3, #16
 800655a:	e7af      	b.n	80064bc <_printf_i+0xfc>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	f043 0320 	orr.w	r3, r3, #32
 8006562:	6023      	str	r3, [r4, #0]
 8006564:	2378      	movs	r3, #120	; 0x78
 8006566:	4828      	ldr	r0, [pc, #160]	; (8006608 <_printf_i+0x248>)
 8006568:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800656c:	e7e3      	b.n	8006536 <_printf_i+0x176>
 800656e:	065e      	lsls	r6, r3, #25
 8006570:	bf48      	it	mi
 8006572:	b2ad      	uxthmi	r5, r5
 8006574:	e7e6      	b.n	8006544 <_printf_i+0x184>
 8006576:	4616      	mov	r6, r2
 8006578:	e7bb      	b.n	80064f2 <_printf_i+0x132>
 800657a:	680b      	ldr	r3, [r1, #0]
 800657c:	6826      	ldr	r6, [r4, #0]
 800657e:	1d1d      	adds	r5, r3, #4
 8006580:	6960      	ldr	r0, [r4, #20]
 8006582:	600d      	str	r5, [r1, #0]
 8006584:	0635      	lsls	r5, r6, #24
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	d501      	bpl.n	800658e <_printf_i+0x1ce>
 800658a:	6018      	str	r0, [r3, #0]
 800658c:	e002      	b.n	8006594 <_printf_i+0x1d4>
 800658e:	0671      	lsls	r1, r6, #25
 8006590:	d5fb      	bpl.n	800658a <_printf_i+0x1ca>
 8006592:	8018      	strh	r0, [r3, #0]
 8006594:	2300      	movs	r3, #0
 8006596:	4616      	mov	r6, r2
 8006598:	6123      	str	r3, [r4, #16]
 800659a:	e7ba      	b.n	8006512 <_printf_i+0x152>
 800659c:	680b      	ldr	r3, [r1, #0]
 800659e:	1d1a      	adds	r2, r3, #4
 80065a0:	600a      	str	r2, [r1, #0]
 80065a2:	681e      	ldr	r6, [r3, #0]
 80065a4:	2100      	movs	r1, #0
 80065a6:	4630      	mov	r0, r6
 80065a8:	6862      	ldr	r2, [r4, #4]
 80065aa:	f000 fb15 	bl	8006bd8 <memchr>
 80065ae:	b108      	cbz	r0, 80065b4 <_printf_i+0x1f4>
 80065b0:	1b80      	subs	r0, r0, r6
 80065b2:	6060      	str	r0, [r4, #4]
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	2300      	movs	r3, #0
 80065ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065be:	e7a8      	b.n	8006512 <_printf_i+0x152>
 80065c0:	4632      	mov	r2, r6
 80065c2:	4649      	mov	r1, r9
 80065c4:	4640      	mov	r0, r8
 80065c6:	6923      	ldr	r3, [r4, #16]
 80065c8:	47d0      	blx	sl
 80065ca:	3001      	adds	r0, #1
 80065cc:	d0ab      	beq.n	8006526 <_printf_i+0x166>
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	079b      	lsls	r3, r3, #30
 80065d2:	d413      	bmi.n	80065fc <_printf_i+0x23c>
 80065d4:	68e0      	ldr	r0, [r4, #12]
 80065d6:	9b03      	ldr	r3, [sp, #12]
 80065d8:	4298      	cmp	r0, r3
 80065da:	bfb8      	it	lt
 80065dc:	4618      	movlt	r0, r3
 80065de:	e7a4      	b.n	800652a <_printf_i+0x16a>
 80065e0:	2301      	movs	r3, #1
 80065e2:	4632      	mov	r2, r6
 80065e4:	4649      	mov	r1, r9
 80065e6:	4640      	mov	r0, r8
 80065e8:	47d0      	blx	sl
 80065ea:	3001      	adds	r0, #1
 80065ec:	d09b      	beq.n	8006526 <_printf_i+0x166>
 80065ee:	3501      	adds	r5, #1
 80065f0:	68e3      	ldr	r3, [r4, #12]
 80065f2:	9903      	ldr	r1, [sp, #12]
 80065f4:	1a5b      	subs	r3, r3, r1
 80065f6:	42ab      	cmp	r3, r5
 80065f8:	dcf2      	bgt.n	80065e0 <_printf_i+0x220>
 80065fa:	e7eb      	b.n	80065d4 <_printf_i+0x214>
 80065fc:	2500      	movs	r5, #0
 80065fe:	f104 0619 	add.w	r6, r4, #25
 8006602:	e7f5      	b.n	80065f0 <_printf_i+0x230>
 8006604:	08007002 	.word	0x08007002
 8006608:	08007013 	.word	0x08007013

0800660c <__swbuf_r>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	460e      	mov	r6, r1
 8006610:	4614      	mov	r4, r2
 8006612:	4605      	mov	r5, r0
 8006614:	b118      	cbz	r0, 800661e <__swbuf_r+0x12>
 8006616:	6983      	ldr	r3, [r0, #24]
 8006618:	b90b      	cbnz	r3, 800661e <__swbuf_r+0x12>
 800661a:	f000 f9d9 	bl	80069d0 <__sinit>
 800661e:	4b21      	ldr	r3, [pc, #132]	; (80066a4 <__swbuf_r+0x98>)
 8006620:	429c      	cmp	r4, r3
 8006622:	d12b      	bne.n	800667c <__swbuf_r+0x70>
 8006624:	686c      	ldr	r4, [r5, #4]
 8006626:	69a3      	ldr	r3, [r4, #24]
 8006628:	60a3      	str	r3, [r4, #8]
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	071a      	lsls	r2, r3, #28
 800662e:	d52f      	bpl.n	8006690 <__swbuf_r+0x84>
 8006630:	6923      	ldr	r3, [r4, #16]
 8006632:	b36b      	cbz	r3, 8006690 <__swbuf_r+0x84>
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	b2f6      	uxtb	r6, r6
 800663a:	1ac0      	subs	r0, r0, r3
 800663c:	6963      	ldr	r3, [r4, #20]
 800663e:	4637      	mov	r7, r6
 8006640:	4283      	cmp	r3, r0
 8006642:	dc04      	bgt.n	800664e <__swbuf_r+0x42>
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f92e 	bl	80068a8 <_fflush_r>
 800664c:	bb30      	cbnz	r0, 800669c <__swbuf_r+0x90>
 800664e:	68a3      	ldr	r3, [r4, #8]
 8006650:	3001      	adds	r0, #1
 8006652:	3b01      	subs	r3, #1
 8006654:	60a3      	str	r3, [r4, #8]
 8006656:	6823      	ldr	r3, [r4, #0]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	6022      	str	r2, [r4, #0]
 800665c:	701e      	strb	r6, [r3, #0]
 800665e:	6963      	ldr	r3, [r4, #20]
 8006660:	4283      	cmp	r3, r0
 8006662:	d004      	beq.n	800666e <__swbuf_r+0x62>
 8006664:	89a3      	ldrh	r3, [r4, #12]
 8006666:	07db      	lsls	r3, r3, #31
 8006668:	d506      	bpl.n	8006678 <__swbuf_r+0x6c>
 800666a:	2e0a      	cmp	r6, #10
 800666c:	d104      	bne.n	8006678 <__swbuf_r+0x6c>
 800666e:	4621      	mov	r1, r4
 8006670:	4628      	mov	r0, r5
 8006672:	f000 f919 	bl	80068a8 <_fflush_r>
 8006676:	b988      	cbnz	r0, 800669c <__swbuf_r+0x90>
 8006678:	4638      	mov	r0, r7
 800667a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <__swbuf_r+0x9c>)
 800667e:	429c      	cmp	r4, r3
 8006680:	d101      	bne.n	8006686 <__swbuf_r+0x7a>
 8006682:	68ac      	ldr	r4, [r5, #8]
 8006684:	e7cf      	b.n	8006626 <__swbuf_r+0x1a>
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <__swbuf_r+0xa0>)
 8006688:	429c      	cmp	r4, r3
 800668a:	bf08      	it	eq
 800668c:	68ec      	ldreq	r4, [r5, #12]
 800668e:	e7ca      	b.n	8006626 <__swbuf_r+0x1a>
 8006690:	4621      	mov	r1, r4
 8006692:	4628      	mov	r0, r5
 8006694:	f000 f80c 	bl	80066b0 <__swsetup_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0cb      	beq.n	8006634 <__swbuf_r+0x28>
 800669c:	f04f 37ff 	mov.w	r7, #4294967295
 80066a0:	e7ea      	b.n	8006678 <__swbuf_r+0x6c>
 80066a2:	bf00      	nop
 80066a4:	08007044 	.word	0x08007044
 80066a8:	08007064 	.word	0x08007064
 80066ac:	08007024 	.word	0x08007024

080066b0 <__swsetup_r>:
 80066b0:	4b32      	ldr	r3, [pc, #200]	; (800677c <__swsetup_r+0xcc>)
 80066b2:	b570      	push	{r4, r5, r6, lr}
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	4606      	mov	r6, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	b125      	cbz	r5, 80066c6 <__swsetup_r+0x16>
 80066bc:	69ab      	ldr	r3, [r5, #24]
 80066be:	b913      	cbnz	r3, 80066c6 <__swsetup_r+0x16>
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 f985 	bl	80069d0 <__sinit>
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <__swsetup_r+0xd0>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	d10f      	bne.n	80066ec <__swsetup_r+0x3c>
 80066cc:	686c      	ldr	r4, [r5, #4]
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066d4:	0719      	lsls	r1, r3, #28
 80066d6:	d42c      	bmi.n	8006732 <__swsetup_r+0x82>
 80066d8:	06dd      	lsls	r5, r3, #27
 80066da:	d411      	bmi.n	8006700 <__swsetup_r+0x50>
 80066dc:	2309      	movs	r3, #9
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066e4:	f04f 30ff 	mov.w	r0, #4294967295
 80066e8:	81a3      	strh	r3, [r4, #12]
 80066ea:	e03e      	b.n	800676a <__swsetup_r+0xba>
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <__swsetup_r+0xd4>)
 80066ee:	429c      	cmp	r4, r3
 80066f0:	d101      	bne.n	80066f6 <__swsetup_r+0x46>
 80066f2:	68ac      	ldr	r4, [r5, #8]
 80066f4:	e7eb      	b.n	80066ce <__swsetup_r+0x1e>
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <__swsetup_r+0xd8>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	bf08      	it	eq
 80066fc:	68ec      	ldreq	r4, [r5, #12]
 80066fe:	e7e6      	b.n	80066ce <__swsetup_r+0x1e>
 8006700:	0758      	lsls	r0, r3, #29
 8006702:	d512      	bpl.n	800672a <__swsetup_r+0x7a>
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	b141      	cbz	r1, 800671a <__swsetup_r+0x6a>
 8006708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670c:	4299      	cmp	r1, r3
 800670e:	d002      	beq.n	8006716 <__swsetup_r+0x66>
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff faaf 	bl	8005c74 <_free_r>
 8006716:	2300      	movs	r3, #0
 8006718:	6363      	str	r3, [r4, #52]	; 0x34
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	2300      	movs	r3, #0
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	b94b      	cbnz	r3, 800674a <__swsetup_r+0x9a>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800673c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006740:	d003      	beq.n	800674a <__swsetup_r+0x9a>
 8006742:	4621      	mov	r1, r4
 8006744:	4630      	mov	r0, r6
 8006746:	f000 fa07 	bl	8006b58 <__smakebuf_r>
 800674a:	89a0      	ldrh	r0, [r4, #12]
 800674c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006750:	f010 0301 	ands.w	r3, r0, #1
 8006754:	d00a      	beq.n	800676c <__swsetup_r+0xbc>
 8006756:	2300      	movs	r3, #0
 8006758:	60a3      	str	r3, [r4, #8]
 800675a:	6963      	ldr	r3, [r4, #20]
 800675c:	425b      	negs	r3, r3
 800675e:	61a3      	str	r3, [r4, #24]
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	b943      	cbnz	r3, 8006776 <__swsetup_r+0xc6>
 8006764:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006768:	d1ba      	bne.n	80066e0 <__swsetup_r+0x30>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	0781      	lsls	r1, r0, #30
 800676e:	bf58      	it	pl
 8006770:	6963      	ldrpl	r3, [r4, #20]
 8006772:	60a3      	str	r3, [r4, #8]
 8006774:	e7f4      	b.n	8006760 <__swsetup_r+0xb0>
 8006776:	2000      	movs	r0, #0
 8006778:	e7f7      	b.n	800676a <__swsetup_r+0xba>
 800677a:	bf00      	nop
 800677c:	2000000c 	.word	0x2000000c
 8006780:	08007044 	.word	0x08007044
 8006784:	08007064 	.word	0x08007064
 8006788:	08007024 	.word	0x08007024

0800678c <abort>:
 800678c:	2006      	movs	r0, #6
 800678e:	b508      	push	{r3, lr}
 8006790:	f000 fa58 	bl	8006c44 <raise>
 8006794:	2001      	movs	r0, #1
 8006796:	f7fb faf6 	bl	8001d86 <_exit>
	...

0800679c <__sflush_r>:
 800679c:	898a      	ldrh	r2, [r1, #12]
 800679e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a2:	4605      	mov	r5, r0
 80067a4:	0710      	lsls	r0, r2, #28
 80067a6:	460c      	mov	r4, r1
 80067a8:	d458      	bmi.n	800685c <__sflush_r+0xc0>
 80067aa:	684b      	ldr	r3, [r1, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	dc05      	bgt.n	80067bc <__sflush_r+0x20>
 80067b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	dc02      	bgt.n	80067bc <__sflush_r+0x20>
 80067b6:	2000      	movs	r0, #0
 80067b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067be:	2e00      	cmp	r6, #0
 80067c0:	d0f9      	beq.n	80067b6 <__sflush_r+0x1a>
 80067c2:	2300      	movs	r3, #0
 80067c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067c8:	682f      	ldr	r7, [r5, #0]
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	d032      	beq.n	8006834 <__sflush_r+0x98>
 80067ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	075a      	lsls	r2, r3, #29
 80067d4:	d505      	bpl.n	80067e2 <__sflush_r+0x46>
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	1ac0      	subs	r0, r0, r3
 80067da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067dc:	b10b      	cbz	r3, 80067e2 <__sflush_r+0x46>
 80067de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067e0:	1ac0      	subs	r0, r0, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	4602      	mov	r2, r0
 80067e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067e8:	4628      	mov	r0, r5
 80067ea:	6a21      	ldr	r1, [r4, #32]
 80067ec:	47b0      	blx	r6
 80067ee:	1c43      	adds	r3, r0, #1
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	d106      	bne.n	8006802 <__sflush_r+0x66>
 80067f4:	6829      	ldr	r1, [r5, #0]
 80067f6:	291d      	cmp	r1, #29
 80067f8:	d82c      	bhi.n	8006854 <__sflush_r+0xb8>
 80067fa:	4a2a      	ldr	r2, [pc, #168]	; (80068a4 <__sflush_r+0x108>)
 80067fc:	40ca      	lsrs	r2, r1
 80067fe:	07d6      	lsls	r6, r2, #31
 8006800:	d528      	bpl.n	8006854 <__sflush_r+0xb8>
 8006802:	2200      	movs	r2, #0
 8006804:	6062      	str	r2, [r4, #4]
 8006806:	6922      	ldr	r2, [r4, #16]
 8006808:	04d9      	lsls	r1, r3, #19
 800680a:	6022      	str	r2, [r4, #0]
 800680c:	d504      	bpl.n	8006818 <__sflush_r+0x7c>
 800680e:	1c42      	adds	r2, r0, #1
 8006810:	d101      	bne.n	8006816 <__sflush_r+0x7a>
 8006812:	682b      	ldr	r3, [r5, #0]
 8006814:	b903      	cbnz	r3, 8006818 <__sflush_r+0x7c>
 8006816:	6560      	str	r0, [r4, #84]	; 0x54
 8006818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800681a:	602f      	str	r7, [r5, #0]
 800681c:	2900      	cmp	r1, #0
 800681e:	d0ca      	beq.n	80067b6 <__sflush_r+0x1a>
 8006820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006824:	4299      	cmp	r1, r3
 8006826:	d002      	beq.n	800682e <__sflush_r+0x92>
 8006828:	4628      	mov	r0, r5
 800682a:	f7ff fa23 	bl	8005c74 <_free_r>
 800682e:	2000      	movs	r0, #0
 8006830:	6360      	str	r0, [r4, #52]	; 0x34
 8006832:	e7c1      	b.n	80067b8 <__sflush_r+0x1c>
 8006834:	6a21      	ldr	r1, [r4, #32]
 8006836:	2301      	movs	r3, #1
 8006838:	4628      	mov	r0, r5
 800683a:	47b0      	blx	r6
 800683c:	1c41      	adds	r1, r0, #1
 800683e:	d1c7      	bne.n	80067d0 <__sflush_r+0x34>
 8006840:	682b      	ldr	r3, [r5, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d0c4      	beq.n	80067d0 <__sflush_r+0x34>
 8006846:	2b1d      	cmp	r3, #29
 8006848:	d001      	beq.n	800684e <__sflush_r+0xb2>
 800684a:	2b16      	cmp	r3, #22
 800684c:	d101      	bne.n	8006852 <__sflush_r+0xb6>
 800684e:	602f      	str	r7, [r5, #0]
 8006850:	e7b1      	b.n	80067b6 <__sflush_r+0x1a>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006858:	81a3      	strh	r3, [r4, #12]
 800685a:	e7ad      	b.n	80067b8 <__sflush_r+0x1c>
 800685c:	690f      	ldr	r7, [r1, #16]
 800685e:	2f00      	cmp	r7, #0
 8006860:	d0a9      	beq.n	80067b6 <__sflush_r+0x1a>
 8006862:	0793      	lsls	r3, r2, #30
 8006864:	bf18      	it	ne
 8006866:	2300      	movne	r3, #0
 8006868:	680e      	ldr	r6, [r1, #0]
 800686a:	bf08      	it	eq
 800686c:	694b      	ldreq	r3, [r1, #20]
 800686e:	eba6 0807 	sub.w	r8, r6, r7
 8006872:	600f      	str	r7, [r1, #0]
 8006874:	608b      	str	r3, [r1, #8]
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	dd9c      	ble.n	80067b6 <__sflush_r+0x1a>
 800687c:	4643      	mov	r3, r8
 800687e:	463a      	mov	r2, r7
 8006880:	4628      	mov	r0, r5
 8006882:	6a21      	ldr	r1, [r4, #32]
 8006884:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006886:	47b0      	blx	r6
 8006888:	2800      	cmp	r0, #0
 800688a:	dc06      	bgt.n	800689a <__sflush_r+0xfe>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f04f 30ff 	mov.w	r0, #4294967295
 8006892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	e78e      	b.n	80067b8 <__sflush_r+0x1c>
 800689a:	4407      	add	r7, r0
 800689c:	eba8 0800 	sub.w	r8, r8, r0
 80068a0:	e7e9      	b.n	8006876 <__sflush_r+0xda>
 80068a2:	bf00      	nop
 80068a4:	20400001 	.word	0x20400001

080068a8 <_fflush_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	690b      	ldr	r3, [r1, #16]
 80068ac:	4605      	mov	r5, r0
 80068ae:	460c      	mov	r4, r1
 80068b0:	b913      	cbnz	r3, 80068b8 <_fflush_r+0x10>
 80068b2:	2500      	movs	r5, #0
 80068b4:	4628      	mov	r0, r5
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	b118      	cbz	r0, 80068c2 <_fflush_r+0x1a>
 80068ba:	6983      	ldr	r3, [r0, #24]
 80068bc:	b90b      	cbnz	r3, 80068c2 <_fflush_r+0x1a>
 80068be:	f000 f887 	bl	80069d0 <__sinit>
 80068c2:	4b14      	ldr	r3, [pc, #80]	; (8006914 <_fflush_r+0x6c>)
 80068c4:	429c      	cmp	r4, r3
 80068c6:	d11b      	bne.n	8006900 <_fflush_r+0x58>
 80068c8:	686c      	ldr	r4, [r5, #4]
 80068ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0ef      	beq.n	80068b2 <_fflush_r+0xa>
 80068d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068d4:	07d0      	lsls	r0, r2, #31
 80068d6:	d404      	bmi.n	80068e2 <_fflush_r+0x3a>
 80068d8:	0599      	lsls	r1, r3, #22
 80068da:	d402      	bmi.n	80068e2 <_fflush_r+0x3a>
 80068dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068de:	f000 f915 	bl	8006b0c <__retarget_lock_acquire_recursive>
 80068e2:	4628      	mov	r0, r5
 80068e4:	4621      	mov	r1, r4
 80068e6:	f7ff ff59 	bl	800679c <__sflush_r>
 80068ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ec:	4605      	mov	r5, r0
 80068ee:	07da      	lsls	r2, r3, #31
 80068f0:	d4e0      	bmi.n	80068b4 <_fflush_r+0xc>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	059b      	lsls	r3, r3, #22
 80068f6:	d4dd      	bmi.n	80068b4 <_fflush_r+0xc>
 80068f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068fa:	f000 f908 	bl	8006b0e <__retarget_lock_release_recursive>
 80068fe:	e7d9      	b.n	80068b4 <_fflush_r+0xc>
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <_fflush_r+0x70>)
 8006902:	429c      	cmp	r4, r3
 8006904:	d101      	bne.n	800690a <_fflush_r+0x62>
 8006906:	68ac      	ldr	r4, [r5, #8]
 8006908:	e7df      	b.n	80068ca <_fflush_r+0x22>
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <_fflush_r+0x74>)
 800690c:	429c      	cmp	r4, r3
 800690e:	bf08      	it	eq
 8006910:	68ec      	ldreq	r4, [r5, #12]
 8006912:	e7da      	b.n	80068ca <_fflush_r+0x22>
 8006914:	08007044 	.word	0x08007044
 8006918:	08007064 	.word	0x08007064
 800691c:	08007024 	.word	0x08007024

08006920 <std>:
 8006920:	2300      	movs	r3, #0
 8006922:	b510      	push	{r4, lr}
 8006924:	4604      	mov	r4, r0
 8006926:	e9c0 3300 	strd	r3, r3, [r0]
 800692a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800692e:	6083      	str	r3, [r0, #8]
 8006930:	8181      	strh	r1, [r0, #12]
 8006932:	6643      	str	r3, [r0, #100]	; 0x64
 8006934:	81c2      	strh	r2, [r0, #14]
 8006936:	6183      	str	r3, [r0, #24]
 8006938:	4619      	mov	r1, r3
 800693a:	2208      	movs	r2, #8
 800693c:	305c      	adds	r0, #92	; 0x5c
 800693e:	f7ff f991 	bl	8005c64 <memset>
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <std+0x38>)
 8006944:	6224      	str	r4, [r4, #32]
 8006946:	6263      	str	r3, [r4, #36]	; 0x24
 8006948:	4b04      	ldr	r3, [pc, #16]	; (800695c <std+0x3c>)
 800694a:	62a3      	str	r3, [r4, #40]	; 0x28
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <std+0x40>)
 800694e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <std+0x44>)
 8006952:	6323      	str	r3, [r4, #48]	; 0x30
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop
 8006958:	08006c7d 	.word	0x08006c7d
 800695c:	08006c9f 	.word	0x08006c9f
 8006960:	08006cd7 	.word	0x08006cd7
 8006964:	08006cfb 	.word	0x08006cfb

08006968 <_cleanup_r>:
 8006968:	4901      	ldr	r1, [pc, #4]	; (8006970 <_cleanup_r+0x8>)
 800696a:	f000 b8af 	b.w	8006acc <_fwalk_reent>
 800696e:	bf00      	nop
 8006970:	080068a9 	.word	0x080068a9

08006974 <__sfmoreglue>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	2568      	movs	r5, #104	; 0x68
 8006978:	1e4a      	subs	r2, r1, #1
 800697a:	4355      	muls	r5, r2
 800697c:	460e      	mov	r6, r1
 800697e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006982:	f7ff f9c3 	bl	8005d0c <_malloc_r>
 8006986:	4604      	mov	r4, r0
 8006988:	b140      	cbz	r0, 800699c <__sfmoreglue+0x28>
 800698a:	2100      	movs	r1, #0
 800698c:	e9c0 1600 	strd	r1, r6, [r0]
 8006990:	300c      	adds	r0, #12
 8006992:	60a0      	str	r0, [r4, #8]
 8006994:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006998:	f7ff f964 	bl	8005c64 <memset>
 800699c:	4620      	mov	r0, r4
 800699e:	bd70      	pop	{r4, r5, r6, pc}

080069a0 <__sfp_lock_acquire>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sfp_lock_acquire+0x8>)
 80069a2:	f000 b8b3 	b.w	8006b0c <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	200003f8 	.word	0x200003f8

080069ac <__sfp_lock_release>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__sfp_lock_release+0x8>)
 80069ae:	f000 b8ae 	b.w	8006b0e <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	200003f8 	.word	0x200003f8

080069b8 <__sinit_lock_acquire>:
 80069b8:	4801      	ldr	r0, [pc, #4]	; (80069c0 <__sinit_lock_acquire+0x8>)
 80069ba:	f000 b8a7 	b.w	8006b0c <__retarget_lock_acquire_recursive>
 80069be:	bf00      	nop
 80069c0:	200003f3 	.word	0x200003f3

080069c4 <__sinit_lock_release>:
 80069c4:	4801      	ldr	r0, [pc, #4]	; (80069cc <__sinit_lock_release+0x8>)
 80069c6:	f000 b8a2 	b.w	8006b0e <__retarget_lock_release_recursive>
 80069ca:	bf00      	nop
 80069cc:	200003f3 	.word	0x200003f3

080069d0 <__sinit>:
 80069d0:	b510      	push	{r4, lr}
 80069d2:	4604      	mov	r4, r0
 80069d4:	f7ff fff0 	bl	80069b8 <__sinit_lock_acquire>
 80069d8:	69a3      	ldr	r3, [r4, #24]
 80069da:	b11b      	cbz	r3, 80069e4 <__sinit+0x14>
 80069dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e0:	f7ff bff0 	b.w	80069c4 <__sinit_lock_release>
 80069e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069e8:	6523      	str	r3, [r4, #80]	; 0x50
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <__sinit+0x68>)
 80069ec:	4a13      	ldr	r2, [pc, #76]	; (8006a3c <__sinit+0x6c>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	bf08      	it	eq
 80069f6:	2301      	moveq	r3, #1
 80069f8:	4620      	mov	r0, r4
 80069fa:	bf08      	it	eq
 80069fc:	61a3      	streq	r3, [r4, #24]
 80069fe:	f000 f81f 	bl	8006a40 <__sfp>
 8006a02:	6060      	str	r0, [r4, #4]
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 f81b 	bl	8006a40 <__sfp>
 8006a0a:	60a0      	str	r0, [r4, #8]
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 f817 	bl	8006a40 <__sfp>
 8006a12:	2200      	movs	r2, #0
 8006a14:	2104      	movs	r1, #4
 8006a16:	60e0      	str	r0, [r4, #12]
 8006a18:	6860      	ldr	r0, [r4, #4]
 8006a1a:	f7ff ff81 	bl	8006920 <std>
 8006a1e:	2201      	movs	r2, #1
 8006a20:	2109      	movs	r1, #9
 8006a22:	68a0      	ldr	r0, [r4, #8]
 8006a24:	f7ff ff7c 	bl	8006920 <std>
 8006a28:	2202      	movs	r2, #2
 8006a2a:	2112      	movs	r1, #18
 8006a2c:	68e0      	ldr	r0, [r4, #12]
 8006a2e:	f7ff ff77 	bl	8006920 <std>
 8006a32:	2301      	movs	r3, #1
 8006a34:	61a3      	str	r3, [r4, #24]
 8006a36:	e7d1      	b.n	80069dc <__sinit+0xc>
 8006a38:	08006e38 	.word	0x08006e38
 8006a3c:	08006969 	.word	0x08006969

08006a40 <__sfp>:
 8006a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a42:	4607      	mov	r7, r0
 8006a44:	f7ff ffac 	bl	80069a0 <__sfp_lock_acquire>
 8006a48:	4b1e      	ldr	r3, [pc, #120]	; (8006ac4 <__sfp+0x84>)
 8006a4a:	681e      	ldr	r6, [r3, #0]
 8006a4c:	69b3      	ldr	r3, [r6, #24]
 8006a4e:	b913      	cbnz	r3, 8006a56 <__sfp+0x16>
 8006a50:	4630      	mov	r0, r6
 8006a52:	f7ff ffbd 	bl	80069d0 <__sinit>
 8006a56:	3648      	adds	r6, #72	; 0x48
 8006a58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	d503      	bpl.n	8006a68 <__sfp+0x28>
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	b30b      	cbz	r3, 8006aa8 <__sfp+0x68>
 8006a64:	6836      	ldr	r6, [r6, #0]
 8006a66:	e7f7      	b.n	8006a58 <__sfp+0x18>
 8006a68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a6c:	b9d5      	cbnz	r5, 8006aa4 <__sfp+0x64>
 8006a6e:	4b16      	ldr	r3, [pc, #88]	; (8006ac8 <__sfp+0x88>)
 8006a70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a74:	60e3      	str	r3, [r4, #12]
 8006a76:	6665      	str	r5, [r4, #100]	; 0x64
 8006a78:	f000 f847 	bl	8006b0a <__retarget_lock_init_recursive>
 8006a7c:	f7ff ff96 	bl	80069ac <__sfp_lock_release>
 8006a80:	2208      	movs	r2, #8
 8006a82:	4629      	mov	r1, r5
 8006a84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a8c:	6025      	str	r5, [r4, #0]
 8006a8e:	61a5      	str	r5, [r4, #24]
 8006a90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a94:	f7ff f8e6 	bl	8005c64 <memset>
 8006a98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aa4:	3468      	adds	r4, #104	; 0x68
 8006aa6:	e7d9      	b.n	8006a5c <__sfp+0x1c>
 8006aa8:	2104      	movs	r1, #4
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f7ff ff62 	bl	8006974 <__sfmoreglue>
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	6030      	str	r0, [r6, #0]
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d1d5      	bne.n	8006a64 <__sfp+0x24>
 8006ab8:	f7ff ff78 	bl	80069ac <__sfp_lock_release>
 8006abc:	230c      	movs	r3, #12
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	e7ee      	b.n	8006aa0 <__sfp+0x60>
 8006ac2:	bf00      	nop
 8006ac4:	08006e38 	.word	0x08006e38
 8006ac8:	ffff0001 	.word	0xffff0001

08006acc <_fwalk_reent>:
 8006acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	4688      	mov	r8, r1
 8006ad4:	2700      	movs	r7, #0
 8006ad6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ada:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ade:	f1b9 0901 	subs.w	r9, r9, #1
 8006ae2:	d505      	bpl.n	8006af0 <_fwalk_reent+0x24>
 8006ae4:	6824      	ldr	r4, [r4, #0]
 8006ae6:	2c00      	cmp	r4, #0
 8006ae8:	d1f7      	bne.n	8006ada <_fwalk_reent+0xe>
 8006aea:	4638      	mov	r0, r7
 8006aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006af0:	89ab      	ldrh	r3, [r5, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d907      	bls.n	8006b06 <_fwalk_reent+0x3a>
 8006af6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006afa:	3301      	adds	r3, #1
 8006afc:	d003      	beq.n	8006b06 <_fwalk_reent+0x3a>
 8006afe:	4629      	mov	r1, r5
 8006b00:	4630      	mov	r0, r6
 8006b02:	47c0      	blx	r8
 8006b04:	4307      	orrs	r7, r0
 8006b06:	3568      	adds	r5, #104	; 0x68
 8006b08:	e7e9      	b.n	8006ade <_fwalk_reent+0x12>

08006b0a <__retarget_lock_init_recursive>:
 8006b0a:	4770      	bx	lr

08006b0c <__retarget_lock_acquire_recursive>:
 8006b0c:	4770      	bx	lr

08006b0e <__retarget_lock_release_recursive>:
 8006b0e:	4770      	bx	lr

08006b10 <__swhatbuf_r>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	460e      	mov	r6, r1
 8006b14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b18:	4614      	mov	r4, r2
 8006b1a:	2900      	cmp	r1, #0
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	b096      	sub	sp, #88	; 0x58
 8006b20:	da07      	bge.n	8006b32 <__swhatbuf_r+0x22>
 8006b22:	2300      	movs	r3, #0
 8006b24:	602b      	str	r3, [r5, #0]
 8006b26:	89b3      	ldrh	r3, [r6, #12]
 8006b28:	061a      	lsls	r2, r3, #24
 8006b2a:	d410      	bmi.n	8006b4e <__swhatbuf_r+0x3e>
 8006b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b30:	e00e      	b.n	8006b50 <__swhatbuf_r+0x40>
 8006b32:	466a      	mov	r2, sp
 8006b34:	f000 f908 	bl	8006d48 <_fstat_r>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	dbf2      	blt.n	8006b22 <__swhatbuf_r+0x12>
 8006b3c:	9a01      	ldr	r2, [sp, #4]
 8006b3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b46:	425a      	negs	r2, r3
 8006b48:	415a      	adcs	r2, r3
 8006b4a:	602a      	str	r2, [r5, #0]
 8006b4c:	e7ee      	b.n	8006b2c <__swhatbuf_r+0x1c>
 8006b4e:	2340      	movs	r3, #64	; 0x40
 8006b50:	2000      	movs	r0, #0
 8006b52:	6023      	str	r3, [r4, #0]
 8006b54:	b016      	add	sp, #88	; 0x58
 8006b56:	bd70      	pop	{r4, r5, r6, pc}

08006b58 <__smakebuf_r>:
 8006b58:	898b      	ldrh	r3, [r1, #12]
 8006b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b5c:	079d      	lsls	r5, r3, #30
 8006b5e:	4606      	mov	r6, r0
 8006b60:	460c      	mov	r4, r1
 8006b62:	d507      	bpl.n	8006b74 <__smakebuf_r+0x1c>
 8006b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	6163      	str	r3, [r4, #20]
 8006b70:	b002      	add	sp, #8
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	466a      	mov	r2, sp
 8006b76:	ab01      	add	r3, sp, #4
 8006b78:	f7ff ffca 	bl	8006b10 <__swhatbuf_r>
 8006b7c:	9900      	ldr	r1, [sp, #0]
 8006b7e:	4605      	mov	r5, r0
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff f8c3 	bl	8005d0c <_malloc_r>
 8006b86:	b948      	cbnz	r0, 8006b9c <__smakebuf_r+0x44>
 8006b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b8c:	059a      	lsls	r2, r3, #22
 8006b8e:	d4ef      	bmi.n	8006b70 <__smakebuf_r+0x18>
 8006b90:	f023 0303 	bic.w	r3, r3, #3
 8006b94:	f043 0302 	orr.w	r3, r3, #2
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	e7e3      	b.n	8006b64 <__smakebuf_r+0xc>
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	; (8006bd4 <__smakebuf_r+0x7c>)
 8006b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	6020      	str	r0, [r4, #0]
 8006ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	9b00      	ldr	r3, [sp, #0]
 8006bac:	6120      	str	r0, [r4, #16]
 8006bae:	6163      	str	r3, [r4, #20]
 8006bb0:	9b01      	ldr	r3, [sp, #4]
 8006bb2:	b15b      	cbz	r3, 8006bcc <__smakebuf_r+0x74>
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bba:	f000 f8d7 	bl	8006d6c <_isatty_r>
 8006bbe:	b128      	cbz	r0, 8006bcc <__smakebuf_r+0x74>
 8006bc0:	89a3      	ldrh	r3, [r4, #12]
 8006bc2:	f023 0303 	bic.w	r3, r3, #3
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	81a3      	strh	r3, [r4, #12]
 8006bcc:	89a0      	ldrh	r0, [r4, #12]
 8006bce:	4305      	orrs	r5, r0
 8006bd0:	81a5      	strh	r5, [r4, #12]
 8006bd2:	e7cd      	b.n	8006b70 <__smakebuf_r+0x18>
 8006bd4:	08006969 	.word	0x08006969

08006bd8 <memchr>:
 8006bd8:	4603      	mov	r3, r0
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	b2c9      	uxtb	r1, r1
 8006bde:	4402      	add	r2, r0
 8006be0:	4293      	cmp	r3, r2
 8006be2:	4618      	mov	r0, r3
 8006be4:	d101      	bne.n	8006bea <memchr+0x12>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e003      	b.n	8006bf2 <memchr+0x1a>
 8006bea:	7804      	ldrb	r4, [r0, #0]
 8006bec:	3301      	adds	r3, #1
 8006bee:	428c      	cmp	r4, r1
 8006bf0:	d1f6      	bne.n	8006be0 <memchr+0x8>
 8006bf2:	bd10      	pop	{r4, pc}

08006bf4 <_raise_r>:
 8006bf4:	291f      	cmp	r1, #31
 8006bf6:	b538      	push	{r3, r4, r5, lr}
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	d904      	bls.n	8006c08 <_raise_r+0x14>
 8006bfe:	2316      	movs	r3, #22
 8006c00:	6003      	str	r3, [r0, #0]
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c0a:	b112      	cbz	r2, 8006c12 <_raise_r+0x1e>
 8006c0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c10:	b94b      	cbnz	r3, 8006c26 <_raise_r+0x32>
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 f830 	bl	8006c78 <_getpid_r>
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c22:	f000 b817 	b.w	8006c54 <_kill_r>
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d00a      	beq.n	8006c40 <_raise_r+0x4c>
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	d103      	bne.n	8006c36 <_raise_r+0x42>
 8006c2e:	2316      	movs	r3, #22
 8006c30:	6003      	str	r3, [r0, #0]
 8006c32:	2001      	movs	r0, #1
 8006c34:	e7e7      	b.n	8006c06 <_raise_r+0x12>
 8006c36:	2400      	movs	r4, #0
 8006c38:	4628      	mov	r0, r5
 8006c3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c3e:	4798      	blx	r3
 8006c40:	2000      	movs	r0, #0
 8006c42:	e7e0      	b.n	8006c06 <_raise_r+0x12>

08006c44 <raise>:
 8006c44:	4b02      	ldr	r3, [pc, #8]	; (8006c50 <raise+0xc>)
 8006c46:	4601      	mov	r1, r0
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	f7ff bfd3 	b.w	8006bf4 <_raise_r>
 8006c4e:	bf00      	nop
 8006c50:	2000000c 	.word	0x2000000c

08006c54 <_kill_r>:
 8006c54:	b538      	push	{r3, r4, r5, lr}
 8006c56:	2300      	movs	r3, #0
 8006c58:	4d06      	ldr	r5, [pc, #24]	; (8006c74 <_kill_r+0x20>)
 8006c5a:	4604      	mov	r4, r0
 8006c5c:	4608      	mov	r0, r1
 8006c5e:	4611      	mov	r1, r2
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	f7fb f880 	bl	8001d66 <_kill>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	d102      	bne.n	8006c70 <_kill_r+0x1c>
 8006c6a:	682b      	ldr	r3, [r5, #0]
 8006c6c:	b103      	cbz	r3, 8006c70 <_kill_r+0x1c>
 8006c6e:	6023      	str	r3, [r4, #0]
 8006c70:	bd38      	pop	{r3, r4, r5, pc}
 8006c72:	bf00      	nop
 8006c74:	200003ec 	.word	0x200003ec

08006c78 <_getpid_r>:
 8006c78:	f7fb b86e 	b.w	8001d58 <_getpid>

08006c7c <__sread>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	460c      	mov	r4, r1
 8006c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c84:	f000 f894 	bl	8006db0 <_read_r>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	bfab      	itete	ge
 8006c8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006c90:	181b      	addge	r3, r3, r0
 8006c92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c96:	bfac      	ite	ge
 8006c98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c9a:	81a3      	strhlt	r3, [r4, #12]
 8006c9c:	bd10      	pop	{r4, pc}

08006c9e <__swrite>:
 8006c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca2:	461f      	mov	r7, r3
 8006ca4:	898b      	ldrh	r3, [r1, #12]
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	05db      	lsls	r3, r3, #23
 8006caa:	460c      	mov	r4, r1
 8006cac:	4616      	mov	r6, r2
 8006cae:	d505      	bpl.n	8006cbc <__swrite+0x1e>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb8:	f000 f868 	bl	8006d8c <_lseek_r>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	4632      	mov	r2, r6
 8006cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc4:	81a3      	strh	r3, [r4, #12]
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	463b      	mov	r3, r7
 8006cca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd2:	f000 b817 	b.w	8006d04 <_write_r>

08006cd6 <__sseek>:
 8006cd6:	b510      	push	{r4, lr}
 8006cd8:	460c      	mov	r4, r1
 8006cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cde:	f000 f855 	bl	8006d8c <_lseek_r>
 8006ce2:	1c43      	adds	r3, r0, #1
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	bf15      	itete	ne
 8006ce8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cf2:	81a3      	strheq	r3, [r4, #12]
 8006cf4:	bf18      	it	ne
 8006cf6:	81a3      	strhne	r3, [r4, #12]
 8006cf8:	bd10      	pop	{r4, pc}

08006cfa <__sclose>:
 8006cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfe:	f000 b813 	b.w	8006d28 <_close_r>
	...

08006d04 <_write_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	4d05      	ldr	r5, [pc, #20]	; (8006d24 <_write_r+0x20>)
 8006d10:	602a      	str	r2, [r5, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f7fb f85e 	bl	8001dd4 <_write>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_write_r+0x1e>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_write_r+0x1e>
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	200003ec 	.word	0x200003ec

08006d28 <_close_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	4d05      	ldr	r5, [pc, #20]	; (8006d44 <_close_r+0x1c>)
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4608      	mov	r0, r1
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	f7fb f86a 	bl	8001e0c <_close>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d102      	bne.n	8006d42 <_close_r+0x1a>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	b103      	cbz	r3, 8006d42 <_close_r+0x1a>
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	bd38      	pop	{r3, r4, r5, pc}
 8006d44:	200003ec 	.word	0x200003ec

08006d48 <_fstat_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	4d06      	ldr	r5, [pc, #24]	; (8006d68 <_fstat_r+0x20>)
 8006d4e:	4604      	mov	r4, r0
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	f7fb f864 	bl	8001e22 <_fstat>
 8006d5a:	1c43      	adds	r3, r0, #1
 8006d5c:	d102      	bne.n	8006d64 <_fstat_r+0x1c>
 8006d5e:	682b      	ldr	r3, [r5, #0]
 8006d60:	b103      	cbz	r3, 8006d64 <_fstat_r+0x1c>
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	bd38      	pop	{r3, r4, r5, pc}
 8006d66:	bf00      	nop
 8006d68:	200003ec 	.word	0x200003ec

08006d6c <_isatty_r>:
 8006d6c:	b538      	push	{r3, r4, r5, lr}
 8006d6e:	2300      	movs	r3, #0
 8006d70:	4d05      	ldr	r5, [pc, #20]	; (8006d88 <_isatty_r+0x1c>)
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	f7fb f862 	bl	8001e40 <_isatty>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_isatty_r+0x1a>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_isatty_r+0x1a>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	200003ec 	.word	0x200003ec

08006d8c <_lseek_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	4604      	mov	r4, r0
 8006d90:	4608      	mov	r0, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	2200      	movs	r2, #0
 8006d96:	4d05      	ldr	r5, [pc, #20]	; (8006dac <_lseek_r+0x20>)
 8006d98:	602a      	str	r2, [r5, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	f7fb f85a 	bl	8001e54 <_lseek>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d102      	bne.n	8006daa <_lseek_r+0x1e>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	b103      	cbz	r3, 8006daa <_lseek_r+0x1e>
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	bd38      	pop	{r3, r4, r5, pc}
 8006dac:	200003ec 	.word	0x200003ec

08006db0 <_read_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	2200      	movs	r2, #0
 8006dba:	4d05      	ldr	r5, [pc, #20]	; (8006dd0 <_read_r+0x20>)
 8006dbc:	602a      	str	r2, [r5, #0]
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f7fa ffeb 	bl	8001d9a <_read>
 8006dc4:	1c43      	adds	r3, r0, #1
 8006dc6:	d102      	bne.n	8006dce <_read_r+0x1e>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	b103      	cbz	r3, 8006dce <_read_r+0x1e>
 8006dcc:	6023      	str	r3, [r4, #0]
 8006dce:	bd38      	pop	{r3, r4, r5, pc}
 8006dd0:	200003ec 	.word	0x200003ec

08006dd4 <_init>:
 8006dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd6:	bf00      	nop
 8006dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dda:	bc08      	pop	{r3}
 8006ddc:	469e      	mov	lr, r3
 8006dde:	4770      	bx	lr

08006de0 <_fini>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	bf00      	nop
 8006de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006de6:	bc08      	pop	{r3}
 8006de8:	469e      	mov	lr, r3
 8006dea:	4770      	bx	lr
