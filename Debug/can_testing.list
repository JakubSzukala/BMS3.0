
can_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800537c  0800537c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800537c  0800537c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800537c  0800537c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005380  08005380  00015380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000070  080053f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080053f4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d21  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c15  00000000  00000000  00032dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  000359d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00036900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f06  00000000  00000000  00037708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b45  00000000  00000000  0005160e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec93  00000000  00000000  00062153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004888  00000000  00000000  000f0e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080050e4 	.word	0x080050e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080050e4 	.word	0x080050e4

0800014c <BqPack_StructInit>:
#include "battery_pack.h"

CanDataFrameInit can_frame_template;

void BqPack_StructInit(bq_pack *pack)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	pack -> voltage = 0;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
	pack -> temperature1 = 0;
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2200      	movs	r2, #0
 800015e:	809a      	strh	r2, [r3, #4]
	pack -> temperature2 = 0;
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2200      	movs	r2, #0
 8000164:	80da      	strh	r2, [r3, #6]
	pack -> lowest_cell_volts = 0;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	2200      	movs	r2, #0
 800016a:	811a      	strh	r2, [r3, #8]
	pack -> highest_cell_volts = 0;
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2200      	movs	r2, #0
 8000170:	815a      	strh	r2, [r3, #10]
	pack -> op_mode = 0;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	2200      	movs	r2, #0
 8000176:	731a      	strb	r2, [r3, #12]
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr

08000182 <BqPack_StructUpdate_CurrSensor>:

void BqPack_StructUpdate_CurrSensor(bq_pack *pack, CurrentData *control)
{
 8000182:	b480      	push	{r7}
 8000184:	b083      	sub	sp, #12
 8000186:	af00      	add	r7, sp, #0
 8000188:	6078      	str	r0, [r7, #4]
 800018a:	6039      	str	r1, [r7, #0]
	pack->current = control->current;
 800018c:	683b      	ldr	r3, [r7, #0]
 800018e:	69da      	ldr	r2, [r3, #28]
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	611a      	str	r2, [r3, #16]
}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr

0800019e <BqPack_RecalculateData>:


void BqPack_RecalculateData(bq_pack *pack)
{
 800019e:	b480      	push	{r7}
 80001a0:	b083      	sub	sp, #12
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	6078      	str	r0, [r7, #4]
	pack->power = pack->current * pack->voltage;
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	691b      	ldr	r3, [r3, #16]
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	6812      	ldr	r2, [r2, #0]
 80001ae:	fb02 f203 	mul.w	r2, r2, r3
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	615a      	str	r2, [r3, #20]
	pack->charge_level = 0;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	769a      	strb	r2, [r3, #26]
	pack->avg_temperature = (pack->temperature1 + pack->temperature2)/2;
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	889b      	ldrh	r3, [r3, #4]
 80001c0:	461a      	mov	r2, r3
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	88db      	ldrh	r3, [r3, #6]
 80001c6:	4413      	add	r3, r2
 80001c8:	0fda      	lsrs	r2, r3, #31
 80001ca:	4413      	add	r3, r2
 80001cc:	105b      	asrs	r3, r3, #1
 80001ce:	b29a      	uxth	r2, r3
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	831a      	strh	r2, [r3, #24]
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
	...

080001e0 <BqPack_StructUpdate_MSP430>:


void BqPack_StructUpdate_MSP430(bq_pack *pack, char *control)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b088      	sub	sp, #32
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
 80001e8:	6039      	str	r1, [r7, #0]
	char *data;

	data = strtok(control, ";");
 80001ea:	4941      	ldr	r1, [pc, #260]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 80001ec:	6838      	ldr	r0, [r7, #0]
 80001ee:	f003 fec1 	bl	8003f74 <strtok>
 80001f2:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 80001f4:	69fb      	ldr	r3, [r7, #28]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d00c      	beq.n	8000214 <BqPack_StructUpdate_MSP430+0x34>
	{
		uint32_t temp = (uint32_t)strtol(data, NULL, 0);
 80001fa:	2200      	movs	r2, #0
 80001fc:	2100      	movs	r1, #0
 80001fe:	69f8      	ldr	r0, [r7, #28]
 8000200:	f003 ff9a 	bl	8004138 <strtol>
 8000204:	4603      	mov	r3, r0
 8000206:	61bb      	str	r3, [r7, #24]
		if(temp)
 8000208:	69bb      	ldr	r3, [r7, #24]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d002      	beq.n	8000214 <BqPack_StructUpdate_MSP430+0x34>
		{
			pack -> voltage = temp;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	69ba      	ldr	r2, [r7, #24]
 8000212:	601a      	str	r2, [r3, #0]
		}
	}

	data = strtok(NULL, ";");
 8000214:	4936      	ldr	r1, [pc, #216]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 8000216:	2000      	movs	r0, #0
 8000218:	f003 feac 	bl	8003f74 <strtok>
 800021c:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 800021e:	69fb      	ldr	r3, [r7, #28]
 8000220:	2b00      	cmp	r3, #0
 8000222:	d00c      	beq.n	800023e <BqPack_StructUpdate_MSP430+0x5e>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	2100      	movs	r1, #0
 8000228:	69f8      	ldr	r0, [r7, #28]
 800022a:	f003 ff85 	bl	8004138 <strtol>
 800022e:	4603      	mov	r3, r0
 8000230:	82fb      	strh	r3, [r7, #22]
		if(temp)
 8000232:	8afb      	ldrh	r3, [r7, #22]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d002      	beq.n	800023e <BqPack_StructUpdate_MSP430+0x5e>
		{
			pack -> temperature1 = temp;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	8afa      	ldrh	r2, [r7, #22]
 800023c:	809a      	strh	r2, [r3, #4]
		}
	}

	data = strtok(NULL, ";");
 800023e:	492c      	ldr	r1, [pc, #176]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 8000240:	2000      	movs	r0, #0
 8000242:	f003 fe97 	bl	8003f74 <strtok>
 8000246:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000248:	69fb      	ldr	r3, [r7, #28]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d00c      	beq.n	8000268 <BqPack_StructUpdate_MSP430+0x88>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	69f8      	ldr	r0, [r7, #28]
 8000254:	f003 ff70 	bl	8004138 <strtol>
 8000258:	4603      	mov	r3, r0
 800025a:	82bb      	strh	r3, [r7, #20]
		if(temp)
 800025c:	8abb      	ldrh	r3, [r7, #20]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d002      	beq.n	8000268 <BqPack_StructUpdate_MSP430+0x88>
		{
			pack -> temperature2 = temp;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	8aba      	ldrh	r2, [r7, #20]
 8000266:	80da      	strh	r2, [r3, #6]
		}
	}

	data = strtok(NULL, ";");
 8000268:	4921      	ldr	r1, [pc, #132]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 800026a:	2000      	movs	r0, #0
 800026c:	f003 fe82 	bl	8003f74 <strtok>
 8000270:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d00c      	beq.n	8000292 <BqPack_StructUpdate_MSP430+0xb2>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	2100      	movs	r1, #0
 800027c:	69f8      	ldr	r0, [r7, #28]
 800027e:	f003 ff5b 	bl	8004138 <strtol>
 8000282:	4603      	mov	r3, r0
 8000284:	827b      	strh	r3, [r7, #18]
		if(temp)
 8000286:	8a7b      	ldrh	r3, [r7, #18]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <BqPack_StructUpdate_MSP430+0xb2>
		{
			pack -> lowest_cell_volts = temp;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	8a7a      	ldrh	r2, [r7, #18]
 8000290:	811a      	strh	r2, [r3, #8]
		}
	}

	data = strtok(NULL, ";");
 8000292:	4917      	ldr	r1, [pc, #92]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 8000294:	2000      	movs	r0, #0
 8000296:	f003 fe6d 	bl	8003f74 <strtok>
 800029a:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 800029c:	69fb      	ldr	r3, [r7, #28]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d00c      	beq.n	80002bc <BqPack_StructUpdate_MSP430+0xdc>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2100      	movs	r1, #0
 80002a6:	69f8      	ldr	r0, [r7, #28]
 80002a8:	f003 ff46 	bl	8004138 <strtol>
 80002ac:	4603      	mov	r3, r0
 80002ae:	823b      	strh	r3, [r7, #16]
		if(temp)
 80002b0:	8a3b      	ldrh	r3, [r7, #16]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d002      	beq.n	80002bc <BqPack_StructUpdate_MSP430+0xdc>
		{
			pack -> highest_cell_volts = temp;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	8a3a      	ldrh	r2, [r7, #16]
 80002ba:	815a      	strh	r2, [r3, #10]
		}
	}

	data = strtok(NULL, ";");
 80002bc:	490c      	ldr	r1, [pc, #48]	; (80002f0 <BqPack_StructUpdate_MSP430+0x110>)
 80002be:	2000      	movs	r0, #0
 80002c0:	f003 fe58 	bl	8003f74 <strtok>
 80002c4:	61f8      	str	r0, [r7, #28]
	if(data != NULL)
 80002c6:	69fb      	ldr	r3, [r7, #28]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d00d      	beq.n	80002e8 <BqPack_StructUpdate_MSP430+0x108>
	{
		uint16_t temp = (uint16_t)strtol(data, NULL, 0);
 80002cc:	2200      	movs	r2, #0
 80002ce:	2100      	movs	r1, #0
 80002d0:	69f8      	ldr	r0, [r7, #28]
 80002d2:	f003 ff31 	bl	8004138 <strtol>
 80002d6:	4603      	mov	r3, r0
 80002d8:	81fb      	strh	r3, [r7, #14]
		if(temp)
 80002da:	89fb      	ldrh	r3, [r7, #14]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d003      	beq.n	80002e8 <BqPack_StructUpdate_MSP430+0x108>
		{
			pack -> op_mode = temp;
 80002e0:	89fb      	ldrh	r3, [r7, #14]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80002e8:	bf00      	nop
 80002ea:	3720      	adds	r7, #32
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	080050fc 	.word	0x080050fc

080002f4 <BqPack_CheckForErrors>:

void BqPack_CheckForErrors(bq_pack *pack)
{
 80002f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002f6:	b097      	sub	sp, #92	; 0x5c
 80002f8:	af12      	add	r7, sp, #72	; 0x48
 80002fa:	6078      	str	r0, [r7, #4]
	BqPack_Error_Status status;
	status = VoltageErrorCheck(&(pack->voltage));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f846 	bl	8000390 <VoltageErrorCheck>
 8000304:	4603      	mov	r3, r0
 8000306:	73fb      	strb	r3, [r7, #15]
	if(status != BqPack_OK)
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d023      	beq.n	8000356 <BqPack_CheckForErrors+0x62>
	{
		CanSendPdo(hcan,
 800030e:	4e1e      	ldr	r6, [pc, #120]	; (8000388 <BqPack_CheckForErrors+0x94>)
 8000310:	2300      	movs	r3, #0
 8000312:	9310      	str	r3, [sp, #64]	; 0x40
 8000314:	2300      	movs	r3, #0
 8000316:	930f      	str	r3, [sp, #60]	; 0x3c
 8000318:	2300      	movs	r3, #0
 800031a:	930e      	str	r3, [sp, #56]	; 0x38
 800031c:	2300      	movs	r3, #0
 800031e:	930d      	str	r3, [sp, #52]	; 0x34
 8000320:	2300      	movs	r3, #0
 8000322:	930c      	str	r3, [sp, #48]	; 0x30
 8000324:	2300      	movs	r3, #0
 8000326:	930b      	str	r3, [sp, #44]	; 0x2c
 8000328:	2300      	movs	r3, #0
 800032a:	930a      	str	r3, [sp, #40]	; 0x28
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	9309      	str	r3, [sp, #36]	; 0x24
 8000330:	4b16      	ldr	r3, [pc, #88]	; (800038c <BqPack_CheckForErrors+0x98>)
 8000332:	9308      	str	r3, [sp, #32]
 8000334:	2308      	movs	r3, #8
 8000336:	9307      	str	r3, [sp, #28]
 8000338:	2385      	movs	r3, #133	; 0x85
 800033a:	9306      	str	r3, [sp, #24]
 800033c:	466d      	mov	r5, sp
 800033e:	f106 0410 	add.w	r4, r6, #16
 8000342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000346:	e894 0003 	ldmia.w	r4, {r0, r1}
 800034a:	e885 0003 	stmia.w	r5, {r0, r1}
 800034e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000352:	f000 f9b9 	bl	80006c8 <CanSendPdo>
			8,
			&can_frame_template,
			status, 0, 0, 0, 0, 0, 0, 0);
	}

	status = TemperatureErrorCheck(&(pack->temperature1), &(pack->temperature2));
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	1d1a      	adds	r2, r3, #4
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	3306      	adds	r3, #6
 800035e:	4619      	mov	r1, r3
 8000360:	4610      	mov	r0, r2
 8000362:	f000 f837 	bl	80003d4 <TemperatureErrorCheck>
 8000366:	4603      	mov	r3, r0
 8000368:	73fb      	strb	r3, [r7, #15]
	if(status != BqPack_OK)
	{
		// send error / warning message
	}

	status = VoltageDiffErrorCheck(&(pack->highest_cell_volts), &(pack->lowest_cell_volts));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	f103 020a 	add.w	r2, r3, #10
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3308      	adds	r3, #8
 8000374:	4619      	mov	r1, r3
 8000376:	4610      	mov	r0, r2
 8000378:	f000 f855 	bl	8000426 <VoltageDiffErrorCheck>
 800037c:	4603      	mov	r3, r0
 800037e:	73fb      	strb	r3, [r7, #15]
	if(status != BqPack_OK)
	{
		// send error / warning message
	}
}
 8000380:	bf00      	nop
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000388:	2000017c 	.word	0x2000017c
 800038c:	20000118 	.word	0x20000118

08000390 <VoltageErrorCheck>:

BqPack_Error_Status VoltageErrorCheck(uint32_t *voltage)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	if(*voltage > OVERVOLTAGE_ERR) 		return BqPack_ErrOV;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2b78      	cmp	r3, #120	; 0x78
 800039e:	d901      	bls.n	80003a4 <VoltageErrorCheck+0x14>
 80003a0:	2301      	movs	r3, #1
 80003a2:	e012      	b.n	80003ca <VoltageErrorCheck+0x3a>
	if(*voltage < UNDERVOLTAGE_ERR) 	return BqPack_ErrUV;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b51      	cmp	r3, #81	; 0x51
 80003aa:	d801      	bhi.n	80003b0 <VoltageErrorCheck+0x20>
 80003ac:	2302      	movs	r3, #2
 80003ae:	e00c      	b.n	80003ca <VoltageErrorCheck+0x3a>
	if(*voltage > OVERVOLTAGE_WARN)		return BqPack_WarOV;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b75      	cmp	r3, #117	; 0x75
 80003b6:	d901      	bls.n	80003bc <VoltageErrorCheck+0x2c>
 80003b8:	2305      	movs	r3, #5
 80003ba:	e006      	b.n	80003ca <VoltageErrorCheck+0x3a>
	if(*voltage < UNDERVOLTAGE_WARN)	return BqPack_WarUV;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b52      	cmp	r3, #82	; 0x52
 80003c2:	d801      	bhi.n	80003c8 <VoltageErrorCheck+0x38>
 80003c4:	2306      	movs	r3, #6
 80003c6:	e000      	b.n	80003ca <VoltageErrorCheck+0x3a>

	return BqPack_OK;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <TemperatureErrorCheck>:

BqPack_Error_Status TemperatureErrorCheck(uint16_t *t1, uint16_t *t2)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
	if(*t1 > HIGHTEMP_ERR || *t2 > HIGHTEMP_ERR) 	return BqPack_ErrHT;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	2b37      	cmp	r3, #55	; 0x37
 80003e4:	d803      	bhi.n	80003ee <TemperatureErrorCheck+0x1a>
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	2b37      	cmp	r3, #55	; 0x37
 80003ec:	d901      	bls.n	80003f2 <TemperatureErrorCheck+0x1e>
 80003ee:	2303      	movs	r3, #3
 80003f0:	e014      	b.n	800041c <TemperatureErrorCheck+0x48>
	if(*t1 < LOWTEMP_ERR || *t2 < LOWTEMP_ERR) 		return BqPack_ErrLT;
	if(*t1 > HIGHTEMP_WARN || *t2 > HIGHTEMP_WARN) 	return BqPack_WarHT;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	2b2d      	cmp	r3, #45	; 0x2d
 80003f8:	d803      	bhi.n	8000402 <TemperatureErrorCheck+0x2e>
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	881b      	ldrh	r3, [r3, #0]
 80003fe:	2b2d      	cmp	r3, #45	; 0x2d
 8000400:	d901      	bls.n	8000406 <TemperatureErrorCheck+0x32>
 8000402:	2307      	movs	r3, #7
 8000404:	e00a      	b.n	800041c <TemperatureErrorCheck+0x48>
	if(*t1 < LOWTEMP_WARN || *t2 < LOWTEMP_WARN) 	return BqPack_WarLT;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	881b      	ldrh	r3, [r3, #0]
 800040a:	2b04      	cmp	r3, #4
 800040c:	d903      	bls.n	8000416 <TemperatureErrorCheck+0x42>
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	2b04      	cmp	r3, #4
 8000414:	d801      	bhi.n	800041a <TemperatureErrorCheck+0x46>
 8000416:	2308      	movs	r3, #8
 8000418:	e000      	b.n	800041c <TemperatureErrorCheck+0x48>

	return BqPack_OK;
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr

08000426 <VoltageDiffErrorCheck>:

BqPack_Error_Status VoltageDiffErrorCheck(uint16_t *voltage1, uint16_t *voltage2)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
	if(abs(*voltage1 - *voltage2) > BAL_ERR) 	return BqPack_ErrBal;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	461a      	mov	r2, r3
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	881b      	ldrh	r3, [r3, #0]
 800043a:	1ad3      	subs	r3, r2, r3
 800043c:	2b00      	cmp	r3, #0
 800043e:	bfb8      	it	lt
 8000440:	425b      	neglt	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	dd01      	ble.n	800044a <VoltageDiffErrorCheck+0x24>
 8000446:	2309      	movs	r3, #9
 8000448:	e00d      	b.n	8000466 <VoltageDiffErrorCheck+0x40>
	if(abs(*voltage1 - *voltage2) > BAL_WARN) 	return BqPack_WarBal;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	461a      	mov	r2, r3
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	bfb8      	it	lt
 800045a:	425b      	neglt	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	dd01      	ble.n	8000464 <VoltageDiffErrorCheck+0x3e>
 8000460:	230a      	movs	r3, #10
 8000462:	e000      	b.n	8000466 <VoltageDiffErrorCheck+0x40>

	return BqPack_OK;
 8000464:	2300      	movs	r3, #0
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000474:	4b18      	ldr	r3, [pc, #96]	; (80004d8 <MX_CAN_Init+0x68>)
 8000476:	4a19      	ldr	r2, [pc, #100]	; (80004dc <MX_CAN_Init+0x6c>)
 8000478:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 800047a:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <MX_CAN_Init+0x68>)
 800047c:	2208      	movs	r2, #8
 800047e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <MX_CAN_Init+0x68>)
 8000482:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000486:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <MX_CAN_Init+0x68>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <MX_CAN_Init+0x68>)
 8000490:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000494:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_CAN_Init+0x68>)
 8000498:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800049c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_CAN_Init+0x68>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_CAN_Init+0x68>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_CAN_Init+0x68>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_CAN_Init+0x68>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_CAN_Init+0x68>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_CAN_Init+0x68>)
 80004be:	2200      	movs	r2, #0
 80004c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_CAN_Init+0x68>)
 80004c4:	f000 fe84 	bl	80011d0 <HAL_CAN_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80004ce:	f000 fb24 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	2000017c 	.word	0x2000017c
 80004dc:	40006400 	.word	0x40006400

080004e0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a35      	ldr	r2, [pc, #212]	; (80005d0 <HAL_CAN_MspInit+0xf0>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d163      	bne.n	80005c8 <HAL_CAN_MspInit+0xe8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000500:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <HAL_CAN_MspInit+0xf4>)
 8000502:	69db      	ldr	r3, [r3, #28]
 8000504:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <HAL_CAN_MspInit+0xf4>)
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050a:	61d3      	str	r3, [r2, #28]
 800050c:	4b31      	ldr	r3, [pc, #196]	; (80005d4 <HAL_CAN_MspInit+0xf4>)
 800050e:	69db      	ldr	r3, [r3, #28]
 8000510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000514:	613b      	str	r3, [r7, #16]
 8000516:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <HAL_CAN_MspInit+0xf4>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a2d      	ldr	r2, [pc, #180]	; (80005d4 <HAL_CAN_MspInit+0xf4>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <HAL_CAN_MspInit+0xf4>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0308 	and.w	r3, r3, #8
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	4824      	ldr	r0, [pc, #144]	; (80005d8 <HAL_CAN_MspInit+0xf8>)
 8000546:	f001 fe79 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800054a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800054e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000550:	2302      	movs	r3, #2
 8000552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000554:	2303      	movs	r3, #3
 8000556:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	4619      	mov	r1, r3
 800055e:	481e      	ldr	r0, [pc, #120]	; (80005d8 <HAL_CAN_MspInit+0xf8>)
 8000560:	f001 fe6c 	bl	800223c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <HAL_CAN_MspInit+0xfc>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
 800056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
 8000572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000574:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
 800057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800057c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000580:	627b      	str	r3, [r7, #36]	; 0x24
 8000582:	4a16      	ldr	r2, [pc, #88]	; (80005dc <HAL_CAN_MspInit+0xfc>)
 8000584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000586:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 3, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2103      	movs	r1, #3
 800058c:	2013      	movs	r0, #19
 800058e:	f001 fd6e 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000592:	2013      	movs	r0, #19
 8000594:	f001 fd87 	bl	80020a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 3, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2103      	movs	r1, #3
 800059c:	2014      	movs	r0, #20
 800059e:	f001 fd66 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80005a2:	2014      	movs	r0, #20
 80005a4:	f001 fd7f 	bl	80020a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2103      	movs	r1, #3
 80005ac:	2015      	movs	r0, #21
 80005ae:	f001 fd5e 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80005b2:	2015      	movs	r0, #21
 80005b4:	f001 fd77 	bl	80020a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 3, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2103      	movs	r1, #3
 80005bc:	2016      	movs	r0, #22
 80005be:	f001 fd56 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80005c2:	2016      	movs	r0, #22
 80005c4:	f001 fd6f 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40006400 	.word	0x40006400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	40010000 	.word	0x40010000

080005e0 <CanInit>:
/**
 * @brief: Initialize CAN network
 * @param chosen_network
 *
 **/
void CanInit(CAN_HandleTypeDef chosen_network) {
 80005e0:	b084      	sub	sp, #16
 80005e2:	b580      	push	{r7, lr}
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	f107 0c08 	add.w	ip, r7, #8
 80005ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&chosen_network) != HAL_OK) {
 80005ee:	f107 0008 	add.w	r0, r7, #8
 80005f2:	f000 ffb1 	bl	8001558 <HAL_CAN_Start>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <CanInit+0x20>
		Error_Handler();
 80005fc:	f000 fa8d 	bl	8000b1a <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&chosen_network,
 8000600:	2103      	movs	r1, #3
 8000602:	f107 0008 	add.w	r0, r7, #8
 8000606:	f001 fa0a 	bl	8001a1e <HAL_CAN_ActivateNotification>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8000610:	f000 fa83 	bl	8000b1a <Error_Handler>
	}
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <CanSaveReceivedData>:
/**
 * @brief: store received data from chosen network
 * @param chosen_network
 *
 **/
void CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 8000620:	b084      	sub	sp, #16
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
 8000626:	f107 0c08 	add.w	ip, r7, #8
 800062a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 800062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000630:	f103 0220 	add.w	r2, r3, #32
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
 8000634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000636:	333c      	adds	r3, #60	; 0x3c
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000638:	2100      	movs	r1, #0
 800063a:	f107 0008 	add.w	r0, r7, #8
 800063e:	f001 f8dd 	bl	80017fc <HAL_CAN_GetRxMessage>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <CanSaveReceivedData+0x2c>
		/* Reception Error */
		Error_Handler();
 8000648:	f000 fa67 	bl	8000b1a <Error_Handler>
	}
//	CanClearRxDataFrame(ptr_can_rx_frame_template);
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <CanConfigFilter>:
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 *
 **/
void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank,
		uint32_t can_filter_id_high, uint32_t can_filter_id_low,
		uint32_t can_filter_mask_id_high, uint32_t can_filter_mask_id_low) {
 8000658:	b084      	sub	sp, #16
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
 800065e:	f107 0c08 	add.w	ip, r7, #8
 8000662:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 8000666:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <CanConfigFilter+0x6c>)
 800066c:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <CanConfigFilter+0x6c>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <CanConfigFilter+0x6c>)
 8000676:	2201      	movs	r2, #1
 8000678:	61da      	str	r2, [r3, #28]
//	can_filter_template.FilterIdHigh = 0x290 << 5; //can_filter_id_high; //18FF;			//0x321 << 5;
//	can_filter_template.FilterIdLow = 0x00000000; //can_filter_id_low; //50E5;				//0x00000000;
	can_filter_template.FilterIdHigh = 0x0000;
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <CanConfigFilter+0x6c>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
	can_filter_template.FilterIdLow = 0x0000;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <CanConfigFilter+0x6c>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <CanConfigFilter+0x6c>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <CanConfigFilter+0x6c>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
//	can_filter_template.FilterMaskIdHigh = 0x290 << 5;	//0x111 << 5;
//	can_filter_template.FilterMaskIdLow = 0x00000000;
	can_filter_template.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <CanConfigFilter+0x6c>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <CanConfigFilter+0x6c>)
 800069a:	2201      	movs	r2, #1
 800069c:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <CanConfigFilter+0x6c>)
 80006a0:	220e      	movs	r2, #14
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <CanConfigFilter+0x6c>)
 80006a6:	f107 0008 	add.w	r0, r7, #8
 80006aa:	f000 fe8c 	bl	80013c6 <HAL_CAN_ConfigFilter>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <CanConfigFilter+0x60>
		Error_Handler();
 80006b4:	f000 fa31 	bl	8000b1a <Error_Handler>
	}

}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006c0:	b004      	add	sp, #16
 80006c2:	4770      	bx	lr
 80006c4:	200001bc 	.word	0x200001bc

080006c8 <CanSendPdo>:
 *
 **/
void CanSendPdo(CAN_HandleTypeDef chosen_network, uint8_t frame_pdo_id,
		uint8_t number_of_bytes, CanDataFrameInit *ptr_can_frame_template,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 80006c8:	b084      	sub	sp, #16
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	f107 0c08 	add.w	ip, r7, #8
 80006d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_pdo_id;
 80006d6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80006da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006dc:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 80006de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 80006e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 80006ea:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80006ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006f0:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 80006f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006f4:	2200      	movs	r2, #0
 80006f6:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 80006f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006fa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80006fe:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8000700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000702:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000706:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 8000708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800070a:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800070e:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 8000710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000712:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000716:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 8000718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800071a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800071e:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 8000720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000722:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000726:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 8000728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800072a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800072e:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 8000730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000732:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000736:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800073a:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 800073e:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <CanSendPdo+0xb0>)
 8000742:	f107 0008 	add.w	r0, r7, #8
 8000746:	f000 ff4b 	bl	80015e0 <HAL_CAN_AddTxMessage>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <CanSendPdo+0x8c>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000750:	f000 f9e3 	bl	8000b1a <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 8000754:	bf00      	nop
 8000756:	f107 0008 	add.w	r0, r7, #8
 800075a:	f001 f81b 	bl	8001794 <HAL_CAN_GetTxMailboxesFreeLevel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b03      	cmp	r3, #3
 8000762:	d1f8      	bne.n	8000756 <CanSendPdo+0x8e>
	}

	CanClearTxDataFrame(ptr_can_frame_template);
 8000764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000766:	f000 f809 	bl	800077c <CanClearTxDataFrame>

}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000772:	b004      	add	sp, #16
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	2000015c 	.word	0x2000015c

0800077c <CanClearTxDataFrame>:
 * @brief: data sent over usb is not correctly shown when structure is not cleared
 *         after every message sent. Assigning zeros has no influence on the network
 * @param ptr_can_frame_template: chosen structure which helds all the data
 *
 **/
void CanClearTxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->tx_header.StdId = 0x00;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 0;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = 0x0;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = 0x0;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = 0x0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = 0x0;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2200      	movs	r2, #0
 80007b8:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = 0x0;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2200      	movs	r2, #0
 80007be:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = 0x0;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2200      	movs	r2, #0
 80007c4:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = 0x0;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = 0x0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	71da      	strb	r2, [r3, #7]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <CanClearRxDataFrame>:


void CanClearRxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->rx_header.StdId = 0x00;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
	ptr_can_frame_template->rx_header.RTR = CAN_RTR_DATA;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
	ptr_can_frame_template->rx_header.IDE = CAN_ID_STD;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
	ptr_can_frame_template->rx_header.DLC = 0;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	; 0x30

	ptr_can_frame_template->rx_data[0] = 0x0;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ptr_can_frame_template->rx_data[1] = 0x0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	ptr_can_frame_template->rx_data[2] = 0x0;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ptr_can_frame_template->rx_data[3] = 0x0;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2200      	movs	r2, #0
 8000818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ptr_can_frame_template->rx_data[4] = 0x0;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ptr_can_frame_template->rx_data[5] = 0x0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ptr_can_frame_template->rx_data[6] = 0x0;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ptr_can_frame_template->rx_data[7] = 0x0;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <GetRawData>:
 */

#include "current_sensor.h"
#include "can.h"

void GetRawData(CurrentData *current_data, CanDataFrameInit *can_rx_frame){
 8000846:	b4b0      	push	{r4, r5, r7}
 8000848:	b085      	sub	sp, #20
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
	current_data->rx_header = can_rx_frame->rx_header;
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	4615      	mov	r5, r2
 8000856:	f103 0420 	add.w	r4, r3, #32
 800085a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800085c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000862:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	current_data->current = 0;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
	uint32_t buffer;
	buffer = (uint32_t)(can_rx_frame->rx_data[3]) << 0;
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8000872:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	69da      	ldr	r2, [r3, #28]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	441a      	add	r2, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[2]) << 8;
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	69da      	ldr	r2, [r3, #28]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	441a      	add	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[1]) << 16;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800089c:	041b      	lsls	r3, r3, #16
 800089e:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	69da      	ldr	r2, [r3, #28]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	441a      	add	r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	61da      	str	r2, [r3, #28]

	buffer = (uint32_t)(can_rx_frame->rx_data[0]) << 24;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008b2:	061b      	lsls	r3, r3, #24
 80008b4:	60fb      	str	r3, [r7, #12]
	current_data->current += buffer;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	69da      	ldr	r2, [r3, #28]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	441a      	add	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	61da      	str	r2, [r3, #28]

}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bcb0      	pop	{r4, r5, r7}
 80008ca:	4770      	bx	lr

080008cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b088      	sub	sp, #32
 80008d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MX_GPIO_Init+0xd0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a2d      	ldr	r2, [pc, #180]	; (800099c <MX_GPIO_Init+0xd0>)
 80008e6:	f043 0310 	orr.w	r3, r3, #16
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b2b      	ldr	r3, [pc, #172]	; (800099c <MX_GPIO_Init+0xd0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_GPIO_Init+0xd0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a27      	ldr	r2, [pc, #156]	; (800099c <MX_GPIO_Init+0xd0>)
 80008fe:	f043 0320 	orr.w	r3, r3, #32
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_GPIO_Init+0xd0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0320 	and.w	r3, r3, #32
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b22      	ldr	r3, [pc, #136]	; (800099c <MX_GPIO_Init+0xd0>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <MX_GPIO_Init+0xd0>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <MX_GPIO_Init+0xd0>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_GPIO_Init+0xd0>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a1b      	ldr	r2, [pc, #108]	; (800099c <MX_GPIO_Init+0xd0>)
 800092e:	f043 0308 	orr.w	r3, r3, #8
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_GPIO_Init+0xd0>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f003 0308 	and.w	r3, r3, #8
 800093c:	603b      	str	r3, [r7, #0]
 800093e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000946:	4816      	ldr	r0, [pc, #88]	; (80009a0 <MX_GPIO_Init+0xd4>)
 8000948:	f001 fdfc 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000952:	4814      	ldr	r0, [pc, #80]	; (80009a4 <MX_GPIO_Init+0xd8>)
 8000954:	f001 fdf6 	bl	8002544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2302      	movs	r3, #2
 8000968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0xd4>)
 8000972:	f001 fc63 	bl	800223c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800097a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2302      	movs	r3, #2
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_GPIO_Init+0xd8>)
 8000990:	f001 fc54 	bl	800223c <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40010800 	.word	0x40010800

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	b093      	sub	sp, #76	; 0x4c
 80009ac:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ae:	f000 fb89 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b2:	f000 f86d 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b6:	f7ff ff89 	bl	80008cc <MX_GPIO_Init>
  MX_CAN_Init();
 80009ba:	f7ff fd59 	bl	8000470 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80009be:	f000 faad 	bl	8000f1c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80009c2:	f000 fa29 	bl	8000e18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CanConfigFilter(hcan, 0, 0x0000, 0x0000, 0x0000, 0x0000);
 80009c6:	4e2d      	ldr	r6, [pc, #180]	; (8000a7c <main+0xd4>)
 80009c8:	2300      	movs	r3, #0
 80009ca:	930a      	str	r3, [sp, #40]	; 0x28
 80009cc:	2300      	movs	r3, #0
 80009ce:	9309      	str	r3, [sp, #36]	; 0x24
 80009d0:	2300      	movs	r3, #0
 80009d2:	9308      	str	r3, [sp, #32]
 80009d4:	2300      	movs	r3, #0
 80009d6:	9307      	str	r3, [sp, #28]
 80009d8:	2300      	movs	r3, #0
 80009da:	9306      	str	r3, [sp, #24]
 80009dc:	466d      	mov	r5, sp
 80009de:	f106 0410 	add.w	r4, r6, #16
 80009e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80009ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009f2:	f7ff fe31 	bl	8000658 <CanConfigFilter>
  CanInit(hcan);
 80009f6:	4e21      	ldr	r6, [pc, #132]	; (8000a7c <main+0xd4>)
 80009f8:	466d      	mov	r5, sp
 80009fa:	f106 0410 	add.w	r4, r6, #16
 80009fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a06:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a0a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a0e:	f7ff fde7 	bl	80005e0 <CanInit>

  BqPack_StructInit(&battery_pack);
 8000a12:	481b      	ldr	r0, [pc, #108]	; (8000a80 <main+0xd8>)
 8000a14:	f7ff fb9a 	bl	800014c <BqPack_StructInit>
  /* Start the timer */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <main+0xdc>)
 8000a1a:	f002 fa2f 	bl	8002e7c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CanSendPdo(hcan, 0x127, 8, &can_frame_template, 0x13, 0xBB, 0x20, 0x16, 0, 0, 0, 0);
 8000a1e:	4e17      	ldr	r6, [pc, #92]	; (8000a7c <main+0xd4>)
 8000a20:	2300      	movs	r3, #0
 8000a22:	9310      	str	r3, [sp, #64]	; 0x40
 8000a24:	2300      	movs	r3, #0
 8000a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a28:	2300      	movs	r3, #0
 8000a2a:	930e      	str	r3, [sp, #56]	; 0x38
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	930d      	str	r3, [sp, #52]	; 0x34
 8000a30:	2316      	movs	r3, #22
 8000a32:	930c      	str	r3, [sp, #48]	; 0x30
 8000a34:	2320      	movs	r3, #32
 8000a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a38:	23bb      	movs	r3, #187	; 0xbb
 8000a3a:	930a      	str	r3, [sp, #40]	; 0x28
 8000a3c:	2313      	movs	r3, #19
 8000a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <main+0xe0>)
 8000a42:	9308      	str	r3, [sp, #32]
 8000a44:	2308      	movs	r3, #8
 8000a46:	9307      	str	r3, [sp, #28]
 8000a48:	2327      	movs	r3, #39	; 0x27
 8000a4a:	9306      	str	r3, [sp, #24]
 8000a4c:	466d      	mov	r5, sp
 8000a4e:	f106 0410 	add.w	r4, r6, #16
 8000a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8000a5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a62:	f7ff fe31 	bl	80006c8 <CanSendPdo>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	4808      	ldr	r0, [pc, #32]	; (8000a8c <main+0xe4>)
 8000a6c:	f001 fd82 	bl	8002574 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000a70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a74:	f000 fb88 	bl	8001188 <HAL_Delay>
	  CanSendPdo(hcan, 0x127, 8, &can_frame_template, 0x13, 0xBB, 0x20, 0x16, 0, 0, 0, 0);
 8000a78:	e7d1      	b.n	8000a1e <main+0x76>
 8000a7a:	bf00      	nop
 8000a7c:	2000017c 	.word	0x2000017c
 8000a80:	20000230 	.word	0x20000230
 8000a84:	2000026c 	.word	0x2000026c
 8000a88:	20000118 	.word	0x20000118
 8000a8c:	40011000 	.word	0x40011000

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b090      	sub	sp, #64	; 0x40
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0318 	add.w	r3, r7, #24
 8000a9a:	2228      	movs	r2, #40	; 0x28
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f003 fa60 	bl	8003f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000acc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000ace:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8000ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fd65 	bl	80025a8 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ae4:	f000 f819 	bl	8000b1a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2302      	movs	r3, #2
 8000aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2102      	movs	r1, #2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 ffd0 	bl	8002aa8 <HAL_RCC_ClockConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b0e:	f000 f804 	bl	8000b1a <Error_Handler>
  }
}
 8000b12:	bf00      	nop
 8000b14:	3740      	adds	r7, #64	; 0x40
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1e:	b672      	cpsid	i
}
 8000b20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <Error_Handler+0x8>

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	61d3      	str	r3, [r2, #28]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_MspInit+0x60>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_MspInit+0x60>)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr

08000bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 fabf 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000bde:	f000 ff43 	bl	8001a68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000017c 	.word	0x2000017c

08000bec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bf2:	480f      	ldr	r0, [pc, #60]	; (8000c30 <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8000bf4:	f000 ff38 	bl	8001a68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* Receive CAN frame procedure */
  CanClearRxDataFrame(&can_rx_frame_template);
 8000bf8:	480e      	ldr	r0, [pc, #56]	; (8000c34 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8000bfa:	f7ff fdef 	bl	80007dc <CanClearRxDataFrame>
  CanSaveReceivedData(hcan, &can_rx_frame_template);
 8000bfe:	4e0c      	ldr	r6, [pc, #48]	; (8000c30 <USB_LP_CAN1_RX0_IRQHandler+0x44>)
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8000c02:	9306      	str	r3, [sp, #24]
 8000c04:	466d      	mov	r5, sp
 8000c06:	f106 0410 	add.w	r4, r6, #16
 8000c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c12:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c16:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c1a:	f7ff fd01 	bl	8000620 <CanSaveReceivedData>
  GetRawData(&current_data, &can_rx_frame_template);
 8000c1e:	4905      	ldr	r1, [pc, #20]	; (8000c34 <USB_LP_CAN1_RX0_IRQHandler+0x48>)
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <USB_LP_CAN1_RX0_IRQHandler+0x4c>)
 8000c22:	f7ff fe10 	bl	8000846 <GetRawData>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3704      	adds	r7, #4
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000017c 	.word	0x2000017c
 8000c34:	200001e4 	.word	0x200001e4
 8000c38:	2000024c 	.word	0x2000024c

08000c3c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <CAN1_RX1_IRQHandler+0x10>)
 8000c42:	f000 ff11 	bl	8001a68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */


  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000017c 	.word	0x2000017c

08000c50 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <CAN1_SCE_IRQHandler+0x10>)
 8000c56:	f000 ff07 	bl	8001a68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000017c 	.word	0x2000017c

08000c64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM2_IRQHandler+0x10>)
 8000c6a:	f002 f959 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000026c 	.word	0x2000026c

08000c78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <USART1_IRQHandler+0x10>)
 8000c7e:	f002 fd69 	bl	8003754 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200002b4 	.word	0x200002b4

08000c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	return 1;
 8000c90:	2301      	movs	r3, #1
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <_kill>:

int _kill(int pid, int sig)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ca4:	f003 f934 	bl	8003f10 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2216      	movs	r2, #22
 8000cac:	601a      	str	r2, [r3, #0]
	return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_exit>:

void _exit (int status)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffe7 	bl	8000c9a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ccc:	e7fe      	b.n	8000ccc <_exit+0x12>

08000cce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e00a      	b.n	8000cf6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ce0:	f3af 8000 	nop.w
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1c5a      	adds	r2, r3, #1
 8000cea:	60ba      	str	r2, [r7, #8]
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	dbf0      	blt.n	8000ce0 <_read+0x12>
	}

return len;
 8000cfe:	687b      	ldr	r3, [r7, #4]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e009      	b.n	8000d2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	60ba      	str	r2, [r7, #8]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	dbf1      	blt.n	8000d1a <_write+0x12>
	}
	return len;
 8000d36:	687b      	ldr	r3, [r7, #4]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <_close>:

int _close(int file)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	return -1;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
	return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <_isatty>:

int _isatty(int file)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	return 1;
 8000d7c:	2301      	movs	r3, #1
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr

08000d88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr

08000da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da8:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <_sbrk+0x5c>)
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <_sbrk+0x60>)
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db4:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <_sbrk+0x64>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <_sbrk+0x68>)
 8000dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <_sbrk+0x64>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4413      	add	r3, r2
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d207      	bcs.n	8000de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd0:	f003 f89e 	bl	8003f10 <__errno>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295
 8000dde:	e009      	b.n	8000df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <_sbrk+0x64>)
 8000df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000df2:	68fb      	ldr	r3, [r7, #12]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3718      	adds	r7, #24
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20005000 	.word	0x20005000
 8000e00:	00000400 	.word	0x00000400
 8000e04:	2000008c 	.word	0x2000008c
 8000e08:	20000310 	.word	0x20000310

08000e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e5e:	f001 ffbd 	bl	8002ddc <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e68:	f7ff fe57 	bl	8000b1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e7a:	f002 f959 	bl	8003130 <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e84:	f7ff fe49 	bl	8000b1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e96:	f002 fb2b 	bl	80034f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ea0:	f7ff fe3b 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000026c 	.word	0x2000026c

08000eb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d113      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_TIM_Base_MspInit+0x44>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201c      	movs	r0, #28
 8000ee0:	f001 f8c5 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee4:	201c      	movs	r0, #28
 8000ee6:	f001 f8de 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)"rqst\r", 5);
 8000f00:	2205      	movs	r2, #5
 8000f02:	4904      	ldr	r1, [pc, #16]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f06:	f002 fbb0 	bl	800366a <HAL_UART_Transmit_IT>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	08005100 	.word	0x08005100
 8000f18:	200002b4 	.word	0x200002b4

08000f1c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <MX_USART1_UART_Init+0x58>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f52:	4807      	ldr	r0, [pc, #28]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f54:	f002 fb3c 	bl	80035d0 <HAL_UART_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f5e:	f7ff fddc 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  // Immediately start receiving
  HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	4904      	ldr	r1, [pc, #16]	; (8000f78 <MX_USART1_UART_Init+0x5c>)
 8000f66:	4802      	ldr	r0, [pc, #8]	; (8000f70 <MX_USART1_UART_Init+0x54>)
 8000f68:	f002 fbc3 	bl	80036f2 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200002b4 	.word	0x200002b4
 8000f74:	40013800 	.word	0x40013800
 8000f78:	20000090 	.word	0x20000090

08000f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a20      	ldr	r2, [pc, #128]	; (8001018 <HAL_UART_MspInit+0x9c>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d139      	bne.n	8001010 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <HAL_UART_MspInit+0xa0>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	4a1e      	ldr	r2, [pc, #120]	; (800101c <HAL_UART_MspInit+0xa0>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6193      	str	r3, [r2, #24]
 8000fa8:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_UART_MspInit+0xa0>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_UART_MspInit+0xa0>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a18      	ldr	r2, [pc, #96]	; (800101c <HAL_UART_MspInit+0xa0>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_UART_MspInit+0xa0>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480f      	ldr	r0, [pc, #60]	; (8001020 <HAL_UART_MspInit+0xa4>)
 8000fe2:	f001 f92b 	bl	800223c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	; (8001020 <HAL_UART_MspInit+0xa4>)
 8000ffc:	f001 f91e 	bl	800223c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2102      	movs	r1, #2
 8001004:	2025      	movs	r0, #37	; 0x25
 8001006:	f001 f832 	bl	800206e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800100a:	2025      	movs	r0, #37	; 0x25
 800100c:	f001 f84b 	bl	80020a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40013800 	.word	0x40013800
 800101c:	40021000 	.word	0x40021000
 8001020:	40010800 	.word	0x40010800

08001024 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <HAL_UART_RxCpltCallback+0x40>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d112      	bne.n	800105c <HAL_UART_RxCpltCallback+0x38>
	{
		/* Manage battery pack */
		BqPack_StructUpdate_MSP430(&battery_pack, rx_buffer);
 8001036:	490c      	ldr	r1, [pc, #48]	; (8001068 <HAL_UART_RxCpltCallback+0x44>)
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <HAL_UART_RxCpltCallback+0x48>)
 800103a:	f7ff f8d1 	bl	80001e0 <BqPack_StructUpdate_MSP430>
		BqPack_StructUpdate_CurrSensor(&battery_pack, &current_data);
 800103e:	490c      	ldr	r1, [pc, #48]	; (8001070 <HAL_UART_RxCpltCallback+0x4c>)
 8001040:	480a      	ldr	r0, [pc, #40]	; (800106c <HAL_UART_RxCpltCallback+0x48>)
 8001042:	f7ff f89e 	bl	8000182 <BqPack_StructUpdate_CurrSensor>
		BqPack_RecalculateData(&battery_pack);
 8001046:	4809      	ldr	r0, [pc, #36]	; (800106c <HAL_UART_RxCpltCallback+0x48>)
 8001048:	f7ff f8a9 	bl	800019e <BqPack_RecalculateData>

		/* Check for errors and send message about them */
		BqPack_CheckForErrors(&battery_pack);
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <HAL_UART_RxCpltCallback+0x48>)
 800104e:	f7ff f951 	bl	80002f4 <BqPack_CheckForErrors>
		/* Create a frame based on that*/

		/* Send a frame */

		/* Restart Uart */
		HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	4904      	ldr	r1, [pc, #16]	; (8001068 <HAL_UART_RxCpltCallback+0x44>)
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <HAL_UART_RxCpltCallback+0x50>)
 8001058:	f002 fb4b 	bl	80036f2 <HAL_UART_Receive_IT>
	}
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40013800 	.word	0x40013800
 8001068:	20000090 	.word	0x20000090
 800106c:	20000230 	.word	0x20000230
 8001070:	2000024c 	.word	0x2000024c
 8001074:	200002b4 	.word	0x200002b4

08001078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480c      	ldr	r0, [pc, #48]	; (80010ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800107c:	4a0d      	ldr	r2, [pc, #52]	; (80010b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001090:	4c0a      	ldr	r4, [pc, #40]	; (80010bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800109e:	f7ff feb5 	bl	8000e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f002 ff3b 	bl	8003f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a6:	f7ff fc7f 	bl	80009a8 <main>
  bx lr
 80010aa:	4770      	bx	lr
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010b4:	08005384 	.word	0x08005384
  ldr r2, =_sbss
 80010b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010bc:	2000030c 	.word	0x2000030c

080010c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_2_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x28>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x28>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 ffbf 	bl	8002058 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fd20 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ffd7 	bl	80020c2 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 ff9f 	bl	800206e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x1c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <HAL_IncTick+0x20>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000008 	.word	0x20000008
 8001170:	200002f8 	.word	0x200002f8

08001174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_GetTick+0x10>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	200002f8 	.word	0x200002f8

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff fff0 	bl	8001174 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffe0 	bl	8001174 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008

080011d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e0ed      	b.n	80013be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d102      	bne.n	80011f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff f976 	bl	80004e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001204:	f7ff ffb6 	bl	8001174 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800120a:	e012      	b.n	8001232 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800120c:	f7ff ffb2 	bl	8001174 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d90b      	bls.n	8001232 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2205      	movs	r2, #5
 800122a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0c5      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0e5      	beq.n	800120c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0202 	bic.w	r2, r2, #2
 800124e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001250:	f7ff ff90 	bl	8001174 <HAL_GetTick>
 8001254:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001256:	e012      	b.n	800127e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001258:	f7ff ff8c 	bl	8001174 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b0a      	cmp	r3, #10
 8001264:	d90b      	bls.n	800127e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2205      	movs	r2, #5
 8001276:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e09f      	b.n	80013be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e5      	bne.n	8001258 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7e1b      	ldrb	r3, [r3, #24]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7e5b      	ldrb	r3, [r3, #25]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d108      	bne.n	80012d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	7e9b      	ldrb	r3, [r3, #26]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e007      	b.n	800130a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0220 	bic.w	r2, r2, #32
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7edb      	ldrb	r3, [r3, #27]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d108      	bne.n	8001324 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0210 	bic.w	r2, r2, #16
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e007      	b.n	8001334 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0210 	orr.w	r2, r2, #16
 8001332:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7f1b      	ldrb	r3, [r3, #28]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d108      	bne.n	800134e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0208 	orr.w	r2, r2, #8
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	e007      	b.n	800135e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0208 	bic.w	r2, r2, #8
 800135c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7f5b      	ldrb	r3, [r3, #29]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0204 	orr.w	r2, r2, #4
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e007      	b.n	8001388 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0204 	bic.w	r2, r2, #4
 8001386:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689a      	ldr	r2, [r3, #8]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	ea42 0103 	orr.w	r1, r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	1e5a      	subs	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b087      	sub	sp, #28
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013dc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013de:	7cfb      	ldrb	r3, [r7, #19]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d003      	beq.n	80013ec <HAL_CAN_ConfigFilter+0x26>
 80013e4:	7cfb      	ldrb	r3, [r7, #19]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	f040 80aa 	bne.w	8001540 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013f2:	f043 0201 	orr.w	r2, r3, #1
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	695b      	ldr	r3, [r3, #20]
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	2201      	movs	r2, #1
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	43db      	mvns	r3, r3
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d123      	bne.n	800146e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	401a      	ands	r2, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001448:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3248      	adds	r2, #72	; 0x48
 800144e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001462:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001464:	6979      	ldr	r1, [r7, #20]
 8001466:	3348      	adds	r3, #72	; 0x48
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	440b      	add	r3, r1
 800146c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d122      	bne.n	80014bc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	431a      	orrs	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001496:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3248      	adds	r2, #72	; 0x48
 800149c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014b2:	6979      	ldr	r1, [r7, #20]
 80014b4:	3348      	adds	r3, #72	; 0x48
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80014d6:	e007      	b.n	80014e8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001502:	e007      	b.n	8001514 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	431a      	orrs	r2, r3
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d107      	bne.n	800152c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	431a      	orrs	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001532:	f023 0201 	bic.w	r2, r3, #1
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	e006      	b.n	800154e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
  }
}
 800154e:	4618      	mov	r0, r3
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d12e      	bne.n	80015ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001584:	f7ff fdf6 	bl	8001174 <HAL_GetTick>
 8001588:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800158a:	e012      	b.n	80015b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800158c:	f7ff fdf2 	bl	8001174 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b0a      	cmp	r3, #10
 8001598:	d90b      	bls.n	80015b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2205      	movs	r2, #5
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e012      	b.n	80015d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e5      	bne.n	800158c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e006      	b.n	80015d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d003      	beq.n	800160c <HAL_CAN_AddTxMessage+0x2c>
 8001604:	7ffb      	ldrb	r3, [r7, #31]
 8001606:	2b02      	cmp	r3, #2
 8001608:	f040 80b8 	bne.w	800177c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10a      	bne.n	800162c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800161c:	2b00      	cmp	r3, #0
 800161e:	d105      	bne.n	800162c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80a0 	beq.w	800176c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	0e1b      	lsrs	r3, r3, #24
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d907      	bls.n	800164c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e09e      	b.n	800178a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800164c:	2201      	movs	r2, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	409a      	lsls	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	6809      	ldr	r1, [r1, #0]
 800166c:	431a      	orrs	r2, r3
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3318      	adds	r3, #24
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	440b      	add	r3, r1
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	e00f      	b.n	800169a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001684:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800168e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3318      	adds	r3, #24
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3318      	adds	r3, #24
 80016a6:	011b      	lsls	r3, r3, #4
 80016a8:	440b      	add	r3, r1
 80016aa:	3304      	adds	r3, #4
 80016ac:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	7d1b      	ldrb	r3, [r3, #20]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d111      	bne.n	80016da <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3318      	adds	r3, #24
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	4413      	add	r3, r2
 80016c2:	3304      	adds	r3, #4
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	6811      	ldr	r1, [r2, #0]
 80016ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3318      	adds	r3, #24
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	440b      	add	r3, r1
 80016d6:	3304      	adds	r3, #4
 80016d8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3307      	adds	r3, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	061a      	lsls	r2, r3, #24
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3306      	adds	r3, #6
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3305      	adds	r3, #5
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	4313      	orrs	r3, r2
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	3204      	adds	r2, #4
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	4610      	mov	r0, r2
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	6811      	ldr	r1, [r2, #0]
 8001702:	ea43 0200 	orr.w	r2, r3, r0
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	440b      	add	r3, r1
 800170c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001710:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3302      	adds	r3, #2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4610      	mov	r0, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	6811      	ldr	r1, [r2, #0]
 8001738:	ea43 0200 	orr.w	r2, r3, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	440b      	add	r3, r1
 8001742:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001746:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3318      	adds	r3, #24
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	6811      	ldr	r1, [r2, #0]
 800175a:	f043 0201 	orr.w	r2, r3, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	3318      	adds	r3, #24
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	440b      	add	r3, r1
 8001766:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	e00e      	b.n	800178a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e006      	b.n	800178a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
  }
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80017a8:	7afb      	ldrb	r3, [r7, #11]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d002      	beq.n	80017b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d11d      	bne.n	80017f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d003      	beq.n	8001820 <HAL_CAN_GetRxMessage+0x24>
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b02      	cmp	r3, #2
 800181c:	f040 80f3 	bne.w	8001a06 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10e      	bne.n	8001844 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d116      	bne.n	8001862 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0e7      	b.n	8001a14 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0d8      	b.n	8001a14 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	331b      	adds	r3, #27
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0204 	and.w	r2, r3, #4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10c      	bne.n	800189a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	331b      	adds	r3, #27
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0d5b      	lsrs	r3, r3, #21
 8001890:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e00b      	b.n	80018b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	331b      	adds	r3, #27
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	331b      	adds	r3, #27
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0202 	and.w	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	331b      	adds	r3, #27
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	3304      	adds	r3, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 020f 	and.w	r2, r3, #15
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	331b      	adds	r3, #27
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	3304      	adds	r3, #4
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	331b      	adds	r3, #27
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4413      	add	r3, r2
 8001904:	3304      	adds	r3, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0c1b      	lsrs	r3, r3, #16
 800190a:	b29a      	uxth	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4413      	add	r3, r2
 800191a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	0a1a      	lsrs	r2, r3, #8
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	4413      	add	r3, r2
 800194a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0c1a      	lsrs	r2, r3, #16
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3302      	adds	r3, #2
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	4413      	add	r3, r2
 8001964:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	0e1a      	lsrs	r2, r3, #24
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3303      	adds	r3, #3
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4413      	add	r3, r2
 800197e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3304      	adds	r3, #4
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	011b      	lsls	r3, r3, #4
 8001994:	4413      	add	r3, r2
 8001996:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0a1a      	lsrs	r2, r3, #8
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	3305      	adds	r3, #5
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	011b      	lsls	r3, r3, #4
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	0c1a      	lsrs	r2, r3, #16
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	3306      	adds	r3, #6
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	011b      	lsls	r3, r3, #4
 80019c8:	4413      	add	r3, r2
 80019ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0e1a      	lsrs	r2, r3, #24
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3307      	adds	r3, #7
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d108      	bne.n	80019f2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0220 	orr.w	r2, r2, #32
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	e007      	b.n	8001a02 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0220 	orr.w	r2, r2, #32
 8001a00:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e006      	b.n	8001a14 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
  }
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a30:	7bfb      	ldrb	r3, [r7, #15]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d002      	beq.n	8001a3c <HAL_CAN_ActivateNotification+0x1e>
 8001a36:	7bfb      	ldrb	r3, [r7, #15]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d109      	bne.n	8001a50 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6959      	ldr	r1, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e006      	b.n	8001a5e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	; 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d07c      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d023      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f983 	bl	8001dd6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ad0:	e016      	b.n	8001b00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e00c      	b.n	8001b00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d004      	beq.n	8001afa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
 8001af8:	e002      	b.n	8001b00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f986 	bl	8001e0c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d024      	beq.n	8001b54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f962 	bl	8001de8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b24:	e016      	b.n	8001b54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
 8001b38:	e00c      	b.n	8001b54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d004      	beq.n	8001b4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	e002      	b.n	8001b54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f965 	bl	8001e1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d024      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f941 	bl	8001dfa <HAL_CAN_TxMailbox2CompleteCallback>
 8001b78:	e016      	b.n	8001ba8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e00c      	b.n	8001ba8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	e002      	b.n	8001ba8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f944 	bl	8001e30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ba8:	6a3b      	ldr	r3, [r7, #32]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00c      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2208      	movs	r2, #8
 8001be6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f933 	bl	8001e54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d009      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f91b 	bl	8001e42 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00c      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	f003 0320 	and.w	r3, r3, #32
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d006      	beq.n	8001c52 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f913 	bl	8001e78 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d009      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8fb 	bl	8001e66 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2210      	movs	r2, #16
 8001c8a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f8fc 	bl	8001e8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00b      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2208      	movs	r2, #8
 8001cac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8f4 	bl	8001e9c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d07b      	beq.n	8001db6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d072      	beq.n	8001dae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d008      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d008      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d003      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d008      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d043      	beq.n	8001dae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03e      	beq.n	8001dae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d36:	2b60      	cmp	r3, #96	; 0x60
 8001d38:	d02b      	beq.n	8001d92 <HAL_CAN_IRQHandler+0x32a>
 8001d3a:	2b60      	cmp	r3, #96	; 0x60
 8001d3c:	d82e      	bhi.n	8001d9c <HAL_CAN_IRQHandler+0x334>
 8001d3e:	2b50      	cmp	r3, #80	; 0x50
 8001d40:	d022      	beq.n	8001d88 <HAL_CAN_IRQHandler+0x320>
 8001d42:	2b50      	cmp	r3, #80	; 0x50
 8001d44:	d82a      	bhi.n	8001d9c <HAL_CAN_IRQHandler+0x334>
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	d019      	beq.n	8001d7e <HAL_CAN_IRQHandler+0x316>
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	d826      	bhi.n	8001d9c <HAL_CAN_IRQHandler+0x334>
 8001d4e:	2b30      	cmp	r3, #48	; 0x30
 8001d50:	d010      	beq.n	8001d74 <HAL_CAN_IRQHandler+0x30c>
 8001d52:	2b30      	cmp	r3, #48	; 0x30
 8001d54:	d822      	bhi.n	8001d9c <HAL_CAN_IRQHandler+0x334>
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d002      	beq.n	8001d60 <HAL_CAN_IRQHandler+0x2f8>
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d005      	beq.n	8001d6a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d5e:	e01d      	b.n	8001d9c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	f043 0308 	orr.w	r3, r3, #8
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d68:	e019      	b.n	8001d9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d72:	e014      	b.n	8001d9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	f043 0320 	orr.w	r3, r3, #32
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d7c:	e00f      	b.n	8001d9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d86:	e00a      	b.n	8001d9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d90:	e005      	b.n	8001d9e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d9a:	e000      	b.n	8001d9e <HAL_CAN_IRQHandler+0x336>
            break;
 8001d9c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001dac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2204      	movs	r2, #4
 8001db4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f870 	bl	8001eae <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4906      	ldr	r1, [pc, #24]	; (8001f58 <__NVIC_EnableIRQ+0x34>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002024:	d301      	bcc.n	800202a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002026:	2301      	movs	r3, #1
 8002028:	e00f      	b.n	800204a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <SysTick_Config+0x40>)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002032:	210f      	movs	r1, #15
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f7ff ff90 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800203c:	4b05      	ldr	r3, [pc, #20]	; (8002054 <SysTick_Config+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SysTick_Config+0x40>)
 8002044:	2207      	movs	r2, #7
 8002046:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff2d 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002080:	f7ff ff42 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 8002084:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7ff ff90 	bl	8001fb0 <NVIC_EncodePriority>
 8002090:	4602      	mov	r2, r0
 8002092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff5f 	bl	8001f5c <__NVIC_SetPriority>
}
 800209e:	bf00      	nop
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff35 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffa2 	bl	8002014 <SysTick_Config>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020da:	b480      	push	{r7}
 80020dc:	b085      	sub	sp, #20
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d008      	beq.n	8002102 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2204      	movs	r2, #4
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e020      	b.n	8002144 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 020e 	bic.w	r2, r2, #14
 8002110:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0201 	bic.w	r2, r2, #1
 8002120:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	2101      	movs	r1, #1
 800212c:	fa01 f202 	lsl.w	r2, r1, r2
 8002130:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
	...

08002150 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002162:	2b02      	cmp	r3, #2
 8002164:	d005      	beq.n	8002172 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2204      	movs	r2, #4
 800216a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e051      	b.n	8002216 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 020e 	bic.w	r2, r2, #14
 8002180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 0201 	bic.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <HAL_DMA_Abort_IT+0xd0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d029      	beq.n	80021f0 <HAL_DMA_Abort_IT+0xa0>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a20      	ldr	r2, [pc, #128]	; (8002224 <HAL_DMA_Abort_IT+0xd4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d022      	beq.n	80021ec <HAL_DMA_Abort_IT+0x9c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1f      	ldr	r2, [pc, #124]	; (8002228 <HAL_DMA_Abort_IT+0xd8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d01a      	beq.n	80021e6 <HAL_DMA_Abort_IT+0x96>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <HAL_DMA_Abort_IT+0xdc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d012      	beq.n	80021e0 <HAL_DMA_Abort_IT+0x90>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_DMA_Abort_IT+0xe0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00a      	beq.n	80021da <HAL_DMA_Abort_IT+0x8a>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1a      	ldr	r2, [pc, #104]	; (8002234 <HAL_DMA_Abort_IT+0xe4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d102      	bne.n	80021d4 <HAL_DMA_Abort_IT+0x84>
 80021ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021d2:	e00e      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021d8:	e00b      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021de:	e008      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	e005      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ea:	e002      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021ec:	2310      	movs	r3, #16
 80021ee:	e000      	b.n	80021f2 <HAL_DMA_Abort_IT+0xa2>
 80021f0:	2301      	movs	r3, #1
 80021f2:	4a11      	ldr	r2, [pc, #68]	; (8002238 <HAL_DMA_Abort_IT+0xe8>)
 80021f4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
    } 
  }
  return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40020008 	.word	0x40020008
 8002224:	4002001c 	.word	0x4002001c
 8002228:	40020030 	.word	0x40020030
 800222c:	40020044 	.word	0x40020044
 8002230:	40020058 	.word	0x40020058
 8002234:	4002006c 	.word	0x4002006c
 8002238:	40020000 	.word	0x40020000

0800223c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800223c:	b480      	push	{r7}
 800223e:	b08b      	sub	sp, #44	; 0x2c
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224e:	e169      	b.n	8002524 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002250:	2201      	movs	r2, #1
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	429a      	cmp	r2, r3
 800226a:	f040 8158 	bne.w	800251e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a9a      	ldr	r2, [pc, #616]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d05e      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002278:	4a98      	ldr	r2, [pc, #608]	; (80024dc <HAL_GPIO_Init+0x2a0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d875      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800227e:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d058      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002284:	4a96      	ldr	r2, [pc, #600]	; (80024e0 <HAL_GPIO_Init+0x2a4>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d86f      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 800228a:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d052      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 8002290:	4a94      	ldr	r2, [pc, #592]	; (80024e4 <HAL_GPIO_Init+0x2a8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d869      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 8002296:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d04c      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 800229c:	4a92      	ldr	r2, [pc, #584]	; (80024e8 <HAL_GPIO_Init+0x2ac>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d863      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022a2:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d046      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
 80022a8:	4a90      	ldr	r2, [pc, #576]	; (80024ec <HAL_GPIO_Init+0x2b0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d85d      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d82a      	bhi.n	8002308 <HAL_GPIO_Init+0xcc>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d859      	bhi.n	800236a <HAL_GPIO_Init+0x12e>
 80022b6:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_GPIO_Init+0x80>)
 80022b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022bc:	08002337 	.word	0x08002337
 80022c0:	08002311 	.word	0x08002311
 80022c4:	08002323 	.word	0x08002323
 80022c8:	08002365 	.word	0x08002365
 80022cc:	0800236b 	.word	0x0800236b
 80022d0:	0800236b 	.word	0x0800236b
 80022d4:	0800236b 	.word	0x0800236b
 80022d8:	0800236b 	.word	0x0800236b
 80022dc:	0800236b 	.word	0x0800236b
 80022e0:	0800236b 	.word	0x0800236b
 80022e4:	0800236b 	.word	0x0800236b
 80022e8:	0800236b 	.word	0x0800236b
 80022ec:	0800236b 	.word	0x0800236b
 80022f0:	0800236b 	.word	0x0800236b
 80022f4:	0800236b 	.word	0x0800236b
 80022f8:	0800236b 	.word	0x0800236b
 80022fc:	0800236b 	.word	0x0800236b
 8002300:	08002319 	.word	0x08002319
 8002304:	0800232d 	.word	0x0800232d
 8002308:	4a79      	ldr	r2, [pc, #484]	; (80024f0 <HAL_GPIO_Init+0x2b4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800230e:	e02c      	b.n	800236a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	623b      	str	r3, [r7, #32]
          break;
 8002316:	e029      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	3304      	adds	r3, #4
 800231e:	623b      	str	r3, [r7, #32]
          break;
 8002320:	e024      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	3308      	adds	r3, #8
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e01f      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	330c      	adds	r3, #12
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e01a      	b.n	800236c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d102      	bne.n	8002344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800233e:	2304      	movs	r3, #4
 8002340:	623b      	str	r3, [r7, #32]
          break;
 8002342:	e013      	b.n	800236c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d105      	bne.n	8002358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800234c:	2308      	movs	r3, #8
 800234e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	611a      	str	r2, [r3, #16]
          break;
 8002356:	e009      	b.n	800236c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002358:	2308      	movs	r3, #8
 800235a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	615a      	str	r2, [r3, #20]
          break;
 8002362:	e003      	b.n	800236c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
          break;
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x130>
          break;
 800236a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2bff      	cmp	r3, #255	; 0xff
 8002370:	d801      	bhi.n	8002376 <HAL_GPIO_Init+0x13a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	e001      	b.n	800237a <HAL_GPIO_Init+0x13e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d802      	bhi.n	8002388 <HAL_GPIO_Init+0x14c>
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	e002      	b.n	800238e <HAL_GPIO_Init+0x152>
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3b08      	subs	r3, #8
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	210f      	movs	r1, #15
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	401a      	ands	r2, r3
 80023a0:	6a39      	ldr	r1, [r7, #32]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80b1 	beq.w	800251e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023bc:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a4c      	ldr	r2, [pc, #304]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_GPIO_Init+0x2b8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d4:	4a48      	ldr	r2, [pc, #288]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	3302      	adds	r3, #2
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f003 0303 	and.w	r3, r3, #3
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a40      	ldr	r2, [pc, #256]	; (80024fc <HAL_GPIO_Init+0x2c0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d013      	beq.n	8002428 <HAL_GPIO_Init+0x1ec>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3f      	ldr	r2, [pc, #252]	; (8002500 <HAL_GPIO_Init+0x2c4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00d      	beq.n	8002424 <HAL_GPIO_Init+0x1e8>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a3e      	ldr	r2, [pc, #248]	; (8002504 <HAL_GPIO_Init+0x2c8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <HAL_GPIO_Init+0x1e4>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3d      	ldr	r2, [pc, #244]	; (8002508 <HAL_GPIO_Init+0x2cc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_GPIO_Init+0x1e0>
 8002418:	2303      	movs	r3, #3
 800241a:	e006      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 800241c:	2304      	movs	r3, #4
 800241e:	e004      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002420:	2302      	movs	r3, #2
 8002422:	e002      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002424:	2301      	movs	r3, #1
 8002426:	e000      	b.n	800242a <HAL_GPIO_Init+0x1ee>
 8002428:	2300      	movs	r3, #0
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	f002 0203 	and.w	r2, r2, #3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	4093      	lsls	r3, r2
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800243a:	492f      	ldr	r1, [pc, #188]	; (80024f8 <HAL_GPIO_Init+0x2bc>)
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	492c      	ldr	r1, [pc, #176]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	600b      	str	r3, [r1, #0]
 8002460:	e006      	b.n	8002470 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	43db      	mvns	r3, r3
 800246a:	4928      	ldr	r1, [pc, #160]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800246c:	4013      	ands	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4922      	ldr	r1, [pc, #136]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800248a:	4b20      	ldr	r3, [pc, #128]	; (800250c <HAL_GPIO_Init+0x2d0>)
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	43db      	mvns	r3, r3
 8002492:	491e      	ldr	r1, [pc, #120]	; (800250c <HAL_GPIO_Init+0x2d0>)
 8002494:	4013      	ands	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d006      	beq.n	80024b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	4918      	ldr	r1, [pc, #96]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	608b      	str	r3, [r1, #8]
 80024b0:	e006      	b.n	80024c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024b2:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	4914      	ldr	r1, [pc, #80]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024bc:	4013      	ands	r3, r2
 80024be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d021      	beq.n	8002510 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024cc:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	490e      	ldr	r1, [pc, #56]	; (800250c <HAL_GPIO_Init+0x2d0>)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60cb      	str	r3, [r1, #12]
 80024d8:	e021      	b.n	800251e <HAL_GPIO_Init+0x2e2>
 80024da:	bf00      	nop
 80024dc:	10320000 	.word	0x10320000
 80024e0:	10310000 	.word	0x10310000
 80024e4:	10220000 	.word	0x10220000
 80024e8:	10210000 	.word	0x10210000
 80024ec:	10120000 	.word	0x10120000
 80024f0:	10110000 	.word	0x10110000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40010800 	.word	0x40010800
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40011000 	.word	0x40011000
 8002508:	40011400 	.word	0x40011400
 800250c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_GPIO_Init+0x304>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	43db      	mvns	r3, r3
 8002518:	4909      	ldr	r1, [pc, #36]	; (8002540 <HAL_GPIO_Init+0x304>)
 800251a:	4013      	ands	r3, r2
 800251c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	3301      	adds	r3, #1
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	f47f ae8e 	bne.w	8002250 <HAL_GPIO_Init+0x14>
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	372c      	adds	r7, #44	; 0x2c
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40010400 	.word	0x40010400

08002544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	4613      	mov	r3, r2
 8002552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002560:	e003      	b.n	800256a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002562:	887b      	ldrh	r3, [r7, #2]
 8002564:	041a      	lsls	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	611a      	str	r2, [r3, #16]
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002574:	b480      	push	{r7}
 8002576:	b085      	sub	sp, #20
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	041a      	lsls	r2, r3, #16
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43d9      	mvns	r1, r3
 8002592:	887b      	ldrh	r3, [r7, #2]
 8002594:	400b      	ands	r3, r1
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	611a      	str	r2, [r3, #16]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e26c      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8087 	beq.w	80026d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c8:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d00c      	beq.n	80025ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d112      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
 80025e0:	4b8c      	ldr	r3, [pc, #560]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d10b      	bne.n	8002606 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ee:	4b89      	ldr	r3, [pc, #548]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06c      	beq.n	80026d4 <HAL_RCC_OscConfig+0x12c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d168      	bne.n	80026d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e246      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x76>
 8002610:	4b80      	ldr	r3, [pc, #512]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a7f      	ldr	r2, [pc, #508]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	e02e      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCC_OscConfig+0x98>
 8002626:	4b7b      	ldr	r3, [pc, #492]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7a      	ldr	r2, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	4b78      	ldr	r3, [pc, #480]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002638:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0xbc>
 800264a:	4b72      	ldr	r3, [pc, #456]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a71      	ldr	r2, [pc, #452]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6e      	ldr	r2, [pc, #440]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xd4>
 8002664:	4b6b      	ldr	r3, [pc, #428]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a6a      	ldr	r2, [pc, #424]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a67      	ldr	r2, [pc, #412]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fd76 	bl	8001174 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fd72 	bl	8001174 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e1fa      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xe4>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fd62 	bl	8001174 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fd5e 	bl	8001174 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1e6      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x10c>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e2:	4b4c      	ldr	r3, [pc, #304]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
 80026fa:	4b46      	ldr	r3, [pc, #280]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1ba      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4939      	ldr	r1, [pc, #228]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b36      	ldr	r3, [pc, #216]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7fe fd17 	bl	8001174 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe fd13 	bl	8001174 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e19b      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4927      	ldr	r1, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b26      	ldr	r3, [pc, #152]	; (8002818 <HAL_RCC_OscConfig+0x270>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe fcf6 	bl	8001174 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe fcf2 	bl	8001174 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e17a      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d03a      	beq.n	800282c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c4:	f7fe fcd6 	bl	8001174 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe fcd2 	bl	8001174 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e15a      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027ea:	2001      	movs	r0, #1
 80027ec:	f000 fad8 	bl	8002da0 <RCC_Delay>
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b0a      	ldr	r3, [pc, #40]	; (800281c <HAL_RCC_OscConfig+0x274>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7fe fcbc 	bl	8001174 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fe:	e00f      	b.n	8002820 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe fcb8 	bl	8001174 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d908      	bls.n	8002820 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e140      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000
 8002818:	42420000 	.word	0x42420000
 800281c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e9      	bne.n	8002800 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a6 	beq.w	8002986 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b97      	ldr	r3, [pc, #604]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	4a93      	ldr	r2, [pc, #588]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	61d3      	str	r3, [r2, #28]
 8002856:	4b91      	ldr	r3, [pc, #580]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b8e      	ldr	r3, [pc, #568]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a8a      	ldr	r2, [pc, #552]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fc79 	bl	8001174 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fc75 	bl	8001174 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0fd      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002898:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x312>
 80028ac:	4b7b      	ldr	r3, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	4a7a      	ldr	r2, [pc, #488]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6213      	str	r3, [r2, #32]
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x334>
 80028c2:	4b76      	ldr	r3, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a75      	ldr	r2, [pc, #468]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	4b73      	ldr	r3, [pc, #460]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	4a72      	ldr	r2, [pc, #456]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6213      	str	r3, [r2, #32]
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x356>
 80028e4:	4b6d      	ldr	r3, [pc, #436]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a6c      	ldr	r2, [pc, #432]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	4b6a      	ldr	r3, [pc, #424]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	4a69      	ldr	r2, [pc, #420]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6213      	str	r3, [r2, #32]
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
 80028fe:	4b67      	ldr	r3, [pc, #412]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a66      	ldr	r2, [pc, #408]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6213      	str	r3, [r2, #32]
 800290a:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fc29 	bl	8001174 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fc25 	bl	8001174 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e0ab      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b57      	ldr	r3, [pc, #348]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x37e>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294a:	f7fe fc13 	bl	8001174 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fc0f 	bl	8001174 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e095      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a47      	ldr	r2, [pc, #284]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 8081 	beq.w	8002a92 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d061      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d146      	bne.n	8002a32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a4:	4b3f      	ldr	r3, [pc, #252]	; (8002aa4 <HAL_RCC_OscConfig+0x4fc>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fbe3 	bl	8001174 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fbdf 	bl	8001174 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e067      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d108      	bne.n	80029ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029da:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	492d      	ldr	r1, [pc, #180]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ec:	4b2b      	ldr	r3, [pc, #172]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a19      	ldr	r1, [r3, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	430b      	orrs	r3, r1
 80029fe:	4927      	ldr	r1, [pc, #156]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x4fc>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fbb3 	bl	8001174 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe fbaf 	bl	8001174 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e037      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x46a>
 8002a30:	e02f      	b.n	8002a92 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a32:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_RCC_OscConfig+0x4fc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe fb9c 	bl	8001174 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fb98 	bl	8001174 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e020      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x498>
 8002a5e:	e018      	b.n	8002a92 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e013      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <HAL_RCC_OscConfig+0x4f4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	42420060 	.word	0x42420060

08002aa8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0d0      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002abc:	4b6a      	ldr	r3, [pc, #424]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d910      	bls.n	8002aec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aca:	4b67      	ldr	r3, [pc, #412]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 0207 	bic.w	r2, r3, #7
 8002ad2:	4965      	ldr	r1, [pc, #404]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ada:	4b63      	ldr	r3, [pc, #396]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0b8      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d020      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b04:	4b59      	ldr	r3, [pc, #356]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b1c:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	494d      	ldr	r1, [pc, #308]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d040      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d107      	bne.n	8002b5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4e:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d115      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e07f      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e073      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b76:	4b3d      	ldr	r3, [pc, #244]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d101      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06b      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b86:	4b39      	ldr	r3, [pc, #228]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4936      	ldr	r1, [pc, #216]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b98:	f7fe faec 	bl	8001174 <HAL_GetTick>
 8002b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba0:	f7fe fae8 	bl	8001174 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e053      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 020c 	and.w	r2, r3, #12
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d1eb      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d210      	bcs.n	8002bf8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4922      	ldr	r1, [pc, #136]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e032      	b.n	8002c5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4916      	ldr	r1, [pc, #88]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d009      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	490e      	ldr	r1, [pc, #56]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c36:	f000 f821 	bl	8002c7c <HAL_RCC_GetSysClockFreq>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	490a      	ldr	r1, [pc, #40]	; (8002c70 <HAL_RCC_ClockConfig+0x1c8>)
 8002c48:	5ccb      	ldrb	r3, [r1, r3]
 8002c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c4e:	4a09      	ldr	r2, [pc, #36]	; (8002c74 <HAL_RCC_ClockConfig+0x1cc>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c52:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_RCC_ClockConfig+0x1d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fa4a 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	08005118 	.word	0x08005118
 8002c74:	20000000 	.word	0x20000000
 8002c78:	20000004 	.word	0x20000004

08002c7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c7c:	b490      	push	{r4, r7}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c84:	1d3c      	adds	r4, r7, #4
 8002c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c8c:	f240 2301 	movw	r3, #513	; 0x201
 8002c90:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x40>
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x46>
 8002cba:	e02d      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cbe:	623b      	str	r3, [r7, #32]
      break;
 8002cc0:	e02d      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	0c9b      	lsrs	r3, r3, #18
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cce:	4413      	add	r3, r2
 8002cd0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cd4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	0c5b      	lsrs	r3, r3, #17
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cee:	4413      	add	r3, r2
 8002cf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002cf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4a0e      	ldr	r2, [pc, #56]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cfa:	fb02 f203 	mul.w	r2, r2, r3
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
 8002d06:	e004      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	623b      	str	r3, [r7, #32]
      break;
 8002d16:	e002      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1a:	623b      	str	r3, [r7, #32]
      break;
 8002d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc90      	pop	{r4, r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	08005108 	.word	0x08005108
 8002d30:	40021000 	.word	0x40021000
 8002d34:	007a1200 	.word	0x007a1200
 8002d38:	003d0900 	.word	0x003d0900

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff2 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4903      	ldr	r1, [pc, #12]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	08005128 	.word	0x08005128

08002d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d7c:	f7ff ffde 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	0adb      	lsrs	r3, r3, #11
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	08005128 	.word	0x08005128

08002da0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002da8:	4b0a      	ldr	r3, [pc, #40]	; (8002dd4 <RCC_Delay+0x34>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <RCC_Delay+0x38>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0a5b      	lsrs	r3, r3, #9
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dbc:	bf00      	nop
  }
  while (Delay --);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1e5a      	subs	r2, r3, #1
 8002dc2:	60fa      	str	r2, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f9      	bne.n	8002dbc <RCC_Delay+0x1c>
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	20000000 	.word	0x20000000
 8002dd8:	10624dd3 	.word	0x10624dd3

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e041      	b.n	8002e72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe f854 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fa70 	bl	8003300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d001      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e03a      	b.n	8002f0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_TIM_Base_Start_IT+0x98>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d00e      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ebe:	d009      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a14      	ldr	r2, [pc, #80]	; (8002f18 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d004      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x58>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a13      	ldr	r2, [pc, #76]	; (8002f1c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d111      	bne.n	8002ef8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d010      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef6:	e007      	b.n	8002f08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800

08002f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d122      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d11b      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0202 	mvn.w	r2, #2
 8002f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f9b1 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 f9a4 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f9b3 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d122      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b04      	cmp	r3, #4
 8002f96:	d11b      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0204 	mvn.w	r2, #4
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f987 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f97a 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f989 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0208 	mvn.w	r2, #8
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f95d 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f950 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f95f 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b10      	cmp	r3, #16
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b10      	cmp	r3, #16
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0210 	mvn.w	r2, #16
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2208      	movs	r2, #8
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f933 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f926 	bl	80032b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f935 	bl	80032dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0201 	mvn.w	r2, #1
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd ff2a 	bl	8000ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fa77 	bl	80035be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030da:	2b40      	cmp	r3, #64	; 0x40
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d107      	bne.n	80030fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f8f9 	bl	80032ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b20      	cmp	r3, #32
 8003108:	d10e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	d107      	bne.n	8003128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0220 	mvn.w	r2, #32
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa42 	bl	80035ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0x18>
 8003144:	2302      	movs	r3, #2
 8003146:	e0b3      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x180>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003166:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800316e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003180:	d03e      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0xd0>
 8003182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003186:	f200 8087 	bhi.w	8003298 <HAL_TIM_ConfigClockSource+0x168>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318e:	f000 8085 	beq.w	800329c <HAL_TIM_ConfigClockSource+0x16c>
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d87f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
 8003198:	2b70      	cmp	r3, #112	; 0x70
 800319a:	d01a      	beq.n	80031d2 <HAL_TIM_ConfigClockSource+0xa2>
 800319c:	2b70      	cmp	r3, #112	; 0x70
 800319e:	d87b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
 80031a0:	2b60      	cmp	r3, #96	; 0x60
 80031a2:	d050      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x116>
 80031a4:	2b60      	cmp	r3, #96	; 0x60
 80031a6:	d877      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
 80031a8:	2b50      	cmp	r3, #80	; 0x50
 80031aa:	d03c      	beq.n	8003226 <HAL_TIM_ConfigClockSource+0xf6>
 80031ac:	2b50      	cmp	r3, #80	; 0x50
 80031ae:	d873      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d058      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0x136>
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d86f      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
 80031b8:	2b30      	cmp	r3, #48	; 0x30
 80031ba:	d064      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x156>
 80031bc:	2b30      	cmp	r3, #48	; 0x30
 80031be:	d86b      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
 80031c0:	2b20      	cmp	r3, #32
 80031c2:	d060      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x156>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d867      	bhi.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05c      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x156>
 80031cc:	2b10      	cmp	r3, #16
 80031ce:	d05a      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031d0:	e062      	b.n	8003298 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	6899      	ldr	r1, [r3, #8]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f000 f966 	bl	80034b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	609a      	str	r2, [r3, #8]
      break;
 80031fe:	e04e      	b.n	800329e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6899      	ldr	r1, [r3, #8]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f000 f94f 	bl	80034b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003222:	609a      	str	r2, [r3, #8]
      break;
 8003224:	e03b      	b.n	800329e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	461a      	mov	r2, r3
 8003234:	f000 f8c6 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2150      	movs	r1, #80	; 0x50
 800323e:	4618      	mov	r0, r3
 8003240:	f000 f91d 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8003244:	e02b      	b.n	800329e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6818      	ldr	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	461a      	mov	r2, r3
 8003254:	f000 f8e4 	bl	8003420 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2160      	movs	r1, #96	; 0x60
 800325e:	4618      	mov	r0, r3
 8003260:	f000 f90d 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8003264:	e01b      	b.n	800329e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	461a      	mov	r2, r3
 8003274:	f000 f8a6 	bl	80033c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2140      	movs	r1, #64	; 0x40
 800327e:	4618      	mov	r0, r3
 8003280:	f000 f8fd 	bl	800347e <TIM_ITRx_SetConfig>
      break;
 8003284:	e00b      	b.n	800329e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	4610      	mov	r0, r2
 8003292:	f000 f8f4 	bl	800347e <TIM_ITRx_SetConfig>
        break;
 8003296:	e002      	b.n	800329e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800329c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr

080032ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr

08003300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <TIM_Base_SetConfig+0xb8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00b      	beq.n	8003330 <TIM_Base_SetConfig+0x30>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331e:	d007      	beq.n	8003330 <TIM_Base_SetConfig+0x30>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a26      	ldr	r2, [pc, #152]	; (80033bc <TIM_Base_SetConfig+0xbc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d003      	beq.n	8003330 <TIM_Base_SetConfig+0x30>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <TIM_Base_SetConfig+0xc0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d108      	bne.n	8003342 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1c      	ldr	r2, [pc, #112]	; (80033b8 <TIM_Base_SetConfig+0xb8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00b      	beq.n	8003362 <TIM_Base_SetConfig+0x62>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d007      	beq.n	8003362 <TIM_Base_SetConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <TIM_Base_SetConfig+0xbc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d003      	beq.n	8003362 <TIM_Base_SetConfig+0x62>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <TIM_Base_SetConfig+0xc0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d108      	bne.n	8003374 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <TIM_Base_SetConfig+0xb8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d103      	bne.n	80033a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	615a      	str	r2, [r3, #20]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800

080033c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0201 	bic.w	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f023 030a 	bic.w	r3, r3, #10
 8003400:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4313      	orrs	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	621a      	str	r2, [r3, #32]
}
 8003416:	bf00      	nop
 8003418:	371c      	adds	r7, #28
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0210 	bic.w	r2, r3, #16
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800344a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	031b      	lsls	r3, r3, #12
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800345c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	621a      	str	r2, [r3, #32]
}
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	f043 0307 	orr.w	r3, r3, #7
 80034a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bc80      	pop	{r7}
 80034b0:	4770      	bx	lr

080034b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	60f8      	str	r0, [r7, #12]
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	021a      	lsls	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4313      	orrs	r3, r2
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	609a      	str	r2, [r3, #8]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003504:	2302      	movs	r3, #2
 8003506:	e046      	b.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00e      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d009      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d004      	beq.n	800356a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a10      	ldr	r2, [pc, #64]	; (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10c      	bne.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003570:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	4313      	orrs	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800

080035ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr

080035be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e03f      	b.n	8003662 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fd fcc0 	bl	8000f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2224      	movs	r2, #36	; 0x24
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003612:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fbed 	bl	8003df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003628:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003638:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003648:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
 8003672:	60b9      	str	r1, [r7, #8]
 8003674:	4613      	mov	r3, r2
 8003676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b20      	cmp	r3, #32
 8003682:	d130      	bne.n	80036e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_Transmit_IT+0x26>
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e029      	b.n	80036e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Transmit_IT+0x38>
 800369e:	2302      	movs	r3, #2
 80036a0:	e022      	b.n	80036e8 <HAL_UART_Transmit_IT+0x7e>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2221      	movs	r2, #33	; 0x21
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	4613      	mov	r3, r2
 80036fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	d11d      	bne.n	8003748 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <HAL_UART_Receive_IT+0x26>
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e016      	b.n	800374a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_UART_Receive_IT+0x38>
 8003726:	2302      	movs	r3, #2
 8003728:	e00f      	b.n	800374a <HAL_UART_Receive_IT+0x58>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	461a      	mov	r2, r3
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f9cf 	bl	8003ae2 <UART_Start_Receive_IT>
 8003744:	4603      	mov	r3, r0
 8003746:	e000      	b.n	800374a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_UART_IRQHandler+0x52>
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa7f 	bl	8003ca2 <UART_Receive_IT>
      return;
 80037a4:	e17b      	b.n	8003a9e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80b1 	beq.w	8003910 <HAL_UART_IRQHandler+0x1bc>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_UART_IRQHandler+0x70>
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a6 	beq.w	8003910 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <HAL_UART_IRQHandler+0x90>
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HAL_UART_IRQHandler+0xb0>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	f043 0202 	orr.w	r2, r3, #2
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00a      	beq.n	8003824 <HAL_UART_IRQHandler+0xd0>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f043 0204 	orr.w	r2, r3, #4
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00f      	beq.n	800384e <HAL_UART_IRQHandler+0xfa>
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_UART_IRQHandler+0xee>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f043 0208 	orr.w	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 811e 	beq.w	8003a94 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_UART_IRQHandler+0x11e>
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fa18 	bl	8003ca2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf14      	ite	ne
 8003880:	2301      	movne	r3, #1
 8003882:	2300      	moveq	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b00      	cmp	r3, #0
 8003892:	d102      	bne.n	800389a <HAL_UART_IRQHandler+0x146>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d031      	beq.n	80038fe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f95a 	bl	8003b54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d023      	beq.n	80038f6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038bc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d013      	beq.n	80038ee <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	4a76      	ldr	r2, [pc, #472]	; (8003aa4 <HAL_UART_IRQHandler+0x350>)
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fc3c 	bl	8002150 <HAL_DMA_Abort_IT>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d016      	beq.n	800390c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038e8:	4610      	mov	r0, r2
 80038ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	e00e      	b.n	800390c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f8e3 	bl	8003aba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f4:	e00a      	b.n	800390c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f8df 	bl	8003aba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038fc:	e006      	b.n	800390c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f8db 	bl	8003aba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800390a:	e0c3      	b.n	8003a94 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800390c:	bf00      	nop
    return;
 800390e:	e0c1      	b.n	8003a94 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 80a1 	bne.w	8003a5c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 809b 	beq.w	8003a5c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8095 	beq.w	8003a5c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04e      	beq.n	80039f4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003960:	8a3b      	ldrh	r3, [r7, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8098 	beq.w	8003a98 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800396c:	8a3a      	ldrh	r2, [r7, #16]
 800396e:	429a      	cmp	r2, r3
 8003970:	f080 8092 	bcs.w	8003a98 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8a3a      	ldrh	r2, [r7, #16]
 8003978:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b20      	cmp	r3, #32
 8003982:	d02b      	beq.n	80039dc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003992:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039b2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0210 	bic.w	r2, r2, #16
 80039d0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fb7f 	bl	80020da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f86d 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039f2:	e051      	b.n	8003a98 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d047      	beq.n	8003a9c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a0c:	8a7b      	ldrh	r3, [r7, #18]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d044      	beq.n	8003a9c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a20:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0210 	bic.w	r2, r2, #16
 8003a4e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a50:	8a7b      	ldrh	r3, [r7, #18]
 8003a52:	4619      	mov	r1, r3
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f839 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a5a:	e01f      	b.n	8003a9c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_UART_IRQHandler+0x324>
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f8af 	bl	8003bd4 <UART_Transmit_IT>
    return;
 8003a76:	e012      	b.n	8003a9e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <HAL_UART_IRQHandler+0x34a>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f8f0 	bl	8003c72 <UART_EndTransmit_IT>
    return;
 8003a92:	e004      	b.n	8003a9e <HAL_UART_IRQHandler+0x34a>
    return;
 8003a94:	bf00      	nop
 8003a96:	e002      	b.n	8003a9e <HAL_UART_IRQHandler+0x34a>
      return;
 8003a98:	bf00      	nop
 8003a9a:	e000      	b.n	8003a9e <HAL_UART_IRQHandler+0x34a>
      return;
 8003a9c:	bf00      	nop
  }
}
 8003a9e:	3728      	adds	r7, #40	; 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	08003bad 	.word	0x08003bad

08003aa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr

08003acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr

08003ae2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	60b9      	str	r1, [r7, #8]
 8003aec:	4613      	mov	r3, r2
 8003aee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2222      	movs	r2, #34	; 0x22
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b26:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0220 	orr.w	r2, r2, #32
 8003b46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d107      	bne.n	8003b94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0210 	bic.w	r2, r2, #16
 8003b92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff ff77 	bl	8003aba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b21      	cmp	r3, #33	; 0x21
 8003be6:	d13e      	bne.n	8003c66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf0:	d114      	bne.n	8003c1c <UART_Transmit_IT+0x48>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d110      	bne.n	8003c1c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	1c9a      	adds	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	621a      	str	r2, [r3, #32]
 8003c1a:	e008      	b.n	8003c2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	1c59      	adds	r1, r3, #1
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6211      	str	r1, [r2, #32]
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	e000      	b.n	8003c68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c66:	2302      	movs	r3, #2
  }
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b082      	sub	sp, #8
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff ff08 	bl	8003aa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b22      	cmp	r3, #34	; 0x22
 8003cb4:	f040 8099 	bne.w	8003dea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc0:	d117      	bne.n	8003cf2 <UART_Receive_IT+0x50>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d113      	bne.n	8003cf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf0:	e026      	b.n	8003d40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d04:	d007      	beq.n	8003d16 <UART_Receive_IT+0x74>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <UART_Receive_IT+0x82>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e008      	b.n	8003d36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d148      	bne.n	8003de6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0220 	bic.w	r2, r2, #32
 8003d62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d123      	bne.n	8003ddc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0210 	bic.w	r2, r2, #16
 8003da8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d10a      	bne.n	8003dce <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fe79 	bl	8003acc <HAL_UARTEx_RxEventCallback>
 8003dda:	e002      	b.n	8003de2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7fd f921 	bl	8001024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e002      	b.n	8003dec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	e000      	b.n	8003dec <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e2e:	f023 030c 	bic.w	r3, r3, #12
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6812      	ldr	r2, [r2, #0]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	430b      	orrs	r3, r1
 8003e3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a2c      	ldr	r2, [pc, #176]	; (8003f08 <UART_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d103      	bne.n	8003e64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e5c:	f7fe ff8c 	bl	8002d78 <HAL_RCC_GetPCLK2Freq>
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	e002      	b.n	8003e6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e64:	f7fe ff74 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003e68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009a      	lsls	r2, r3, #2
 8003e74:	441a      	add	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	4a22      	ldr	r2, [pc, #136]	; (8003f0c <UART_SetConfig+0x118>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	095b      	lsrs	r3, r3, #5
 8003e88:	0119      	lsls	r1, r3, #4
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <UART_SetConfig+0x118>)
 8003ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2064      	movs	r0, #100	; 0x64
 8003eaa:	fb00 f303 	mul.w	r3, r0, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	; 0x32
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <UART_SetConfig+0x118>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec0:	4419      	add	r1, r3
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009a      	lsls	r2, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <UART_SetConfig+0x118>)
 8003eda:	fba3 0302 	umull	r0, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2064      	movs	r0, #100	; 0x64
 8003ee2:	fb00 f303 	mul.w	r3, r0, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	3332      	adds	r3, #50	; 0x32
 8003eec:	4a07      	ldr	r2, [pc, #28]	; (8003f0c <UART_SetConfig+0x118>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	f003 020f 	and.w	r2, r3, #15
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	440a      	add	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40013800 	.word	0x40013800
 8003f0c:	51eb851f 	.word	0x51eb851f

08003f10 <__errno>:
 8003f10:	4b01      	ldr	r3, [pc, #4]	; (8003f18 <__errno+0x8>)
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	2000000c 	.word	0x2000000c

08003f1c <__libc_init_array>:
 8003f1c:	b570      	push	{r4, r5, r6, lr}
 8003f1e:	2600      	movs	r6, #0
 8003f20:	4d0c      	ldr	r5, [pc, #48]	; (8003f54 <__libc_init_array+0x38>)
 8003f22:	4c0d      	ldr	r4, [pc, #52]	; (8003f58 <__libc_init_array+0x3c>)
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	42a6      	cmp	r6, r4
 8003f2a:	d109      	bne.n	8003f40 <__libc_init_array+0x24>
 8003f2c:	f001 f8da 	bl	80050e4 <_init>
 8003f30:	2600      	movs	r6, #0
 8003f32:	4d0a      	ldr	r5, [pc, #40]	; (8003f5c <__libc_init_array+0x40>)
 8003f34:	4c0a      	ldr	r4, [pc, #40]	; (8003f60 <__libc_init_array+0x44>)
 8003f36:	1b64      	subs	r4, r4, r5
 8003f38:	10a4      	asrs	r4, r4, #2
 8003f3a:	42a6      	cmp	r6, r4
 8003f3c:	d105      	bne.n	8003f4a <__libc_init_array+0x2e>
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f44:	4798      	blx	r3
 8003f46:	3601      	adds	r6, #1
 8003f48:	e7ee      	b.n	8003f28 <__libc_init_array+0xc>
 8003f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f4e:	4798      	blx	r3
 8003f50:	3601      	adds	r6, #1
 8003f52:	e7f2      	b.n	8003f3a <__libc_init_array+0x1e>
 8003f54:	0800537c 	.word	0x0800537c
 8003f58:	0800537c 	.word	0x0800537c
 8003f5c:	0800537c 	.word	0x0800537c
 8003f60:	08005380 	.word	0x08005380

08003f64 <memset>:
 8003f64:	4603      	mov	r3, r0
 8003f66:	4402      	add	r2, r0
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d100      	bne.n	8003f6e <memset+0xa>
 8003f6c:	4770      	bx	lr
 8003f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f72:	e7f9      	b.n	8003f68 <memset+0x4>

08003f74 <strtok>:
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <strtok+0x5c>)
 8003f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7a:	681f      	ldr	r7, [r3, #0]
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8003f80:	460e      	mov	r6, r1
 8003f82:	b9ec      	cbnz	r4, 8003fc0 <strtok+0x4c>
 8003f84:	2050      	movs	r0, #80	; 0x50
 8003f86:	f000 f911 	bl	80041ac <malloc>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	65b8      	str	r0, [r7, #88]	; 0x58
 8003f8e:	b920      	cbnz	r0, 8003f9a <strtok+0x26>
 8003f90:	2157      	movs	r1, #87	; 0x57
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <strtok+0x60>)
 8003f94:	4810      	ldr	r0, [pc, #64]	; (8003fd8 <strtok+0x64>)
 8003f96:	f000 f8d9 	bl	800414c <__assert_func>
 8003f9a:	e9c0 4400 	strd	r4, r4, [r0]
 8003f9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003fa2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003fa6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003faa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003fae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003fb2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003fb6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003fba:	6184      	str	r4, [r0, #24]
 8003fbc:	7704      	strb	r4, [r0, #28]
 8003fbe:	6244      	str	r4, [r0, #36]	; 0x24
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fcc:	f000 b806 	b.w	8003fdc <__strtok_r>
 8003fd0:	2000000c 	.word	0x2000000c
 8003fd4:	08005134 	.word	0x08005134
 8003fd8:	0800514b 	.word	0x0800514b

08003fdc <__strtok_r>:
 8003fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fde:	b908      	cbnz	r0, 8003fe4 <__strtok_r+0x8>
 8003fe0:	6810      	ldr	r0, [r2, #0]
 8003fe2:	b188      	cbz	r0, 8004008 <__strtok_r+0x2c>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	460f      	mov	r7, r1
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003fee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ff2:	b91e      	cbnz	r6, 8003ffc <__strtok_r+0x20>
 8003ff4:	b965      	cbnz	r5, 8004010 <__strtok_r+0x34>
 8003ff6:	4628      	mov	r0, r5
 8003ff8:	6015      	str	r5, [r2, #0]
 8003ffa:	e005      	b.n	8004008 <__strtok_r+0x2c>
 8003ffc:	42b5      	cmp	r5, r6
 8003ffe:	d1f6      	bne.n	8003fee <__strtok_r+0x12>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <__strtok_r+0xa>
 8004004:	6014      	str	r4, [r2, #0]
 8004006:	7003      	strb	r3, [r0, #0]
 8004008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400a:	461c      	mov	r4, r3
 800400c:	e00c      	b.n	8004028 <__strtok_r+0x4c>
 800400e:	b915      	cbnz	r5, 8004016 <__strtok_r+0x3a>
 8004010:	460e      	mov	r6, r1
 8004012:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004016:	f816 5b01 	ldrb.w	r5, [r6], #1
 800401a:	42ab      	cmp	r3, r5
 800401c:	d1f7      	bne.n	800400e <__strtok_r+0x32>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f3      	beq.n	800400a <__strtok_r+0x2e>
 8004022:	2300      	movs	r3, #0
 8004024:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004028:	6014      	str	r4, [r2, #0]
 800402a:	e7ed      	b.n	8004008 <__strtok_r+0x2c>

0800402c <_strtol_l.isra.0>:
 800402c:	2b01      	cmp	r3, #1
 800402e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004032:	4686      	mov	lr, r0
 8004034:	d001      	beq.n	800403a <_strtol_l.isra.0+0xe>
 8004036:	2b24      	cmp	r3, #36	; 0x24
 8004038:	d906      	bls.n	8004048 <_strtol_l.isra.0+0x1c>
 800403a:	f7ff ff69 	bl	8003f10 <__errno>
 800403e:	2316      	movs	r3, #22
 8004040:	6003      	str	r3, [r0, #0]
 8004042:	2000      	movs	r0, #0
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	468c      	mov	ip, r1
 800404a:	4e3a      	ldr	r6, [pc, #232]	; (8004134 <_strtol_l.isra.0+0x108>)
 800404c:	4660      	mov	r0, ip
 800404e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004052:	5da5      	ldrb	r5, [r4, r6]
 8004054:	f015 0508 	ands.w	r5, r5, #8
 8004058:	d1f8      	bne.n	800404c <_strtol_l.isra.0+0x20>
 800405a:	2c2d      	cmp	r4, #45	; 0x2d
 800405c:	d133      	bne.n	80040c6 <_strtol_l.isra.0+0x9a>
 800405e:	f04f 0801 	mov.w	r8, #1
 8004062:	f89c 4000 	ldrb.w	r4, [ip]
 8004066:	f100 0c02 	add.w	ip, r0, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d05d      	beq.n	800412a <_strtol_l.isra.0+0xfe>
 800406e:	2b10      	cmp	r3, #16
 8004070:	d10c      	bne.n	800408c <_strtol_l.isra.0+0x60>
 8004072:	2c30      	cmp	r4, #48	; 0x30
 8004074:	d10a      	bne.n	800408c <_strtol_l.isra.0+0x60>
 8004076:	f89c 0000 	ldrb.w	r0, [ip]
 800407a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800407e:	2858      	cmp	r0, #88	; 0x58
 8004080:	d14e      	bne.n	8004120 <_strtol_l.isra.0+0xf4>
 8004082:	2310      	movs	r3, #16
 8004084:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004088:	f10c 0c02 	add.w	ip, ip, #2
 800408c:	2500      	movs	r5, #0
 800408e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8004092:	3f01      	subs	r7, #1
 8004094:	fbb7 f9f3 	udiv	r9, r7, r3
 8004098:	4628      	mov	r0, r5
 800409a:	fb03 7a19 	mls	sl, r3, r9, r7
 800409e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80040a2:	2e09      	cmp	r6, #9
 80040a4:	d818      	bhi.n	80040d8 <_strtol_l.isra.0+0xac>
 80040a6:	4634      	mov	r4, r6
 80040a8:	42a3      	cmp	r3, r4
 80040aa:	dd24      	ble.n	80040f6 <_strtol_l.isra.0+0xca>
 80040ac:	2d00      	cmp	r5, #0
 80040ae:	db1f      	blt.n	80040f0 <_strtol_l.isra.0+0xc4>
 80040b0:	4581      	cmp	r9, r0
 80040b2:	d31d      	bcc.n	80040f0 <_strtol_l.isra.0+0xc4>
 80040b4:	d101      	bne.n	80040ba <_strtol_l.isra.0+0x8e>
 80040b6:	45a2      	cmp	sl, r4
 80040b8:	db1a      	blt.n	80040f0 <_strtol_l.isra.0+0xc4>
 80040ba:	2501      	movs	r5, #1
 80040bc:	fb00 4003 	mla	r0, r0, r3, r4
 80040c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80040c4:	e7eb      	b.n	800409e <_strtol_l.isra.0+0x72>
 80040c6:	2c2b      	cmp	r4, #43	; 0x2b
 80040c8:	bf08      	it	eq
 80040ca:	f89c 4000 	ldrbeq.w	r4, [ip]
 80040ce:	46a8      	mov	r8, r5
 80040d0:	bf08      	it	eq
 80040d2:	f100 0c02 	addeq.w	ip, r0, #2
 80040d6:	e7c8      	b.n	800406a <_strtol_l.isra.0+0x3e>
 80040d8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80040dc:	2e19      	cmp	r6, #25
 80040de:	d801      	bhi.n	80040e4 <_strtol_l.isra.0+0xb8>
 80040e0:	3c37      	subs	r4, #55	; 0x37
 80040e2:	e7e1      	b.n	80040a8 <_strtol_l.isra.0+0x7c>
 80040e4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80040e8:	2e19      	cmp	r6, #25
 80040ea:	d804      	bhi.n	80040f6 <_strtol_l.isra.0+0xca>
 80040ec:	3c57      	subs	r4, #87	; 0x57
 80040ee:	e7db      	b.n	80040a8 <_strtol_l.isra.0+0x7c>
 80040f0:	f04f 35ff 	mov.w	r5, #4294967295
 80040f4:	e7e4      	b.n	80040c0 <_strtol_l.isra.0+0x94>
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	da08      	bge.n	800410c <_strtol_l.isra.0+0xe0>
 80040fa:	2322      	movs	r3, #34	; 0x22
 80040fc:	4638      	mov	r0, r7
 80040fe:	f8ce 3000 	str.w	r3, [lr]
 8004102:	2a00      	cmp	r2, #0
 8004104:	d09e      	beq.n	8004044 <_strtol_l.isra.0+0x18>
 8004106:	f10c 31ff 	add.w	r1, ip, #4294967295
 800410a:	e007      	b.n	800411c <_strtol_l.isra.0+0xf0>
 800410c:	f1b8 0f00 	cmp.w	r8, #0
 8004110:	d000      	beq.n	8004114 <_strtol_l.isra.0+0xe8>
 8004112:	4240      	negs	r0, r0
 8004114:	2a00      	cmp	r2, #0
 8004116:	d095      	beq.n	8004044 <_strtol_l.isra.0+0x18>
 8004118:	2d00      	cmp	r5, #0
 800411a:	d1f4      	bne.n	8004106 <_strtol_l.isra.0+0xda>
 800411c:	6011      	str	r1, [r2, #0]
 800411e:	e791      	b.n	8004044 <_strtol_l.isra.0+0x18>
 8004120:	2430      	movs	r4, #48	; 0x30
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1b2      	bne.n	800408c <_strtol_l.isra.0+0x60>
 8004126:	2308      	movs	r3, #8
 8004128:	e7b0      	b.n	800408c <_strtol_l.isra.0+0x60>
 800412a:	2c30      	cmp	r4, #48	; 0x30
 800412c:	d0a3      	beq.n	8004076 <_strtol_l.isra.0+0x4a>
 800412e:	230a      	movs	r3, #10
 8004130:	e7ac      	b.n	800408c <_strtol_l.isra.0+0x60>
 8004132:	bf00      	nop
 8004134:	080051e9 	.word	0x080051e9

08004138 <strtol>:
 8004138:	4613      	mov	r3, r2
 800413a:	460a      	mov	r2, r1
 800413c:	4601      	mov	r1, r0
 800413e:	4802      	ldr	r0, [pc, #8]	; (8004148 <strtol+0x10>)
 8004140:	6800      	ldr	r0, [r0, #0]
 8004142:	f7ff bf73 	b.w	800402c <_strtol_l.isra.0>
 8004146:	bf00      	nop
 8004148:	2000000c 	.word	0x2000000c

0800414c <__assert_func>:
 800414c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800414e:	4614      	mov	r4, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <__assert_func+0x2c>)
 8004154:	4605      	mov	r5, r0
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68d8      	ldr	r0, [r3, #12]
 800415a:	b14c      	cbz	r4, 8004170 <__assert_func+0x24>
 800415c:	4b07      	ldr	r3, [pc, #28]	; (800417c <__assert_func+0x30>)
 800415e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004162:	9100      	str	r1, [sp, #0]
 8004164:	462b      	mov	r3, r5
 8004166:	4906      	ldr	r1, [pc, #24]	; (8004180 <__assert_func+0x34>)
 8004168:	f000 f80e 	bl	8004188 <fiprintf>
 800416c:	f000 fc8a 	bl	8004a84 <abort>
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <__assert_func+0x38>)
 8004172:	461c      	mov	r4, r3
 8004174:	e7f3      	b.n	800415e <__assert_func+0x12>
 8004176:	bf00      	nop
 8004178:	2000000c 	.word	0x2000000c
 800417c:	080051ac 	.word	0x080051ac
 8004180:	080051b9 	.word	0x080051b9
 8004184:	080051e7 	.word	0x080051e7

08004188 <fiprintf>:
 8004188:	b40e      	push	{r1, r2, r3}
 800418a:	b503      	push	{r0, r1, lr}
 800418c:	4601      	mov	r1, r0
 800418e:	ab03      	add	r3, sp, #12
 8004190:	4805      	ldr	r0, [pc, #20]	; (80041a8 <fiprintf+0x20>)
 8004192:	f853 2b04 	ldr.w	r2, [r3], #4
 8004196:	6800      	ldr	r0, [r0, #0]
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	f000 f8dd 	bl	8004358 <_vfiprintf_r>
 800419e:	b002      	add	sp, #8
 80041a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041a4:	b003      	add	sp, #12
 80041a6:	4770      	bx	lr
 80041a8:	2000000c 	.word	0x2000000c

080041ac <malloc>:
 80041ac:	4b02      	ldr	r3, [pc, #8]	; (80041b8 <malloc+0xc>)
 80041ae:	4601      	mov	r1, r0
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	f000 b84f 	b.w	8004254 <_malloc_r>
 80041b6:	bf00      	nop
 80041b8:	2000000c 	.word	0x2000000c

080041bc <_free_r>:
 80041bc:	b538      	push	{r3, r4, r5, lr}
 80041be:	4605      	mov	r5, r0
 80041c0:	2900      	cmp	r1, #0
 80041c2:	d043      	beq.n	800424c <_free_r+0x90>
 80041c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c8:	1f0c      	subs	r4, r1, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bfb8      	it	lt
 80041ce:	18e4      	addlt	r4, r4, r3
 80041d0:	f000 fe8c 	bl	8004eec <__malloc_lock>
 80041d4:	4a1e      	ldr	r2, [pc, #120]	; (8004250 <_free_r+0x94>)
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	4610      	mov	r0, r2
 80041da:	b933      	cbnz	r3, 80041ea <_free_r+0x2e>
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	6014      	str	r4, [r2, #0]
 80041e0:	4628      	mov	r0, r5
 80041e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041e6:	f000 be87 	b.w	8004ef8 <__malloc_unlock>
 80041ea:	42a3      	cmp	r3, r4
 80041ec:	d90a      	bls.n	8004204 <_free_r+0x48>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	1862      	adds	r2, r4, r1
 80041f2:	4293      	cmp	r3, r2
 80041f4:	bf01      	itttt	eq
 80041f6:	681a      	ldreq	r2, [r3, #0]
 80041f8:	685b      	ldreq	r3, [r3, #4]
 80041fa:	1852      	addeq	r2, r2, r1
 80041fc:	6022      	streq	r2, [r4, #0]
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	6004      	str	r4, [r0, #0]
 8004202:	e7ed      	b.n	80041e0 <_free_r+0x24>
 8004204:	461a      	mov	r2, r3
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	b10b      	cbz	r3, 800420e <_free_r+0x52>
 800420a:	42a3      	cmp	r3, r4
 800420c:	d9fa      	bls.n	8004204 <_free_r+0x48>
 800420e:	6811      	ldr	r1, [r2, #0]
 8004210:	1850      	adds	r0, r2, r1
 8004212:	42a0      	cmp	r0, r4
 8004214:	d10b      	bne.n	800422e <_free_r+0x72>
 8004216:	6820      	ldr	r0, [r4, #0]
 8004218:	4401      	add	r1, r0
 800421a:	1850      	adds	r0, r2, r1
 800421c:	4283      	cmp	r3, r0
 800421e:	6011      	str	r1, [r2, #0]
 8004220:	d1de      	bne.n	80041e0 <_free_r+0x24>
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4401      	add	r1, r0
 8004228:	6011      	str	r1, [r2, #0]
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e7d8      	b.n	80041e0 <_free_r+0x24>
 800422e:	d902      	bls.n	8004236 <_free_r+0x7a>
 8004230:	230c      	movs	r3, #12
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	e7d4      	b.n	80041e0 <_free_r+0x24>
 8004236:	6820      	ldr	r0, [r4, #0]
 8004238:	1821      	adds	r1, r4, r0
 800423a:	428b      	cmp	r3, r1
 800423c:	bf01      	itttt	eq
 800423e:	6819      	ldreq	r1, [r3, #0]
 8004240:	685b      	ldreq	r3, [r3, #4]
 8004242:	1809      	addeq	r1, r1, r0
 8004244:	6021      	streq	r1, [r4, #0]
 8004246:	6063      	str	r3, [r4, #4]
 8004248:	6054      	str	r4, [r2, #4]
 800424a:	e7c9      	b.n	80041e0 <_free_r+0x24>
 800424c:	bd38      	pop	{r3, r4, r5, pc}
 800424e:	bf00      	nop
 8004250:	20000110 	.word	0x20000110

08004254 <_malloc_r>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	1ccd      	adds	r5, r1, #3
 8004258:	f025 0503 	bic.w	r5, r5, #3
 800425c:	3508      	adds	r5, #8
 800425e:	2d0c      	cmp	r5, #12
 8004260:	bf38      	it	cc
 8004262:	250c      	movcc	r5, #12
 8004264:	2d00      	cmp	r5, #0
 8004266:	4606      	mov	r6, r0
 8004268:	db01      	blt.n	800426e <_malloc_r+0x1a>
 800426a:	42a9      	cmp	r1, r5
 800426c:	d903      	bls.n	8004276 <_malloc_r+0x22>
 800426e:	230c      	movs	r3, #12
 8004270:	6033      	str	r3, [r6, #0]
 8004272:	2000      	movs	r0, #0
 8004274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004276:	f000 fe39 	bl	8004eec <__malloc_lock>
 800427a:	4921      	ldr	r1, [pc, #132]	; (8004300 <_malloc_r+0xac>)
 800427c:	680a      	ldr	r2, [r1, #0]
 800427e:	4614      	mov	r4, r2
 8004280:	b99c      	cbnz	r4, 80042aa <_malloc_r+0x56>
 8004282:	4f20      	ldr	r7, [pc, #128]	; (8004304 <_malloc_r+0xb0>)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	b923      	cbnz	r3, 8004292 <_malloc_r+0x3e>
 8004288:	4621      	mov	r1, r4
 800428a:	4630      	mov	r0, r6
 800428c:	f000 fb2a 	bl	80048e4 <_sbrk_r>
 8004290:	6038      	str	r0, [r7, #0]
 8004292:	4629      	mov	r1, r5
 8004294:	4630      	mov	r0, r6
 8004296:	f000 fb25 	bl	80048e4 <_sbrk_r>
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	d123      	bne.n	80042e6 <_malloc_r+0x92>
 800429e:	230c      	movs	r3, #12
 80042a0:	4630      	mov	r0, r6
 80042a2:	6033      	str	r3, [r6, #0]
 80042a4:	f000 fe28 	bl	8004ef8 <__malloc_unlock>
 80042a8:	e7e3      	b.n	8004272 <_malloc_r+0x1e>
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	1b5b      	subs	r3, r3, r5
 80042ae:	d417      	bmi.n	80042e0 <_malloc_r+0x8c>
 80042b0:	2b0b      	cmp	r3, #11
 80042b2:	d903      	bls.n	80042bc <_malloc_r+0x68>
 80042b4:	6023      	str	r3, [r4, #0]
 80042b6:	441c      	add	r4, r3
 80042b8:	6025      	str	r5, [r4, #0]
 80042ba:	e004      	b.n	80042c6 <_malloc_r+0x72>
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	42a2      	cmp	r2, r4
 80042c0:	bf0c      	ite	eq
 80042c2:	600b      	streq	r3, [r1, #0]
 80042c4:	6053      	strne	r3, [r2, #4]
 80042c6:	4630      	mov	r0, r6
 80042c8:	f000 fe16 	bl	8004ef8 <__malloc_unlock>
 80042cc:	f104 000b 	add.w	r0, r4, #11
 80042d0:	1d23      	adds	r3, r4, #4
 80042d2:	f020 0007 	bic.w	r0, r0, #7
 80042d6:	1ac2      	subs	r2, r0, r3
 80042d8:	d0cc      	beq.n	8004274 <_malloc_r+0x20>
 80042da:	1a1b      	subs	r3, r3, r0
 80042dc:	50a3      	str	r3, [r4, r2]
 80042de:	e7c9      	b.n	8004274 <_malloc_r+0x20>
 80042e0:	4622      	mov	r2, r4
 80042e2:	6864      	ldr	r4, [r4, #4]
 80042e4:	e7cc      	b.n	8004280 <_malloc_r+0x2c>
 80042e6:	1cc4      	adds	r4, r0, #3
 80042e8:	f024 0403 	bic.w	r4, r4, #3
 80042ec:	42a0      	cmp	r0, r4
 80042ee:	d0e3      	beq.n	80042b8 <_malloc_r+0x64>
 80042f0:	1a21      	subs	r1, r4, r0
 80042f2:	4630      	mov	r0, r6
 80042f4:	f000 faf6 	bl	80048e4 <_sbrk_r>
 80042f8:	3001      	adds	r0, #1
 80042fa:	d1dd      	bne.n	80042b8 <_malloc_r+0x64>
 80042fc:	e7cf      	b.n	800429e <_malloc_r+0x4a>
 80042fe:	bf00      	nop
 8004300:	20000110 	.word	0x20000110
 8004304:	20000114 	.word	0x20000114

08004308 <__sfputc_r>:
 8004308:	6893      	ldr	r3, [r2, #8]
 800430a:	b410      	push	{r4}
 800430c:	3b01      	subs	r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	6093      	str	r3, [r2, #8]
 8004312:	da07      	bge.n	8004324 <__sfputc_r+0x1c>
 8004314:	6994      	ldr	r4, [r2, #24]
 8004316:	42a3      	cmp	r3, r4
 8004318:	db01      	blt.n	800431e <__sfputc_r+0x16>
 800431a:	290a      	cmp	r1, #10
 800431c:	d102      	bne.n	8004324 <__sfputc_r+0x1c>
 800431e:	bc10      	pop	{r4}
 8004320:	f000 baf0 	b.w	8004904 <__swbuf_r>
 8004324:	6813      	ldr	r3, [r2, #0]
 8004326:	1c58      	adds	r0, r3, #1
 8004328:	6010      	str	r0, [r2, #0]
 800432a:	7019      	strb	r1, [r3, #0]
 800432c:	4608      	mov	r0, r1
 800432e:	bc10      	pop	{r4}
 8004330:	4770      	bx	lr

08004332 <__sfputs_r>:
 8004332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004334:	4606      	mov	r6, r0
 8004336:	460f      	mov	r7, r1
 8004338:	4614      	mov	r4, r2
 800433a:	18d5      	adds	r5, r2, r3
 800433c:	42ac      	cmp	r4, r5
 800433e:	d101      	bne.n	8004344 <__sfputs_r+0x12>
 8004340:	2000      	movs	r0, #0
 8004342:	e007      	b.n	8004354 <__sfputs_r+0x22>
 8004344:	463a      	mov	r2, r7
 8004346:	4630      	mov	r0, r6
 8004348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800434c:	f7ff ffdc 	bl	8004308 <__sfputc_r>
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	d1f3      	bne.n	800433c <__sfputs_r+0xa>
 8004354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004358 <_vfiprintf_r>:
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	460d      	mov	r5, r1
 800435e:	4614      	mov	r4, r2
 8004360:	4698      	mov	r8, r3
 8004362:	4606      	mov	r6, r0
 8004364:	b09d      	sub	sp, #116	; 0x74
 8004366:	b118      	cbz	r0, 8004370 <_vfiprintf_r+0x18>
 8004368:	6983      	ldr	r3, [r0, #24]
 800436a:	b90b      	cbnz	r3, 8004370 <_vfiprintf_r+0x18>
 800436c:	f000 fcac 	bl	8004cc8 <__sinit>
 8004370:	4b89      	ldr	r3, [pc, #548]	; (8004598 <_vfiprintf_r+0x240>)
 8004372:	429d      	cmp	r5, r3
 8004374:	d11b      	bne.n	80043ae <_vfiprintf_r+0x56>
 8004376:	6875      	ldr	r5, [r6, #4]
 8004378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800437a:	07d9      	lsls	r1, r3, #31
 800437c:	d405      	bmi.n	800438a <_vfiprintf_r+0x32>
 800437e:	89ab      	ldrh	r3, [r5, #12]
 8004380:	059a      	lsls	r2, r3, #22
 8004382:	d402      	bmi.n	800438a <_vfiprintf_r+0x32>
 8004384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004386:	f000 fd3d 	bl	8004e04 <__retarget_lock_acquire_recursive>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	d501      	bpl.n	8004394 <_vfiprintf_r+0x3c>
 8004390:	692b      	ldr	r3, [r5, #16]
 8004392:	b9eb      	cbnz	r3, 80043d0 <_vfiprintf_r+0x78>
 8004394:	4629      	mov	r1, r5
 8004396:	4630      	mov	r0, r6
 8004398:	f000 fb06 	bl	80049a8 <__swsetup_r>
 800439c:	b1c0      	cbz	r0, 80043d0 <_vfiprintf_r+0x78>
 800439e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043a0:	07dc      	lsls	r4, r3, #31
 80043a2:	d50e      	bpl.n	80043c2 <_vfiprintf_r+0x6a>
 80043a4:	f04f 30ff 	mov.w	r0, #4294967295
 80043a8:	b01d      	add	sp, #116	; 0x74
 80043aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ae:	4b7b      	ldr	r3, [pc, #492]	; (800459c <_vfiprintf_r+0x244>)
 80043b0:	429d      	cmp	r5, r3
 80043b2:	d101      	bne.n	80043b8 <_vfiprintf_r+0x60>
 80043b4:	68b5      	ldr	r5, [r6, #8]
 80043b6:	e7df      	b.n	8004378 <_vfiprintf_r+0x20>
 80043b8:	4b79      	ldr	r3, [pc, #484]	; (80045a0 <_vfiprintf_r+0x248>)
 80043ba:	429d      	cmp	r5, r3
 80043bc:	bf08      	it	eq
 80043be:	68f5      	ldreq	r5, [r6, #12]
 80043c0:	e7da      	b.n	8004378 <_vfiprintf_r+0x20>
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	0598      	lsls	r0, r3, #22
 80043c6:	d4ed      	bmi.n	80043a4 <_vfiprintf_r+0x4c>
 80043c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ca:	f000 fd1c 	bl	8004e06 <__retarget_lock_release_recursive>
 80043ce:	e7e9      	b.n	80043a4 <_vfiprintf_r+0x4c>
 80043d0:	2300      	movs	r3, #0
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	2320      	movs	r3, #32
 80043d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043da:	2330      	movs	r3, #48	; 0x30
 80043dc:	f04f 0901 	mov.w	r9, #1
 80043e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80045a4 <_vfiprintf_r+0x24c>
 80043e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043ec:	4623      	mov	r3, r4
 80043ee:	469a      	mov	sl, r3
 80043f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043f4:	b10a      	cbz	r2, 80043fa <_vfiprintf_r+0xa2>
 80043f6:	2a25      	cmp	r2, #37	; 0x25
 80043f8:	d1f9      	bne.n	80043ee <_vfiprintf_r+0x96>
 80043fa:	ebba 0b04 	subs.w	fp, sl, r4
 80043fe:	d00b      	beq.n	8004418 <_vfiprintf_r+0xc0>
 8004400:	465b      	mov	r3, fp
 8004402:	4622      	mov	r2, r4
 8004404:	4629      	mov	r1, r5
 8004406:	4630      	mov	r0, r6
 8004408:	f7ff ff93 	bl	8004332 <__sfputs_r>
 800440c:	3001      	adds	r0, #1
 800440e:	f000 80aa 	beq.w	8004566 <_vfiprintf_r+0x20e>
 8004412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004414:	445a      	add	r2, fp
 8004416:	9209      	str	r2, [sp, #36]	; 0x24
 8004418:	f89a 3000 	ldrb.w	r3, [sl]
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 80a2 	beq.w	8004566 <_vfiprintf_r+0x20e>
 8004422:	2300      	movs	r3, #0
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800442c:	f10a 0a01 	add.w	sl, sl, #1
 8004430:	9304      	str	r3, [sp, #16]
 8004432:	9307      	str	r3, [sp, #28]
 8004434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004438:	931a      	str	r3, [sp, #104]	; 0x68
 800443a:	4654      	mov	r4, sl
 800443c:	2205      	movs	r2, #5
 800443e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004442:	4858      	ldr	r0, [pc, #352]	; (80045a4 <_vfiprintf_r+0x24c>)
 8004444:	f000 fd44 	bl	8004ed0 <memchr>
 8004448:	9a04      	ldr	r2, [sp, #16]
 800444a:	b9d8      	cbnz	r0, 8004484 <_vfiprintf_r+0x12c>
 800444c:	06d1      	lsls	r1, r2, #27
 800444e:	bf44      	itt	mi
 8004450:	2320      	movmi	r3, #32
 8004452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004456:	0713      	lsls	r3, r2, #28
 8004458:	bf44      	itt	mi
 800445a:	232b      	movmi	r3, #43	; 0x2b
 800445c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004460:	f89a 3000 	ldrb.w	r3, [sl]
 8004464:	2b2a      	cmp	r3, #42	; 0x2a
 8004466:	d015      	beq.n	8004494 <_vfiprintf_r+0x13c>
 8004468:	4654      	mov	r4, sl
 800446a:	2000      	movs	r0, #0
 800446c:	f04f 0c0a 	mov.w	ip, #10
 8004470:	9a07      	ldr	r2, [sp, #28]
 8004472:	4621      	mov	r1, r4
 8004474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004478:	3b30      	subs	r3, #48	; 0x30
 800447a:	2b09      	cmp	r3, #9
 800447c:	d94e      	bls.n	800451c <_vfiprintf_r+0x1c4>
 800447e:	b1b0      	cbz	r0, 80044ae <_vfiprintf_r+0x156>
 8004480:	9207      	str	r2, [sp, #28]
 8004482:	e014      	b.n	80044ae <_vfiprintf_r+0x156>
 8004484:	eba0 0308 	sub.w	r3, r0, r8
 8004488:	fa09 f303 	lsl.w	r3, r9, r3
 800448c:	4313      	orrs	r3, r2
 800448e:	46a2      	mov	sl, r4
 8004490:	9304      	str	r3, [sp, #16]
 8004492:	e7d2      	b.n	800443a <_vfiprintf_r+0xe2>
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	1d19      	adds	r1, r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	9103      	str	r1, [sp, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	bfbb      	ittet	lt
 80044a0:	425b      	neglt	r3, r3
 80044a2:	f042 0202 	orrlt.w	r2, r2, #2
 80044a6:	9307      	strge	r3, [sp, #28]
 80044a8:	9307      	strlt	r3, [sp, #28]
 80044aa:	bfb8      	it	lt
 80044ac:	9204      	strlt	r2, [sp, #16]
 80044ae:	7823      	ldrb	r3, [r4, #0]
 80044b0:	2b2e      	cmp	r3, #46	; 0x2e
 80044b2:	d10c      	bne.n	80044ce <_vfiprintf_r+0x176>
 80044b4:	7863      	ldrb	r3, [r4, #1]
 80044b6:	2b2a      	cmp	r3, #42	; 0x2a
 80044b8:	d135      	bne.n	8004526 <_vfiprintf_r+0x1ce>
 80044ba:	9b03      	ldr	r3, [sp, #12]
 80044bc:	3402      	adds	r4, #2
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	9203      	str	r2, [sp, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bfb8      	it	lt
 80044c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80044cc:	9305      	str	r3, [sp, #20]
 80044ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80045b4 <_vfiprintf_r+0x25c>
 80044d2:	2203      	movs	r2, #3
 80044d4:	4650      	mov	r0, sl
 80044d6:	7821      	ldrb	r1, [r4, #0]
 80044d8:	f000 fcfa 	bl	8004ed0 <memchr>
 80044dc:	b140      	cbz	r0, 80044f0 <_vfiprintf_r+0x198>
 80044de:	2340      	movs	r3, #64	; 0x40
 80044e0:	eba0 000a 	sub.w	r0, r0, sl
 80044e4:	fa03 f000 	lsl.w	r0, r3, r0
 80044e8:	9b04      	ldr	r3, [sp, #16]
 80044ea:	3401      	adds	r4, #1
 80044ec:	4303      	orrs	r3, r0
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f4:	2206      	movs	r2, #6
 80044f6:	482c      	ldr	r0, [pc, #176]	; (80045a8 <_vfiprintf_r+0x250>)
 80044f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044fc:	f000 fce8 	bl	8004ed0 <memchr>
 8004500:	2800      	cmp	r0, #0
 8004502:	d03f      	beq.n	8004584 <_vfiprintf_r+0x22c>
 8004504:	4b29      	ldr	r3, [pc, #164]	; (80045ac <_vfiprintf_r+0x254>)
 8004506:	bb1b      	cbnz	r3, 8004550 <_vfiprintf_r+0x1f8>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	3307      	adds	r3, #7
 800450c:	f023 0307 	bic.w	r3, r3, #7
 8004510:	3308      	adds	r3, #8
 8004512:	9303      	str	r3, [sp, #12]
 8004514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004516:	443b      	add	r3, r7
 8004518:	9309      	str	r3, [sp, #36]	; 0x24
 800451a:	e767      	b.n	80043ec <_vfiprintf_r+0x94>
 800451c:	460c      	mov	r4, r1
 800451e:	2001      	movs	r0, #1
 8004520:	fb0c 3202 	mla	r2, ip, r2, r3
 8004524:	e7a5      	b.n	8004472 <_vfiprintf_r+0x11a>
 8004526:	2300      	movs	r3, #0
 8004528:	f04f 0c0a 	mov.w	ip, #10
 800452c:	4619      	mov	r1, r3
 800452e:	3401      	adds	r4, #1
 8004530:	9305      	str	r3, [sp, #20]
 8004532:	4620      	mov	r0, r4
 8004534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004538:	3a30      	subs	r2, #48	; 0x30
 800453a:	2a09      	cmp	r2, #9
 800453c:	d903      	bls.n	8004546 <_vfiprintf_r+0x1ee>
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0c5      	beq.n	80044ce <_vfiprintf_r+0x176>
 8004542:	9105      	str	r1, [sp, #20]
 8004544:	e7c3      	b.n	80044ce <_vfiprintf_r+0x176>
 8004546:	4604      	mov	r4, r0
 8004548:	2301      	movs	r3, #1
 800454a:	fb0c 2101 	mla	r1, ip, r1, r2
 800454e:	e7f0      	b.n	8004532 <_vfiprintf_r+0x1da>
 8004550:	ab03      	add	r3, sp, #12
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	462a      	mov	r2, r5
 8004556:	4630      	mov	r0, r6
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <_vfiprintf_r+0x258>)
 800455a:	a904      	add	r1, sp, #16
 800455c:	f3af 8000 	nop.w
 8004560:	4607      	mov	r7, r0
 8004562:	1c78      	adds	r0, r7, #1
 8004564:	d1d6      	bne.n	8004514 <_vfiprintf_r+0x1bc>
 8004566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004568:	07d9      	lsls	r1, r3, #31
 800456a:	d405      	bmi.n	8004578 <_vfiprintf_r+0x220>
 800456c:	89ab      	ldrh	r3, [r5, #12]
 800456e:	059a      	lsls	r2, r3, #22
 8004570:	d402      	bmi.n	8004578 <_vfiprintf_r+0x220>
 8004572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004574:	f000 fc47 	bl	8004e06 <__retarget_lock_release_recursive>
 8004578:	89ab      	ldrh	r3, [r5, #12]
 800457a:	065b      	lsls	r3, r3, #25
 800457c:	f53f af12 	bmi.w	80043a4 <_vfiprintf_r+0x4c>
 8004580:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004582:	e711      	b.n	80043a8 <_vfiprintf_r+0x50>
 8004584:	ab03      	add	r3, sp, #12
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	462a      	mov	r2, r5
 800458a:	4630      	mov	r0, r6
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <_vfiprintf_r+0x258>)
 800458e:	a904      	add	r1, sp, #16
 8004590:	f000 f882 	bl	8004698 <_printf_i>
 8004594:	e7e4      	b.n	8004560 <_vfiprintf_r+0x208>
 8004596:	bf00      	nop
 8004598:	0800533c 	.word	0x0800533c
 800459c:	0800535c 	.word	0x0800535c
 80045a0:	0800531c 	.word	0x0800531c
 80045a4:	080052e9 	.word	0x080052e9
 80045a8:	080052f3 	.word	0x080052f3
 80045ac:	00000000 	.word	0x00000000
 80045b0:	08004333 	.word	0x08004333
 80045b4:	080052ef 	.word	0x080052ef

080045b8 <_printf_common>:
 80045b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045bc:	4616      	mov	r6, r2
 80045be:	4699      	mov	r9, r3
 80045c0:	688a      	ldr	r2, [r1, #8]
 80045c2:	690b      	ldr	r3, [r1, #16]
 80045c4:	4607      	mov	r7, r0
 80045c6:	4293      	cmp	r3, r2
 80045c8:	bfb8      	it	lt
 80045ca:	4613      	movlt	r3, r2
 80045cc:	6033      	str	r3, [r6, #0]
 80045ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045d2:	460c      	mov	r4, r1
 80045d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045d8:	b10a      	cbz	r2, 80045de <_printf_common+0x26>
 80045da:	3301      	adds	r3, #1
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	0699      	lsls	r1, r3, #26
 80045e2:	bf42      	ittt	mi
 80045e4:	6833      	ldrmi	r3, [r6, #0]
 80045e6:	3302      	addmi	r3, #2
 80045e8:	6033      	strmi	r3, [r6, #0]
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	f015 0506 	ands.w	r5, r5, #6
 80045f0:	d106      	bne.n	8004600 <_printf_common+0x48>
 80045f2:	f104 0a19 	add.w	sl, r4, #25
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	6832      	ldr	r2, [r6, #0]
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dc28      	bgt.n	8004652 <_printf_common+0x9a>
 8004600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004604:	1e13      	subs	r3, r2, #0
 8004606:	6822      	ldr	r2, [r4, #0]
 8004608:	bf18      	it	ne
 800460a:	2301      	movne	r3, #1
 800460c:	0692      	lsls	r2, r2, #26
 800460e:	d42d      	bmi.n	800466c <_printf_common+0xb4>
 8004610:	4649      	mov	r1, r9
 8004612:	4638      	mov	r0, r7
 8004614:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004618:	47c0      	blx	r8
 800461a:	3001      	adds	r0, #1
 800461c:	d020      	beq.n	8004660 <_printf_common+0xa8>
 800461e:	6823      	ldr	r3, [r4, #0]
 8004620:	68e5      	ldr	r5, [r4, #12]
 8004622:	f003 0306 	and.w	r3, r3, #6
 8004626:	2b04      	cmp	r3, #4
 8004628:	bf18      	it	ne
 800462a:	2500      	movne	r5, #0
 800462c:	6832      	ldr	r2, [r6, #0]
 800462e:	f04f 0600 	mov.w	r6, #0
 8004632:	68a3      	ldr	r3, [r4, #8]
 8004634:	bf08      	it	eq
 8004636:	1aad      	subeq	r5, r5, r2
 8004638:	6922      	ldr	r2, [r4, #16]
 800463a:	bf08      	it	eq
 800463c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004640:	4293      	cmp	r3, r2
 8004642:	bfc4      	itt	gt
 8004644:	1a9b      	subgt	r3, r3, r2
 8004646:	18ed      	addgt	r5, r5, r3
 8004648:	341a      	adds	r4, #26
 800464a:	42b5      	cmp	r5, r6
 800464c:	d11a      	bne.n	8004684 <_printf_common+0xcc>
 800464e:	2000      	movs	r0, #0
 8004650:	e008      	b.n	8004664 <_printf_common+0xac>
 8004652:	2301      	movs	r3, #1
 8004654:	4652      	mov	r2, sl
 8004656:	4649      	mov	r1, r9
 8004658:	4638      	mov	r0, r7
 800465a:	47c0      	blx	r8
 800465c:	3001      	adds	r0, #1
 800465e:	d103      	bne.n	8004668 <_printf_common+0xb0>
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004668:	3501      	adds	r5, #1
 800466a:	e7c4      	b.n	80045f6 <_printf_common+0x3e>
 800466c:	2030      	movs	r0, #48	; 0x30
 800466e:	18e1      	adds	r1, r4, r3
 8004670:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800467a:	4422      	add	r2, r4
 800467c:	3302      	adds	r3, #2
 800467e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004682:	e7c5      	b.n	8004610 <_printf_common+0x58>
 8004684:	2301      	movs	r3, #1
 8004686:	4622      	mov	r2, r4
 8004688:	4649      	mov	r1, r9
 800468a:	4638      	mov	r0, r7
 800468c:	47c0      	blx	r8
 800468e:	3001      	adds	r0, #1
 8004690:	d0e6      	beq.n	8004660 <_printf_common+0xa8>
 8004692:	3601      	adds	r6, #1
 8004694:	e7d9      	b.n	800464a <_printf_common+0x92>
	...

08004698 <_printf_i>:
 8004698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800469c:	460c      	mov	r4, r1
 800469e:	7e27      	ldrb	r7, [r4, #24]
 80046a0:	4691      	mov	r9, r2
 80046a2:	2f78      	cmp	r7, #120	; 0x78
 80046a4:	4680      	mov	r8, r0
 80046a6:	469a      	mov	sl, r3
 80046a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80046aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046ae:	d807      	bhi.n	80046c0 <_printf_i+0x28>
 80046b0:	2f62      	cmp	r7, #98	; 0x62
 80046b2:	d80a      	bhi.n	80046ca <_printf_i+0x32>
 80046b4:	2f00      	cmp	r7, #0
 80046b6:	f000 80d9 	beq.w	800486c <_printf_i+0x1d4>
 80046ba:	2f58      	cmp	r7, #88	; 0x58
 80046bc:	f000 80a4 	beq.w	8004808 <_printf_i+0x170>
 80046c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046c8:	e03a      	b.n	8004740 <_printf_i+0xa8>
 80046ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ce:	2b15      	cmp	r3, #21
 80046d0:	d8f6      	bhi.n	80046c0 <_printf_i+0x28>
 80046d2:	a001      	add	r0, pc, #4	; (adr r0, 80046d8 <_printf_i+0x40>)
 80046d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046d8:	08004731 	.word	0x08004731
 80046dc:	08004745 	.word	0x08004745
 80046e0:	080046c1 	.word	0x080046c1
 80046e4:	080046c1 	.word	0x080046c1
 80046e8:	080046c1 	.word	0x080046c1
 80046ec:	080046c1 	.word	0x080046c1
 80046f0:	08004745 	.word	0x08004745
 80046f4:	080046c1 	.word	0x080046c1
 80046f8:	080046c1 	.word	0x080046c1
 80046fc:	080046c1 	.word	0x080046c1
 8004700:	080046c1 	.word	0x080046c1
 8004704:	08004853 	.word	0x08004853
 8004708:	08004775 	.word	0x08004775
 800470c:	08004835 	.word	0x08004835
 8004710:	080046c1 	.word	0x080046c1
 8004714:	080046c1 	.word	0x080046c1
 8004718:	08004875 	.word	0x08004875
 800471c:	080046c1 	.word	0x080046c1
 8004720:	08004775 	.word	0x08004775
 8004724:	080046c1 	.word	0x080046c1
 8004728:	080046c1 	.word	0x080046c1
 800472c:	0800483d 	.word	0x0800483d
 8004730:	680b      	ldr	r3, [r1, #0]
 8004732:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004736:	1d1a      	adds	r2, r3, #4
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	600a      	str	r2, [r1, #0]
 800473c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004740:	2301      	movs	r3, #1
 8004742:	e0a4      	b.n	800488e <_printf_i+0x1f6>
 8004744:	6825      	ldr	r5, [r4, #0]
 8004746:	6808      	ldr	r0, [r1, #0]
 8004748:	062e      	lsls	r6, r5, #24
 800474a:	f100 0304 	add.w	r3, r0, #4
 800474e:	d50a      	bpl.n	8004766 <_printf_i+0xce>
 8004750:	6805      	ldr	r5, [r0, #0]
 8004752:	600b      	str	r3, [r1, #0]
 8004754:	2d00      	cmp	r5, #0
 8004756:	da03      	bge.n	8004760 <_printf_i+0xc8>
 8004758:	232d      	movs	r3, #45	; 0x2d
 800475a:	426d      	negs	r5, r5
 800475c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004760:	230a      	movs	r3, #10
 8004762:	485e      	ldr	r0, [pc, #376]	; (80048dc <_printf_i+0x244>)
 8004764:	e019      	b.n	800479a <_printf_i+0x102>
 8004766:	f015 0f40 	tst.w	r5, #64	; 0x40
 800476a:	6805      	ldr	r5, [r0, #0]
 800476c:	600b      	str	r3, [r1, #0]
 800476e:	bf18      	it	ne
 8004770:	b22d      	sxthne	r5, r5
 8004772:	e7ef      	b.n	8004754 <_printf_i+0xbc>
 8004774:	680b      	ldr	r3, [r1, #0]
 8004776:	6825      	ldr	r5, [r4, #0]
 8004778:	1d18      	adds	r0, r3, #4
 800477a:	6008      	str	r0, [r1, #0]
 800477c:	0628      	lsls	r0, r5, #24
 800477e:	d501      	bpl.n	8004784 <_printf_i+0xec>
 8004780:	681d      	ldr	r5, [r3, #0]
 8004782:	e002      	b.n	800478a <_printf_i+0xf2>
 8004784:	0669      	lsls	r1, r5, #25
 8004786:	d5fb      	bpl.n	8004780 <_printf_i+0xe8>
 8004788:	881d      	ldrh	r5, [r3, #0]
 800478a:	2f6f      	cmp	r7, #111	; 0x6f
 800478c:	bf0c      	ite	eq
 800478e:	2308      	moveq	r3, #8
 8004790:	230a      	movne	r3, #10
 8004792:	4852      	ldr	r0, [pc, #328]	; (80048dc <_printf_i+0x244>)
 8004794:	2100      	movs	r1, #0
 8004796:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800479a:	6866      	ldr	r6, [r4, #4]
 800479c:	2e00      	cmp	r6, #0
 800479e:	bfa8      	it	ge
 80047a0:	6821      	ldrge	r1, [r4, #0]
 80047a2:	60a6      	str	r6, [r4, #8]
 80047a4:	bfa4      	itt	ge
 80047a6:	f021 0104 	bicge.w	r1, r1, #4
 80047aa:	6021      	strge	r1, [r4, #0]
 80047ac:	b90d      	cbnz	r5, 80047b2 <_printf_i+0x11a>
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	d04d      	beq.n	800484e <_printf_i+0x1b6>
 80047b2:	4616      	mov	r6, r2
 80047b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80047b8:	fb03 5711 	mls	r7, r3, r1, r5
 80047bc:	5dc7      	ldrb	r7, [r0, r7]
 80047be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047c2:	462f      	mov	r7, r5
 80047c4:	42bb      	cmp	r3, r7
 80047c6:	460d      	mov	r5, r1
 80047c8:	d9f4      	bls.n	80047b4 <_printf_i+0x11c>
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d10b      	bne.n	80047e6 <_printf_i+0x14e>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	07df      	lsls	r7, r3, #31
 80047d2:	d508      	bpl.n	80047e6 <_printf_i+0x14e>
 80047d4:	6923      	ldr	r3, [r4, #16]
 80047d6:	6861      	ldr	r1, [r4, #4]
 80047d8:	4299      	cmp	r1, r3
 80047da:	bfde      	ittt	le
 80047dc:	2330      	movle	r3, #48	; 0x30
 80047de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047e6:	1b92      	subs	r2, r2, r6
 80047e8:	6122      	str	r2, [r4, #16]
 80047ea:	464b      	mov	r3, r9
 80047ec:	4621      	mov	r1, r4
 80047ee:	4640      	mov	r0, r8
 80047f0:	f8cd a000 	str.w	sl, [sp]
 80047f4:	aa03      	add	r2, sp, #12
 80047f6:	f7ff fedf 	bl	80045b8 <_printf_common>
 80047fa:	3001      	adds	r0, #1
 80047fc:	d14c      	bne.n	8004898 <_printf_i+0x200>
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	b004      	add	sp, #16
 8004804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004808:	4834      	ldr	r0, [pc, #208]	; (80048dc <_printf_i+0x244>)
 800480a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800480e:	680e      	ldr	r6, [r1, #0]
 8004810:	6823      	ldr	r3, [r4, #0]
 8004812:	f856 5b04 	ldr.w	r5, [r6], #4
 8004816:	061f      	lsls	r7, r3, #24
 8004818:	600e      	str	r6, [r1, #0]
 800481a:	d514      	bpl.n	8004846 <_printf_i+0x1ae>
 800481c:	07d9      	lsls	r1, r3, #31
 800481e:	bf44      	itt	mi
 8004820:	f043 0320 	orrmi.w	r3, r3, #32
 8004824:	6023      	strmi	r3, [r4, #0]
 8004826:	b91d      	cbnz	r5, 8004830 <_printf_i+0x198>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	f023 0320 	bic.w	r3, r3, #32
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	2310      	movs	r3, #16
 8004832:	e7af      	b.n	8004794 <_printf_i+0xfc>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	f043 0320 	orr.w	r3, r3, #32
 800483a:	6023      	str	r3, [r4, #0]
 800483c:	2378      	movs	r3, #120	; 0x78
 800483e:	4828      	ldr	r0, [pc, #160]	; (80048e0 <_printf_i+0x248>)
 8004840:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004844:	e7e3      	b.n	800480e <_printf_i+0x176>
 8004846:	065e      	lsls	r6, r3, #25
 8004848:	bf48      	it	mi
 800484a:	b2ad      	uxthmi	r5, r5
 800484c:	e7e6      	b.n	800481c <_printf_i+0x184>
 800484e:	4616      	mov	r6, r2
 8004850:	e7bb      	b.n	80047ca <_printf_i+0x132>
 8004852:	680b      	ldr	r3, [r1, #0]
 8004854:	6826      	ldr	r6, [r4, #0]
 8004856:	1d1d      	adds	r5, r3, #4
 8004858:	6960      	ldr	r0, [r4, #20]
 800485a:	600d      	str	r5, [r1, #0]
 800485c:	0635      	lsls	r5, r6, #24
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	d501      	bpl.n	8004866 <_printf_i+0x1ce>
 8004862:	6018      	str	r0, [r3, #0]
 8004864:	e002      	b.n	800486c <_printf_i+0x1d4>
 8004866:	0671      	lsls	r1, r6, #25
 8004868:	d5fb      	bpl.n	8004862 <_printf_i+0x1ca>
 800486a:	8018      	strh	r0, [r3, #0]
 800486c:	2300      	movs	r3, #0
 800486e:	4616      	mov	r6, r2
 8004870:	6123      	str	r3, [r4, #16]
 8004872:	e7ba      	b.n	80047ea <_printf_i+0x152>
 8004874:	680b      	ldr	r3, [r1, #0]
 8004876:	1d1a      	adds	r2, r3, #4
 8004878:	600a      	str	r2, [r1, #0]
 800487a:	681e      	ldr	r6, [r3, #0]
 800487c:	2100      	movs	r1, #0
 800487e:	4630      	mov	r0, r6
 8004880:	6862      	ldr	r2, [r4, #4]
 8004882:	f000 fb25 	bl	8004ed0 <memchr>
 8004886:	b108      	cbz	r0, 800488c <_printf_i+0x1f4>
 8004888:	1b80      	subs	r0, r0, r6
 800488a:	6060      	str	r0, [r4, #4]
 800488c:	6863      	ldr	r3, [r4, #4]
 800488e:	6123      	str	r3, [r4, #16]
 8004890:	2300      	movs	r3, #0
 8004892:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004896:	e7a8      	b.n	80047ea <_printf_i+0x152>
 8004898:	4632      	mov	r2, r6
 800489a:	4649      	mov	r1, r9
 800489c:	4640      	mov	r0, r8
 800489e:	6923      	ldr	r3, [r4, #16]
 80048a0:	47d0      	blx	sl
 80048a2:	3001      	adds	r0, #1
 80048a4:	d0ab      	beq.n	80047fe <_printf_i+0x166>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	079b      	lsls	r3, r3, #30
 80048aa:	d413      	bmi.n	80048d4 <_printf_i+0x23c>
 80048ac:	68e0      	ldr	r0, [r4, #12]
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	4298      	cmp	r0, r3
 80048b2:	bfb8      	it	lt
 80048b4:	4618      	movlt	r0, r3
 80048b6:	e7a4      	b.n	8004802 <_printf_i+0x16a>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4632      	mov	r2, r6
 80048bc:	4649      	mov	r1, r9
 80048be:	4640      	mov	r0, r8
 80048c0:	47d0      	blx	sl
 80048c2:	3001      	adds	r0, #1
 80048c4:	d09b      	beq.n	80047fe <_printf_i+0x166>
 80048c6:	3501      	adds	r5, #1
 80048c8:	68e3      	ldr	r3, [r4, #12]
 80048ca:	9903      	ldr	r1, [sp, #12]
 80048cc:	1a5b      	subs	r3, r3, r1
 80048ce:	42ab      	cmp	r3, r5
 80048d0:	dcf2      	bgt.n	80048b8 <_printf_i+0x220>
 80048d2:	e7eb      	b.n	80048ac <_printf_i+0x214>
 80048d4:	2500      	movs	r5, #0
 80048d6:	f104 0619 	add.w	r6, r4, #25
 80048da:	e7f5      	b.n	80048c8 <_printf_i+0x230>
 80048dc:	080052fa 	.word	0x080052fa
 80048e0:	0800530b 	.word	0x0800530b

080048e4 <_sbrk_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	2300      	movs	r3, #0
 80048e8:	4d05      	ldr	r5, [pc, #20]	; (8004900 <_sbrk_r+0x1c>)
 80048ea:	4604      	mov	r4, r0
 80048ec:	4608      	mov	r0, r1
 80048ee:	602b      	str	r3, [r5, #0]
 80048f0:	f7fc fa56 	bl	8000da0 <_sbrk>
 80048f4:	1c43      	adds	r3, r0, #1
 80048f6:	d102      	bne.n	80048fe <_sbrk_r+0x1a>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	b103      	cbz	r3, 80048fe <_sbrk_r+0x1a>
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
 8004900:	20000308 	.word	0x20000308

08004904 <__swbuf_r>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	460e      	mov	r6, r1
 8004908:	4614      	mov	r4, r2
 800490a:	4605      	mov	r5, r0
 800490c:	b118      	cbz	r0, 8004916 <__swbuf_r+0x12>
 800490e:	6983      	ldr	r3, [r0, #24]
 8004910:	b90b      	cbnz	r3, 8004916 <__swbuf_r+0x12>
 8004912:	f000 f9d9 	bl	8004cc8 <__sinit>
 8004916:	4b21      	ldr	r3, [pc, #132]	; (800499c <__swbuf_r+0x98>)
 8004918:	429c      	cmp	r4, r3
 800491a:	d12b      	bne.n	8004974 <__swbuf_r+0x70>
 800491c:	686c      	ldr	r4, [r5, #4]
 800491e:	69a3      	ldr	r3, [r4, #24]
 8004920:	60a3      	str	r3, [r4, #8]
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	071a      	lsls	r2, r3, #28
 8004926:	d52f      	bpl.n	8004988 <__swbuf_r+0x84>
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	b36b      	cbz	r3, 8004988 <__swbuf_r+0x84>
 800492c:	6923      	ldr	r3, [r4, #16]
 800492e:	6820      	ldr	r0, [r4, #0]
 8004930:	b2f6      	uxtb	r6, r6
 8004932:	1ac0      	subs	r0, r0, r3
 8004934:	6963      	ldr	r3, [r4, #20]
 8004936:	4637      	mov	r7, r6
 8004938:	4283      	cmp	r3, r0
 800493a:	dc04      	bgt.n	8004946 <__swbuf_r+0x42>
 800493c:	4621      	mov	r1, r4
 800493e:	4628      	mov	r0, r5
 8004940:	f000 f92e 	bl	8004ba0 <_fflush_r>
 8004944:	bb30      	cbnz	r0, 8004994 <__swbuf_r+0x90>
 8004946:	68a3      	ldr	r3, [r4, #8]
 8004948:	3001      	adds	r0, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	60a3      	str	r3, [r4, #8]
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	6022      	str	r2, [r4, #0]
 8004954:	701e      	strb	r6, [r3, #0]
 8004956:	6963      	ldr	r3, [r4, #20]
 8004958:	4283      	cmp	r3, r0
 800495a:	d004      	beq.n	8004966 <__swbuf_r+0x62>
 800495c:	89a3      	ldrh	r3, [r4, #12]
 800495e:	07db      	lsls	r3, r3, #31
 8004960:	d506      	bpl.n	8004970 <__swbuf_r+0x6c>
 8004962:	2e0a      	cmp	r6, #10
 8004964:	d104      	bne.n	8004970 <__swbuf_r+0x6c>
 8004966:	4621      	mov	r1, r4
 8004968:	4628      	mov	r0, r5
 800496a:	f000 f919 	bl	8004ba0 <_fflush_r>
 800496e:	b988      	cbnz	r0, 8004994 <__swbuf_r+0x90>
 8004970:	4638      	mov	r0, r7
 8004972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <__swbuf_r+0x9c>)
 8004976:	429c      	cmp	r4, r3
 8004978:	d101      	bne.n	800497e <__swbuf_r+0x7a>
 800497a:	68ac      	ldr	r4, [r5, #8]
 800497c:	e7cf      	b.n	800491e <__swbuf_r+0x1a>
 800497e:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <__swbuf_r+0xa0>)
 8004980:	429c      	cmp	r4, r3
 8004982:	bf08      	it	eq
 8004984:	68ec      	ldreq	r4, [r5, #12]
 8004986:	e7ca      	b.n	800491e <__swbuf_r+0x1a>
 8004988:	4621      	mov	r1, r4
 800498a:	4628      	mov	r0, r5
 800498c:	f000 f80c 	bl	80049a8 <__swsetup_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	d0cb      	beq.n	800492c <__swbuf_r+0x28>
 8004994:	f04f 37ff 	mov.w	r7, #4294967295
 8004998:	e7ea      	b.n	8004970 <__swbuf_r+0x6c>
 800499a:	bf00      	nop
 800499c:	0800533c 	.word	0x0800533c
 80049a0:	0800535c 	.word	0x0800535c
 80049a4:	0800531c 	.word	0x0800531c

080049a8 <__swsetup_r>:
 80049a8:	4b32      	ldr	r3, [pc, #200]	; (8004a74 <__swsetup_r+0xcc>)
 80049aa:	b570      	push	{r4, r5, r6, lr}
 80049ac:	681d      	ldr	r5, [r3, #0]
 80049ae:	4606      	mov	r6, r0
 80049b0:	460c      	mov	r4, r1
 80049b2:	b125      	cbz	r5, 80049be <__swsetup_r+0x16>
 80049b4:	69ab      	ldr	r3, [r5, #24]
 80049b6:	b913      	cbnz	r3, 80049be <__swsetup_r+0x16>
 80049b8:	4628      	mov	r0, r5
 80049ba:	f000 f985 	bl	8004cc8 <__sinit>
 80049be:	4b2e      	ldr	r3, [pc, #184]	; (8004a78 <__swsetup_r+0xd0>)
 80049c0:	429c      	cmp	r4, r3
 80049c2:	d10f      	bne.n	80049e4 <__swsetup_r+0x3c>
 80049c4:	686c      	ldr	r4, [r5, #4]
 80049c6:	89a3      	ldrh	r3, [r4, #12]
 80049c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049cc:	0719      	lsls	r1, r3, #28
 80049ce:	d42c      	bmi.n	8004a2a <__swsetup_r+0x82>
 80049d0:	06dd      	lsls	r5, r3, #27
 80049d2:	d411      	bmi.n	80049f8 <__swsetup_r+0x50>
 80049d4:	2309      	movs	r3, #9
 80049d6:	6033      	str	r3, [r6, #0]
 80049d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	e03e      	b.n	8004a62 <__swsetup_r+0xba>
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <__swsetup_r+0xd4>)
 80049e6:	429c      	cmp	r4, r3
 80049e8:	d101      	bne.n	80049ee <__swsetup_r+0x46>
 80049ea:	68ac      	ldr	r4, [r5, #8]
 80049ec:	e7eb      	b.n	80049c6 <__swsetup_r+0x1e>
 80049ee:	4b24      	ldr	r3, [pc, #144]	; (8004a80 <__swsetup_r+0xd8>)
 80049f0:	429c      	cmp	r4, r3
 80049f2:	bf08      	it	eq
 80049f4:	68ec      	ldreq	r4, [r5, #12]
 80049f6:	e7e6      	b.n	80049c6 <__swsetup_r+0x1e>
 80049f8:	0758      	lsls	r0, r3, #29
 80049fa:	d512      	bpl.n	8004a22 <__swsetup_r+0x7a>
 80049fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049fe:	b141      	cbz	r1, 8004a12 <__swsetup_r+0x6a>
 8004a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a04:	4299      	cmp	r1, r3
 8004a06:	d002      	beq.n	8004a0e <__swsetup_r+0x66>
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f7ff fbd7 	bl	80041bc <_free_r>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	6363      	str	r3, [r4, #52]	; 0x34
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a18:	81a3      	strh	r3, [r4, #12]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6063      	str	r3, [r4, #4]
 8004a1e:	6923      	ldr	r3, [r4, #16]
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	f043 0308 	orr.w	r3, r3, #8
 8004a28:	81a3      	strh	r3, [r4, #12]
 8004a2a:	6923      	ldr	r3, [r4, #16]
 8004a2c:	b94b      	cbnz	r3, 8004a42 <__swsetup_r+0x9a>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a38:	d003      	beq.n	8004a42 <__swsetup_r+0x9a>
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4630      	mov	r0, r6
 8004a3e:	f000 fa07 	bl	8004e50 <__smakebuf_r>
 8004a42:	89a0      	ldrh	r0, [r4, #12]
 8004a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a48:	f010 0301 	ands.w	r3, r0, #1
 8004a4c:	d00a      	beq.n	8004a64 <__swsetup_r+0xbc>
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60a3      	str	r3, [r4, #8]
 8004a52:	6963      	ldr	r3, [r4, #20]
 8004a54:	425b      	negs	r3, r3
 8004a56:	61a3      	str	r3, [r4, #24]
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	b943      	cbnz	r3, 8004a6e <__swsetup_r+0xc6>
 8004a5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a60:	d1ba      	bne.n	80049d8 <__swsetup_r+0x30>
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	0781      	lsls	r1, r0, #30
 8004a66:	bf58      	it	pl
 8004a68:	6963      	ldrpl	r3, [r4, #20]
 8004a6a:	60a3      	str	r3, [r4, #8]
 8004a6c:	e7f4      	b.n	8004a58 <__swsetup_r+0xb0>
 8004a6e:	2000      	movs	r0, #0
 8004a70:	e7f7      	b.n	8004a62 <__swsetup_r+0xba>
 8004a72:	bf00      	nop
 8004a74:	2000000c 	.word	0x2000000c
 8004a78:	0800533c 	.word	0x0800533c
 8004a7c:	0800535c 	.word	0x0800535c
 8004a80:	0800531c 	.word	0x0800531c

08004a84 <abort>:
 8004a84:	2006      	movs	r0, #6
 8004a86:	b508      	push	{r3, lr}
 8004a88:	f000 fa64 	bl	8004f54 <raise>
 8004a8c:	2001      	movs	r0, #1
 8004a8e:	f7fc f914 	bl	8000cba <_exit>
	...

08004a94 <__sflush_r>:
 8004a94:	898a      	ldrh	r2, [r1, #12]
 8004a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	0710      	lsls	r0, r2, #28
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	d458      	bmi.n	8004b54 <__sflush_r+0xc0>
 8004aa2:	684b      	ldr	r3, [r1, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	dc05      	bgt.n	8004ab4 <__sflush_r+0x20>
 8004aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dc02      	bgt.n	8004ab4 <__sflush_r+0x20>
 8004aae:	2000      	movs	r0, #0
 8004ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ab6:	2e00      	cmp	r6, #0
 8004ab8:	d0f9      	beq.n	8004aae <__sflush_r+0x1a>
 8004aba:	2300      	movs	r3, #0
 8004abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ac0:	682f      	ldr	r7, [r5, #0]
 8004ac2:	602b      	str	r3, [r5, #0]
 8004ac4:	d032      	beq.n	8004b2c <__sflush_r+0x98>
 8004ac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	075a      	lsls	r2, r3, #29
 8004acc:	d505      	bpl.n	8004ada <__sflush_r+0x46>
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	1ac0      	subs	r0, r0, r3
 8004ad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ad4:	b10b      	cbz	r3, 8004ada <__sflush_r+0x46>
 8004ad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ad8:	1ac0      	subs	r0, r0, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	4602      	mov	r2, r0
 8004ade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	6a21      	ldr	r1, [r4, #32]
 8004ae4:	47b0      	blx	r6
 8004ae6:	1c43      	adds	r3, r0, #1
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	d106      	bne.n	8004afa <__sflush_r+0x66>
 8004aec:	6829      	ldr	r1, [r5, #0]
 8004aee:	291d      	cmp	r1, #29
 8004af0:	d82c      	bhi.n	8004b4c <__sflush_r+0xb8>
 8004af2:	4a2a      	ldr	r2, [pc, #168]	; (8004b9c <__sflush_r+0x108>)
 8004af4:	40ca      	lsrs	r2, r1
 8004af6:	07d6      	lsls	r6, r2, #31
 8004af8:	d528      	bpl.n	8004b4c <__sflush_r+0xb8>
 8004afa:	2200      	movs	r2, #0
 8004afc:	6062      	str	r2, [r4, #4]
 8004afe:	6922      	ldr	r2, [r4, #16]
 8004b00:	04d9      	lsls	r1, r3, #19
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	d504      	bpl.n	8004b10 <__sflush_r+0x7c>
 8004b06:	1c42      	adds	r2, r0, #1
 8004b08:	d101      	bne.n	8004b0e <__sflush_r+0x7a>
 8004b0a:	682b      	ldr	r3, [r5, #0]
 8004b0c:	b903      	cbnz	r3, 8004b10 <__sflush_r+0x7c>
 8004b0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b12:	602f      	str	r7, [r5, #0]
 8004b14:	2900      	cmp	r1, #0
 8004b16:	d0ca      	beq.n	8004aae <__sflush_r+0x1a>
 8004b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	d002      	beq.n	8004b26 <__sflush_r+0x92>
 8004b20:	4628      	mov	r0, r5
 8004b22:	f7ff fb4b 	bl	80041bc <_free_r>
 8004b26:	2000      	movs	r0, #0
 8004b28:	6360      	str	r0, [r4, #52]	; 0x34
 8004b2a:	e7c1      	b.n	8004ab0 <__sflush_r+0x1c>
 8004b2c:	6a21      	ldr	r1, [r4, #32]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	4628      	mov	r0, r5
 8004b32:	47b0      	blx	r6
 8004b34:	1c41      	adds	r1, r0, #1
 8004b36:	d1c7      	bne.n	8004ac8 <__sflush_r+0x34>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d0c4      	beq.n	8004ac8 <__sflush_r+0x34>
 8004b3e:	2b1d      	cmp	r3, #29
 8004b40:	d001      	beq.n	8004b46 <__sflush_r+0xb2>
 8004b42:	2b16      	cmp	r3, #22
 8004b44:	d101      	bne.n	8004b4a <__sflush_r+0xb6>
 8004b46:	602f      	str	r7, [r5, #0]
 8004b48:	e7b1      	b.n	8004aae <__sflush_r+0x1a>
 8004b4a:	89a3      	ldrh	r3, [r4, #12]
 8004b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	e7ad      	b.n	8004ab0 <__sflush_r+0x1c>
 8004b54:	690f      	ldr	r7, [r1, #16]
 8004b56:	2f00      	cmp	r7, #0
 8004b58:	d0a9      	beq.n	8004aae <__sflush_r+0x1a>
 8004b5a:	0793      	lsls	r3, r2, #30
 8004b5c:	bf18      	it	ne
 8004b5e:	2300      	movne	r3, #0
 8004b60:	680e      	ldr	r6, [r1, #0]
 8004b62:	bf08      	it	eq
 8004b64:	694b      	ldreq	r3, [r1, #20]
 8004b66:	eba6 0807 	sub.w	r8, r6, r7
 8004b6a:	600f      	str	r7, [r1, #0]
 8004b6c:	608b      	str	r3, [r1, #8]
 8004b6e:	f1b8 0f00 	cmp.w	r8, #0
 8004b72:	dd9c      	ble.n	8004aae <__sflush_r+0x1a>
 8004b74:	4643      	mov	r3, r8
 8004b76:	463a      	mov	r2, r7
 8004b78:	4628      	mov	r0, r5
 8004b7a:	6a21      	ldr	r1, [r4, #32]
 8004b7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b7e:	47b0      	blx	r6
 8004b80:	2800      	cmp	r0, #0
 8004b82:	dc06      	bgt.n	8004b92 <__sflush_r+0xfe>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	e78e      	b.n	8004ab0 <__sflush_r+0x1c>
 8004b92:	4407      	add	r7, r0
 8004b94:	eba8 0800 	sub.w	r8, r8, r0
 8004b98:	e7e9      	b.n	8004b6e <__sflush_r+0xda>
 8004b9a:	bf00      	nop
 8004b9c:	20400001 	.word	0x20400001

08004ba0 <_fflush_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	690b      	ldr	r3, [r1, #16]
 8004ba4:	4605      	mov	r5, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	b913      	cbnz	r3, 8004bb0 <_fflush_r+0x10>
 8004baa:	2500      	movs	r5, #0
 8004bac:	4628      	mov	r0, r5
 8004bae:	bd38      	pop	{r3, r4, r5, pc}
 8004bb0:	b118      	cbz	r0, 8004bba <_fflush_r+0x1a>
 8004bb2:	6983      	ldr	r3, [r0, #24]
 8004bb4:	b90b      	cbnz	r3, 8004bba <_fflush_r+0x1a>
 8004bb6:	f000 f887 	bl	8004cc8 <__sinit>
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <_fflush_r+0x6c>)
 8004bbc:	429c      	cmp	r4, r3
 8004bbe:	d11b      	bne.n	8004bf8 <_fflush_r+0x58>
 8004bc0:	686c      	ldr	r4, [r5, #4]
 8004bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0ef      	beq.n	8004baa <_fflush_r+0xa>
 8004bca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004bcc:	07d0      	lsls	r0, r2, #31
 8004bce:	d404      	bmi.n	8004bda <_fflush_r+0x3a>
 8004bd0:	0599      	lsls	r1, r3, #22
 8004bd2:	d402      	bmi.n	8004bda <_fflush_r+0x3a>
 8004bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bd6:	f000 f915 	bl	8004e04 <__retarget_lock_acquire_recursive>
 8004bda:	4628      	mov	r0, r5
 8004bdc:	4621      	mov	r1, r4
 8004bde:	f7ff ff59 	bl	8004a94 <__sflush_r>
 8004be2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004be4:	4605      	mov	r5, r0
 8004be6:	07da      	lsls	r2, r3, #31
 8004be8:	d4e0      	bmi.n	8004bac <_fflush_r+0xc>
 8004bea:	89a3      	ldrh	r3, [r4, #12]
 8004bec:	059b      	lsls	r3, r3, #22
 8004bee:	d4dd      	bmi.n	8004bac <_fflush_r+0xc>
 8004bf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bf2:	f000 f908 	bl	8004e06 <__retarget_lock_release_recursive>
 8004bf6:	e7d9      	b.n	8004bac <_fflush_r+0xc>
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <_fflush_r+0x70>)
 8004bfa:	429c      	cmp	r4, r3
 8004bfc:	d101      	bne.n	8004c02 <_fflush_r+0x62>
 8004bfe:	68ac      	ldr	r4, [r5, #8]
 8004c00:	e7df      	b.n	8004bc2 <_fflush_r+0x22>
 8004c02:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <_fflush_r+0x74>)
 8004c04:	429c      	cmp	r4, r3
 8004c06:	bf08      	it	eq
 8004c08:	68ec      	ldreq	r4, [r5, #12]
 8004c0a:	e7da      	b.n	8004bc2 <_fflush_r+0x22>
 8004c0c:	0800533c 	.word	0x0800533c
 8004c10:	0800535c 	.word	0x0800535c
 8004c14:	0800531c 	.word	0x0800531c

08004c18 <std>:
 8004c18:	2300      	movs	r3, #0
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c26:	6083      	str	r3, [r0, #8]
 8004c28:	8181      	strh	r1, [r0, #12]
 8004c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c2c:	81c2      	strh	r2, [r0, #14]
 8004c2e:	6183      	str	r3, [r0, #24]
 8004c30:	4619      	mov	r1, r3
 8004c32:	2208      	movs	r2, #8
 8004c34:	305c      	adds	r0, #92	; 0x5c
 8004c36:	f7ff f995 	bl	8003f64 <memset>
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <std+0x38>)
 8004c3c:	6224      	str	r4, [r4, #32]
 8004c3e:	6263      	str	r3, [r4, #36]	; 0x24
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <std+0x3c>)
 8004c42:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <std+0x40>)
 8004c46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <std+0x44>)
 8004c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	08004f8d 	.word	0x08004f8d
 8004c54:	08004faf 	.word	0x08004faf
 8004c58:	08004fe7 	.word	0x08004fe7
 8004c5c:	0800500b 	.word	0x0800500b

08004c60 <_cleanup_r>:
 8004c60:	4901      	ldr	r1, [pc, #4]	; (8004c68 <_cleanup_r+0x8>)
 8004c62:	f000 b8af 	b.w	8004dc4 <_fwalk_reent>
 8004c66:	bf00      	nop
 8004c68:	08004ba1 	.word	0x08004ba1

08004c6c <__sfmoreglue>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	2568      	movs	r5, #104	; 0x68
 8004c70:	1e4a      	subs	r2, r1, #1
 8004c72:	4355      	muls	r5, r2
 8004c74:	460e      	mov	r6, r1
 8004c76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c7a:	f7ff faeb 	bl	8004254 <_malloc_r>
 8004c7e:	4604      	mov	r4, r0
 8004c80:	b140      	cbz	r0, 8004c94 <__sfmoreglue+0x28>
 8004c82:	2100      	movs	r1, #0
 8004c84:	e9c0 1600 	strd	r1, r6, [r0]
 8004c88:	300c      	adds	r0, #12
 8004c8a:	60a0      	str	r0, [r4, #8]
 8004c8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c90:	f7ff f968 	bl	8003f64 <memset>
 8004c94:	4620      	mov	r0, r4
 8004c96:	bd70      	pop	{r4, r5, r6, pc}

08004c98 <__sfp_lock_acquire>:
 8004c98:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <__sfp_lock_acquire+0x8>)
 8004c9a:	f000 b8b3 	b.w	8004e04 <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	20000304 	.word	0x20000304

08004ca4 <__sfp_lock_release>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	; (8004cac <__sfp_lock_release+0x8>)
 8004ca6:	f000 b8ae 	b.w	8004e06 <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	20000304 	.word	0x20000304

08004cb0 <__sinit_lock_acquire>:
 8004cb0:	4801      	ldr	r0, [pc, #4]	; (8004cb8 <__sinit_lock_acquire+0x8>)
 8004cb2:	f000 b8a7 	b.w	8004e04 <__retarget_lock_acquire_recursive>
 8004cb6:	bf00      	nop
 8004cb8:	200002ff 	.word	0x200002ff

08004cbc <__sinit_lock_release>:
 8004cbc:	4801      	ldr	r0, [pc, #4]	; (8004cc4 <__sinit_lock_release+0x8>)
 8004cbe:	f000 b8a2 	b.w	8004e06 <__retarget_lock_release_recursive>
 8004cc2:	bf00      	nop
 8004cc4:	200002ff 	.word	0x200002ff

08004cc8 <__sinit>:
 8004cc8:	b510      	push	{r4, lr}
 8004cca:	4604      	mov	r4, r0
 8004ccc:	f7ff fff0 	bl	8004cb0 <__sinit_lock_acquire>
 8004cd0:	69a3      	ldr	r3, [r4, #24]
 8004cd2:	b11b      	cbz	r3, 8004cdc <__sinit+0x14>
 8004cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd8:	f7ff bff0 	b.w	8004cbc <__sinit_lock_release>
 8004cdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ce0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <__sinit+0x68>)
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <__sinit+0x6c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cea:	42a3      	cmp	r3, r4
 8004cec:	bf08      	it	eq
 8004cee:	2301      	moveq	r3, #1
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	bf08      	it	eq
 8004cf4:	61a3      	streq	r3, [r4, #24]
 8004cf6:	f000 f81f 	bl	8004d38 <__sfp>
 8004cfa:	6060      	str	r0, [r4, #4]
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f000 f81b 	bl	8004d38 <__sfp>
 8004d02:	60a0      	str	r0, [r4, #8]
 8004d04:	4620      	mov	r0, r4
 8004d06:	f000 f817 	bl	8004d38 <__sfp>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2104      	movs	r1, #4
 8004d0e:	60e0      	str	r0, [r4, #12]
 8004d10:	6860      	ldr	r0, [r4, #4]
 8004d12:	f7ff ff81 	bl	8004c18 <std>
 8004d16:	2201      	movs	r2, #1
 8004d18:	2109      	movs	r1, #9
 8004d1a:	68a0      	ldr	r0, [r4, #8]
 8004d1c:	f7ff ff7c 	bl	8004c18 <std>
 8004d20:	2202      	movs	r2, #2
 8004d22:	2112      	movs	r1, #18
 8004d24:	68e0      	ldr	r0, [r4, #12]
 8004d26:	f7ff ff77 	bl	8004c18 <std>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	61a3      	str	r3, [r4, #24]
 8004d2e:	e7d1      	b.n	8004cd4 <__sinit+0xc>
 8004d30:	08005130 	.word	0x08005130
 8004d34:	08004c61 	.word	0x08004c61

08004d38 <__sfp>:
 8004d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3a:	4607      	mov	r7, r0
 8004d3c:	f7ff ffac 	bl	8004c98 <__sfp_lock_acquire>
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <__sfp+0x84>)
 8004d42:	681e      	ldr	r6, [r3, #0]
 8004d44:	69b3      	ldr	r3, [r6, #24]
 8004d46:	b913      	cbnz	r3, 8004d4e <__sfp+0x16>
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7ff ffbd 	bl	8004cc8 <__sinit>
 8004d4e:	3648      	adds	r6, #72	; 0x48
 8004d50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	d503      	bpl.n	8004d60 <__sfp+0x28>
 8004d58:	6833      	ldr	r3, [r6, #0]
 8004d5a:	b30b      	cbz	r3, 8004da0 <__sfp+0x68>
 8004d5c:	6836      	ldr	r6, [r6, #0]
 8004d5e:	e7f7      	b.n	8004d50 <__sfp+0x18>
 8004d60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d64:	b9d5      	cbnz	r5, 8004d9c <__sfp+0x64>
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <__sfp+0x88>)
 8004d68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d6c:	60e3      	str	r3, [r4, #12]
 8004d6e:	6665      	str	r5, [r4, #100]	; 0x64
 8004d70:	f000 f847 	bl	8004e02 <__retarget_lock_init_recursive>
 8004d74:	f7ff ff96 	bl	8004ca4 <__sfp_lock_release>
 8004d78:	2208      	movs	r2, #8
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d84:	6025      	str	r5, [r4, #0]
 8004d86:	61a5      	str	r5, [r4, #24]
 8004d88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d8c:	f7ff f8ea 	bl	8003f64 <memset>
 8004d90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d98:	4620      	mov	r0, r4
 8004d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9c:	3468      	adds	r4, #104	; 0x68
 8004d9e:	e7d9      	b.n	8004d54 <__sfp+0x1c>
 8004da0:	2104      	movs	r1, #4
 8004da2:	4638      	mov	r0, r7
 8004da4:	f7ff ff62 	bl	8004c6c <__sfmoreglue>
 8004da8:	4604      	mov	r4, r0
 8004daa:	6030      	str	r0, [r6, #0]
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d1d5      	bne.n	8004d5c <__sfp+0x24>
 8004db0:	f7ff ff78 	bl	8004ca4 <__sfp_lock_release>
 8004db4:	230c      	movs	r3, #12
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	e7ee      	b.n	8004d98 <__sfp+0x60>
 8004dba:	bf00      	nop
 8004dbc:	08005130 	.word	0x08005130
 8004dc0:	ffff0001 	.word	0xffff0001

08004dc4 <_fwalk_reent>:
 8004dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc8:	4606      	mov	r6, r0
 8004dca:	4688      	mov	r8, r1
 8004dcc:	2700      	movs	r7, #0
 8004dce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004dd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dd6:	f1b9 0901 	subs.w	r9, r9, #1
 8004dda:	d505      	bpl.n	8004de8 <_fwalk_reent+0x24>
 8004ddc:	6824      	ldr	r4, [r4, #0]
 8004dde:	2c00      	cmp	r4, #0
 8004de0:	d1f7      	bne.n	8004dd2 <_fwalk_reent+0xe>
 8004de2:	4638      	mov	r0, r7
 8004de4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004de8:	89ab      	ldrh	r3, [r5, #12]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d907      	bls.n	8004dfe <_fwalk_reent+0x3a>
 8004dee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004df2:	3301      	adds	r3, #1
 8004df4:	d003      	beq.n	8004dfe <_fwalk_reent+0x3a>
 8004df6:	4629      	mov	r1, r5
 8004df8:	4630      	mov	r0, r6
 8004dfa:	47c0      	blx	r8
 8004dfc:	4307      	orrs	r7, r0
 8004dfe:	3568      	adds	r5, #104	; 0x68
 8004e00:	e7e9      	b.n	8004dd6 <_fwalk_reent+0x12>

08004e02 <__retarget_lock_init_recursive>:
 8004e02:	4770      	bx	lr

08004e04 <__retarget_lock_acquire_recursive>:
 8004e04:	4770      	bx	lr

08004e06 <__retarget_lock_release_recursive>:
 8004e06:	4770      	bx	lr

08004e08 <__swhatbuf_r>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	460e      	mov	r6, r1
 8004e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e10:	4614      	mov	r4, r2
 8004e12:	2900      	cmp	r1, #0
 8004e14:	461d      	mov	r5, r3
 8004e16:	b096      	sub	sp, #88	; 0x58
 8004e18:	da07      	bge.n	8004e2a <__swhatbuf_r+0x22>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	602b      	str	r3, [r5, #0]
 8004e1e:	89b3      	ldrh	r3, [r6, #12]
 8004e20:	061a      	lsls	r2, r3, #24
 8004e22:	d410      	bmi.n	8004e46 <__swhatbuf_r+0x3e>
 8004e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e28:	e00e      	b.n	8004e48 <__swhatbuf_r+0x40>
 8004e2a:	466a      	mov	r2, sp
 8004e2c:	f000 f914 	bl	8005058 <_fstat_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	dbf2      	blt.n	8004e1a <__swhatbuf_r+0x12>
 8004e34:	9a01      	ldr	r2, [sp, #4]
 8004e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e3e:	425a      	negs	r2, r3
 8004e40:	415a      	adcs	r2, r3
 8004e42:	602a      	str	r2, [r5, #0]
 8004e44:	e7ee      	b.n	8004e24 <__swhatbuf_r+0x1c>
 8004e46:	2340      	movs	r3, #64	; 0x40
 8004e48:	2000      	movs	r0, #0
 8004e4a:	6023      	str	r3, [r4, #0]
 8004e4c:	b016      	add	sp, #88	; 0x58
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}

08004e50 <__smakebuf_r>:
 8004e50:	898b      	ldrh	r3, [r1, #12]
 8004e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e54:	079d      	lsls	r5, r3, #30
 8004e56:	4606      	mov	r6, r0
 8004e58:	460c      	mov	r4, r1
 8004e5a:	d507      	bpl.n	8004e6c <__smakebuf_r+0x1c>
 8004e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	2301      	movs	r3, #1
 8004e66:	6163      	str	r3, [r4, #20]
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	466a      	mov	r2, sp
 8004e6e:	ab01      	add	r3, sp, #4
 8004e70:	f7ff ffca 	bl	8004e08 <__swhatbuf_r>
 8004e74:	9900      	ldr	r1, [sp, #0]
 8004e76:	4605      	mov	r5, r0
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f7ff f9eb 	bl	8004254 <_malloc_r>
 8004e7e:	b948      	cbnz	r0, 8004e94 <__smakebuf_r+0x44>
 8004e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e84:	059a      	lsls	r2, r3, #22
 8004e86:	d4ef      	bmi.n	8004e68 <__smakebuf_r+0x18>
 8004e88:	f023 0303 	bic.w	r3, r3, #3
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	e7e3      	b.n	8004e5c <__smakebuf_r+0xc>
 8004e94:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <__smakebuf_r+0x7c>)
 8004e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	6020      	str	r0, [r4, #0]
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	9b00      	ldr	r3, [sp, #0]
 8004ea4:	6120      	str	r0, [r4, #16]
 8004ea6:	6163      	str	r3, [r4, #20]
 8004ea8:	9b01      	ldr	r3, [sp, #4]
 8004eaa:	b15b      	cbz	r3, 8004ec4 <__smakebuf_r+0x74>
 8004eac:	4630      	mov	r0, r6
 8004eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eb2:	f000 f8e3 	bl	800507c <_isatty_r>
 8004eb6:	b128      	cbz	r0, 8004ec4 <__smakebuf_r+0x74>
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f023 0303 	bic.w	r3, r3, #3
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	81a3      	strh	r3, [r4, #12]
 8004ec4:	89a0      	ldrh	r0, [r4, #12]
 8004ec6:	4305      	orrs	r5, r0
 8004ec8:	81a5      	strh	r5, [r4, #12]
 8004eca:	e7cd      	b.n	8004e68 <__smakebuf_r+0x18>
 8004ecc:	08004c61 	.word	0x08004c61

08004ed0 <memchr>:
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	b2c9      	uxtb	r1, r1
 8004ed6:	4402      	add	r2, r0
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	d101      	bne.n	8004ee2 <memchr+0x12>
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e003      	b.n	8004eea <memchr+0x1a>
 8004ee2:	7804      	ldrb	r4, [r0, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	428c      	cmp	r4, r1
 8004ee8:	d1f6      	bne.n	8004ed8 <memchr+0x8>
 8004eea:	bd10      	pop	{r4, pc}

08004eec <__malloc_lock>:
 8004eec:	4801      	ldr	r0, [pc, #4]	; (8004ef4 <__malloc_lock+0x8>)
 8004eee:	f7ff bf89 	b.w	8004e04 <__retarget_lock_acquire_recursive>
 8004ef2:	bf00      	nop
 8004ef4:	20000300 	.word	0x20000300

08004ef8 <__malloc_unlock>:
 8004ef8:	4801      	ldr	r0, [pc, #4]	; (8004f00 <__malloc_unlock+0x8>)
 8004efa:	f7ff bf84 	b.w	8004e06 <__retarget_lock_release_recursive>
 8004efe:	bf00      	nop
 8004f00:	20000300 	.word	0x20000300

08004f04 <_raise_r>:
 8004f04:	291f      	cmp	r1, #31
 8004f06:	b538      	push	{r3, r4, r5, lr}
 8004f08:	4604      	mov	r4, r0
 8004f0a:	460d      	mov	r5, r1
 8004f0c:	d904      	bls.n	8004f18 <_raise_r+0x14>
 8004f0e:	2316      	movs	r3, #22
 8004f10:	6003      	str	r3, [r0, #0]
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f1a:	b112      	cbz	r2, 8004f22 <_raise_r+0x1e>
 8004f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f20:	b94b      	cbnz	r3, 8004f36 <_raise_r+0x32>
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f830 	bl	8004f88 <_getpid_r>
 8004f28:	462a      	mov	r2, r5
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f32:	f000 b817 	b.w	8004f64 <_kill_r>
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d00a      	beq.n	8004f50 <_raise_r+0x4c>
 8004f3a:	1c59      	adds	r1, r3, #1
 8004f3c:	d103      	bne.n	8004f46 <_raise_r+0x42>
 8004f3e:	2316      	movs	r3, #22
 8004f40:	6003      	str	r3, [r0, #0]
 8004f42:	2001      	movs	r0, #1
 8004f44:	e7e7      	b.n	8004f16 <_raise_r+0x12>
 8004f46:	2400      	movs	r4, #0
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f4e:	4798      	blx	r3
 8004f50:	2000      	movs	r0, #0
 8004f52:	e7e0      	b.n	8004f16 <_raise_r+0x12>

08004f54 <raise>:
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <raise+0xc>)
 8004f56:	4601      	mov	r1, r0
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f7ff bfd3 	b.w	8004f04 <_raise_r>
 8004f5e:	bf00      	nop
 8004f60:	2000000c 	.word	0x2000000c

08004f64 <_kill_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	2300      	movs	r3, #0
 8004f68:	4d06      	ldr	r5, [pc, #24]	; (8004f84 <_kill_r+0x20>)
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	f7fb fe92 	bl	8000c9a <_kill>
 8004f76:	1c43      	adds	r3, r0, #1
 8004f78:	d102      	bne.n	8004f80 <_kill_r+0x1c>
 8004f7a:	682b      	ldr	r3, [r5, #0]
 8004f7c:	b103      	cbz	r3, 8004f80 <_kill_r+0x1c>
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	bd38      	pop	{r3, r4, r5, pc}
 8004f82:	bf00      	nop
 8004f84:	20000308 	.word	0x20000308

08004f88 <_getpid_r>:
 8004f88:	f7fb be80 	b.w	8000c8c <_getpid>

08004f8c <__sread>:
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	460c      	mov	r4, r1
 8004f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f94:	f000 f894 	bl	80050c0 <_read_r>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	bfab      	itete	ge
 8004f9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004fa0:	181b      	addge	r3, r3, r0
 8004fa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fa6:	bfac      	ite	ge
 8004fa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004faa:	81a3      	strhlt	r3, [r4, #12]
 8004fac:	bd10      	pop	{r4, pc}

08004fae <__swrite>:
 8004fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb2:	461f      	mov	r7, r3
 8004fb4:	898b      	ldrh	r3, [r1, #12]
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	05db      	lsls	r3, r3, #23
 8004fba:	460c      	mov	r4, r1
 8004fbc:	4616      	mov	r6, r2
 8004fbe:	d505      	bpl.n	8004fcc <__swrite+0x1e>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	f000 f868 	bl	800509c <_lseek_r>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	4632      	mov	r2, r6
 8004fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	463b      	mov	r3, r7
 8004fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe2:	f000 b817 	b.w	8005014 <_write_r>

08004fe6 <__sseek>:
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	460c      	mov	r4, r1
 8004fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fee:	f000 f855 	bl	800509c <_lseek_r>
 8004ff2:	1c43      	adds	r3, r0, #1
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	bf15      	itete	ne
 8004ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005002:	81a3      	strheq	r3, [r4, #12]
 8005004:	bf18      	it	ne
 8005006:	81a3      	strhne	r3, [r4, #12]
 8005008:	bd10      	pop	{r4, pc}

0800500a <__sclose>:
 800500a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500e:	f000 b813 	b.w	8005038 <_close_r>
	...

08005014 <_write_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4604      	mov	r4, r0
 8005018:	4608      	mov	r0, r1
 800501a:	4611      	mov	r1, r2
 800501c:	2200      	movs	r2, #0
 800501e:	4d05      	ldr	r5, [pc, #20]	; (8005034 <_write_r+0x20>)
 8005020:	602a      	str	r2, [r5, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	f7fb fe70 	bl	8000d08 <_write>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d102      	bne.n	8005032 <_write_r+0x1e>
 800502c:	682b      	ldr	r3, [r5, #0]
 800502e:	b103      	cbz	r3, 8005032 <_write_r+0x1e>
 8005030:	6023      	str	r3, [r4, #0]
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	20000308 	.word	0x20000308

08005038 <_close_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	2300      	movs	r3, #0
 800503c:	4d05      	ldr	r5, [pc, #20]	; (8005054 <_close_r+0x1c>)
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	f7fb fe7c 	bl	8000d40 <_close>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_close_r+0x1a>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_close_r+0x1a>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000308 	.word	0x20000308

08005058 <_fstat_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	2300      	movs	r3, #0
 800505c:	4d06      	ldr	r5, [pc, #24]	; (8005078 <_fstat_r+0x20>)
 800505e:	4604      	mov	r4, r0
 8005060:	4608      	mov	r0, r1
 8005062:	4611      	mov	r1, r2
 8005064:	602b      	str	r3, [r5, #0]
 8005066:	f7fb fe76 	bl	8000d56 <_fstat>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d102      	bne.n	8005074 <_fstat_r+0x1c>
 800506e:	682b      	ldr	r3, [r5, #0]
 8005070:	b103      	cbz	r3, 8005074 <_fstat_r+0x1c>
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	bd38      	pop	{r3, r4, r5, pc}
 8005076:	bf00      	nop
 8005078:	20000308 	.word	0x20000308

0800507c <_isatty_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	2300      	movs	r3, #0
 8005080:	4d05      	ldr	r5, [pc, #20]	; (8005098 <_isatty_r+0x1c>)
 8005082:	4604      	mov	r4, r0
 8005084:	4608      	mov	r0, r1
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	f7fb fe74 	bl	8000d74 <_isatty>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d102      	bne.n	8005096 <_isatty_r+0x1a>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	b103      	cbz	r3, 8005096 <_isatty_r+0x1a>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	20000308 	.word	0x20000308

0800509c <_lseek_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4604      	mov	r4, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	4611      	mov	r1, r2
 80050a4:	2200      	movs	r2, #0
 80050a6:	4d05      	ldr	r5, [pc, #20]	; (80050bc <_lseek_r+0x20>)
 80050a8:	602a      	str	r2, [r5, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f7fb fe6c 	bl	8000d88 <_lseek>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_lseek_r+0x1e>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_lseek_r+0x1e>
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	20000308 	.word	0x20000308

080050c0 <_read_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4604      	mov	r4, r0
 80050c4:	4608      	mov	r0, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	2200      	movs	r2, #0
 80050ca:	4d05      	ldr	r5, [pc, #20]	; (80050e0 <_read_r+0x20>)
 80050cc:	602a      	str	r2, [r5, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	f7fb fdfd 	bl	8000cce <_read>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	d102      	bne.n	80050de <_read_r+0x1e>
 80050d8:	682b      	ldr	r3, [r5, #0]
 80050da:	b103      	cbz	r3, 80050de <_read_r+0x1e>
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	bd38      	pop	{r3, r4, r5, pc}
 80050e0:	20000308 	.word	0x20000308

080050e4 <_init>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr

080050f0 <_fini>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr
